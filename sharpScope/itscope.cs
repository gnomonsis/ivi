//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Measurement Studio for itScope 1.0.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sharpScope
{
    using System;
    using System.Runtime.InteropServices;


    public class itScope : object, System.IDisposable
    {

        private System.Runtime.InteropServices.HandleRef _handle;

        private bool _disposed = true;

        ~itScope() { Dispose(false); }


        /// <summary>
        /// This function creates an IVI instrument driver session, typically using the C session instrument handle.
        /// </summary>
        /// <param name="Instrument_Handle">
        /// The instrument handle that is used to create an IVI instrument driver session.
        /// </param>
        public itScope(System.IntPtr Instrument_Handle)
        {
            this._handle = new System.Runtime.InteropServices.HandleRef(this, Instrument_Handle);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver session.
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note: This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so. You can use the same session in multiple program threads. You can use the tkdpo4k_LockSession and tkdpo4k_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// Content from the IVI specifications reproduced with permission from the IVI Foundation. 
        ///  
        /// The IVI Foundation and its member companies make no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The IVI Foundation and its member companies shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Passes the resource name of the device to initialize.
        /// 
        /// You also can pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility. The virtual instrument identifies a specific device and specifies the initial settings for the session. A logical name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table for correct grammar to use for this parameter. Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// USB[board]::manufacturer ID::model code::serial number[::USB interface number][::INSTR]
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// board - 0
        /// secondary address - none (31)
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "ASRL1::INSTR" - Serial on COM 1
        /// "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
        ///                     secondary address
        /// "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
        ///                        secondary address 5
        /// "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
        ///                         secondary address 5
        /// "SampleScope" - Logical name "SampleScope"
        /// 
        /// Default Value:  ""
        /// </param>
        /// <param name="ID_Query">
        /// Specifies whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument. When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query. The function uses default instrument type to configure the instrument.
        /// </param>
        /// <param name="Reset_Device">
        /// Specifies whether you want to reset the instrument during the initialization process.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Do Not Reset
        /// </param>
        public itScope(string Resource_Name, bool ID_Query, bool Reset_Device)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.init(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// This function performs the following initialization actions:
        /// 
        /// - Creates a new IVI instrument driver and optionally sets the initial state of the following session attributes:
        /// 
        ///     TKDPO4K_ATTR_RANGE_CHECK         
        ///     TKDPO4K_ATTR_QUERY_INSTRUMENT_STATUS  
        ///     TKDPO4K_ATTR_CACHE               
        ///     TKDPO4K_ATTR_SIMULATE            
        ///     TKDPO4K_ATTR_RECORD_COERCIONS    
        /// 
        /// - Opens a session to the specified device using the interface and address you specify for the Resource Name parameter.
        /// 
        /// - If the ID Query parameter is set to VI_TRUE, this function queries the instrument ID and checks that it is valid for this instrument driver.
        /// 
        /// - If the Reset parameter is set to VI_TRUE, this function resets the instrument to a known state.
        /// 
        /// - Sends initialization commands to set the instrument to the state necessary for the operation of the instrument driver.
        /// 
        /// - Returns a ViSession handle that you use to identify the instrument in all subsequent instrument driver function calls.
        /// 
        /// Note: This function creates a new session each time you invoke it. Although you can open more than one IVI session for the same resource, it is best not to do so. You can use the same session in multiple program threads. You can use the tkdpo4k_LockSession and tkdpo4k_UnlockSession functions to protect sections of code that require exclusive access to the resource.
        /// 
        /// Content from the IVI specifications reproduced with permission from the IVI Foundation. 
        ///  
        /// The IVI Foundation and its member companies make no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. The IVI Foundation and its member companies shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material.
        /// 
        /// </summary>
        /// <param name="Resource_Name">
        /// Passes the resource name of the device to initialize.
        /// 
        /// You also can pass the name of a virtual instrument or logical name that you configure with the IVI Configuration utility. The virtual instrument identifies a specific device and specifies the initial settings for the session. A logical Name identifies a particular virtual instrument.
        /// 
        /// Refer to the following table below for the exact grammar to use for this parameter. Optional fields are shown in square brackets ([]).
        /// 
        /// Syntax
        /// ------------------------------------------------------
        /// USB[board]::manufacturer ID::model code::serial number[::USB interface number][::INSTR]
        /// 
        /// If you do not specify a value for an optional field, the following values are used:
        /// 
        /// Optional Field - Value
        /// ------------------------------------------------------
        /// board - 0
        /// secondary address - none (31)
        /// 
        /// The following table contains example valid values for this parameter.
        /// 
        /// "Valid Value" - Description
        /// ------------------------------------------------------
        /// "ASRL1::INSTR" - Serial on COM 1
        /// "GPIB::22::INSTR" - GPIB board 0, primary address 22 no
        ///                     secondary address
        /// "GPIB::22::5::INSTR" - GPIB board 0, primary address 22
        ///                        secondary address 5
        /// "GPIB1::22::5::INSTR" - GPIB board 1, primary address 22
        ///                         secondary address 5
        /// "SampleScope" - Logical name "SampleScope"
        /// 
        /// Default Value:  ""
        /// </param>
        /// <param name="ID_Query">
        /// Specifies whether you want the instrument driver to perform an ID Query.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Perform ID Query (Default Value)
        /// VI_FALSE (0) - Skip ID Query
        /// 
        /// When you set this parameter to VI_TRUE, the driver verifies that the instrument you initialize is a type that this driver supports.  
        /// 
        /// Circumstances can arise where it is undesirable to send an ID Query command string to the instrument. When you set this parameter to VI_FALSE, the function initializes the instrument without performing an ID Query. You should specify instrument modules in option strings. The valid instrument modules are listed here.
        /// ----------------------------------------------------
        /// Instrument Module  | Max Sample Rate | Channel  
        /// ----------------------------------------------------
        /// DPO4104, MSO4104   | 1 GHz           | 4 channels
        /// ----------------------------------------------------
        /// DPO4054, MSO4054   | 500 MHz         | 4 channels
        /// ----------------------------------------------------
        /// DPO4034, MSO4034   | 350 MHz         | 4 channels
        /// ----------------------------------------------------
        /// DPO4032, MSO4032   | 350 MHz         | 2 channels
        /// ----------------------------------------------------
        /// DPO3012            | 100 MHz         | 2 channels
        /// ----------------------------------------------------
        /// DPO3014            | 100 MHz         | 4 channels
        /// ----------------------------------------------------
        /// DPO3032            | 300 MHz         | 2 channels
        /// ----------------------------------------------------
        /// DPO3034            | 300 MHz         | 4 channels
        /// ----------------------------------------------------
        /// DPO3052            | 500 MHz         | 2 channels
        /// ----------------------------------------------------
        /// DPO3054            | 500 MHz         | 4 channels
        /// ----------------------------------------------------
        /// For example, if your instrument is of type DPO4104, you should specify the option string as "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1,DriverSetup=Model : DPO4054"
        /// </param>
        /// <param name="Reset_Device">
        /// Specifies whether you want to reset the instrument during the initialization process.
        /// 
        /// Valid Range:
        /// VI_TRUE  (1) - Reset Device (Default Value)
        /// VI_FALSE (0) - Do Not Reset
        /// </param>
        /// <param name="Option_String">
        /// Sets the initial value of certain attributes for the session.  The following table lists the attributes and the name you use in this parameter to identify the attribute.
        /// 
        /// Name              Attribute Defined Constant   
        /// --------------------------------------------
        /// RangeCheck        TKDPO4K_ATTR_RANGE_CHECK
        /// QueryInstrStatus  TKDPO4K_ATTR_QUERY_INSTRUMENT_STATUS   
        /// Cache             TKDPO4K_ATTR_CACHE   
        /// Simulate          TKDPO4K_ATTR_SIMULATE  
        /// RecordCoercions   TKDPO4K_ATTR_RECORD_COERCIONS
        /// DriverSetup       TKDPO4K_ATTR_DRIVER_SETUP
        /// 
        /// The Driver Setup attribute is used here to specify configurations for the instrument. Firstly, when you disable ID Query by setting ID Query to No, or use simulating mode, you must specifies the model for the instrument. The following are the valid values for instrument models:
        ///                   "DPO4104"
        ///                   "DPO4054"
        ///                   "DPO4034"
        ///                   "DPO4032"
        ///                   "MSO4104"
        ///                   "MSO4054"
        ///                   "MSO4034"
        ///                   "MSO4032"
        ///                   "DPO3012"
        ///                   "DPO3014"
        ///                   "DPO3032"
        ///                   "DPO3034"
        ///                   "DPO3052"
        ///                   "DPO3054"
        /// You could specify Driver Setup in the following way:
        /// "DriverSetup=Model : DPO4054"
        /// 
        /// Besides specifying instrument models, you can configure whether to initialize the instrument in a non-invasive way. Defaultly the IVI driver applies default settings to the instrument and changes it to a pre-set state when initializing the instrument, but you might want to keep the instrument state unchanged. You can achieve this by adding "NonInvasiveInit" option Driver Setup. Specifying "NonInvasiveInit : TRUE" applies non-invasive instrument setup. Specifying "NonInvasiveInit : FALSE" or ignoring it applies default instrument setup.
        /// 
        /// Here is an example of specifying instrument model as DPO4054 and  applying non-invasive instrument setup:
        /// "DriverSetup=Model : DPO4054 ; NonInvasiveInit : TRUE"
        /// 
        /// The format of this string is, "AttributeName=Value" where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.  
        /// 
        /// If you pass NULL or an empty string for this parameter, the session uses the default values for the attributes.   You can override the default values by assigning a value explicitly in a string you pass for this parameter.  You do not have to specify all of the attributes and may leave any of them out.  If you do not specify one of the attributes, its default value will be used.  
        /// 
        /// The default values for the attributes are shown below:
        /// 
        ///     Attribute Name     Default Value
        ///     ----------------   -------------
        ///     RangeCheck         VI_TRUE
        ///     QueryInstrStatus   VI_TRUE
        ///     Cache              VI_TRUE
        ///     Simulate           VI_FALSE
        ///     RecordCoercions    VI_FALSE
        ///     DriverSetup        Model : DPO4054
        /// 
        /// The following are the valid values for ViBoolean attributes:
        /// 
        ///     True:     1, TRUE, or VI_TRUE
        ///     False:    0, False, or VI_FALSE
        /// 
        /// 
        /// Default Value:
        /// "Simulate=0,RangeCheck=1,QueryInstrStatus=1,Cache=1,DriverSetup=Model : DPO4054"
        /// 
        /// Notes: 
        /// (1) if you enable IDQuery, the instrument driver automatically detects instrument model.
        /// (2) If you disable IDQuery and pass instrument model through DriverSetup, the instrument driver use the specified model. 
        /// (3) If you enable IDQuery and don't pass instrument model through DriverSetup, the instrument driver use DPO4054 as default models.
        /// </param>
        public itScope(string Resource_Name, bool ID_Query, bool Reset_Device, string Option_String)
        {
            System.IntPtr instrumentHandle;
            int pInvokeResult = PInvoke.InitWithOptions(Resource_Name, System.Convert.ToUInt16(ID_Query), System.Convert.ToUInt16(Reset_Device), Option_String, out instrumentHandle);
            this._handle = new System.Runtime.InteropServices.HandleRef(this, instrumentHandle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            this._disposed = false;
        }

        /// <summary>
        /// Gets the instrument handle.
        /// </summary>
        /// <value>
        /// The value is the IntPtr that represents the handle to the instrument.
        /// </value>
        public System.IntPtr Handle
        {
            get
            {
                return this._handle.Handle;
            }
        }

        /// <summary>
        /// This function configures the number of waveforms that the oscilloscope  acquires and averages. After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.  
        /// 
        /// Note: You must set the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to TKDPO4K_VAL_AVERAGE before you call this function. To set the acquisition type, call the tkdpo4k_ConfigureAcquisitionType function. 
        /// </summary>
        /// <param name="Number_of_Averages">
        /// Passes the number of waveforms you want the oscilloscope to acquire and to average. The driver sets the TKDPO4K_ATTR_NUM_AVERAGES attribute to this value.  
        /// 
        /// After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.  
        /// 
        /// Valid Range: 2 to 512
        /// 
        /// Resolution: power of 2
        /// 
        /// Default Value: 16
        /// 
        /// Notes:
        /// 
        /// (1) This parameter affects instrument behavior only when the selected Acquisition Type is TKDPO4K_VAL_AVERAGE.     
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureNumAverages(int Number_of_Averages)
        {
            int pInvokeResult = PInvoke.ConfigureNumAverages(this._handle, Number_of_Averages);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// When you set the acquisition type to TKDPO4K_VAL_ENVELOPE, the oscilloscope acquires multiple waveforms. After each waveform acquisition, the oscilloscope keeps the minimum and maximum values it finds for each element in the waveform record. This function configures the number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms.
        /// 
        /// After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state.
        /// 
        /// Notes: 
        /// 
        /// 1.Set the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to TKDPO4K_VAL_ENVELOPE before you call this function. To set the acquisition type, call the tkdpo4k_ConfigureAcquisitionType function. 
        /// 
        /// 2.The number of envelopes can be set from 1 to 2000 in increments of 1, or to INFInite. Setting the value to a number greater than 2000 sets the number of envelopes to INFInite.
        /// </summary>
        /// <param name="Number_of_Envelopes">
        /// When you set the acquisition type to TKDPO4K_VAL_ENVELOPE, the oscilloscope acquires multiple waveforms. After each waveform acquisition, the oscilloscope keeps the minimum and maximum values it finds for each point in the waveform record. This parameter specifies the number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms. The driver sets the TKDPO4K_ATTR_NUM_ENVELOPES attribute to this value.  
        /// 
        /// After the oscilloscope acquires as many waveforms as you specify, it returns to the idle state. Setting this parameter to TKDPO4K_VAL_INFINITE configures the oscilloscope to acquire waveforms and create cumulative minimum and maximum waveforms continuously. 
        /// 
        /// Valid Range: 
        /// 1 - 2000
        /// TKDPO4K_VAL_INFINITE (0)
        /// 
        /// Default Value: TKDPO4K_VAL_INFINITE
        /// 
        /// Notes:
        /// 
        /// (1) This parameter affects instrument behavior only when the selected Acquisition Type is TKDPO4K_VAL_ENVELOPE.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ConfigureNumEnvelopes(int Number_of_Envelopes)
        {
            int pInvokeResult = PInvoke.ConfigureNumEnvelopes(this._handle, Number_of_Envelopes);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the common attributes of the acquisition subsystem. These attributes are the time per record, minimum record length, and acquisition start time.
        /// </summary>
        /// <param name="Time_Per_Record__seconds_">
        /// Passes the time duration that corresponds to the record length.  The driver sets the TKDPO4K_ATTR_HORZ_TIME_PER_RECORD attribute to this value.
        /// 
        /// Units: Seconds
        /// 
        /// Valid Range: 0.0 ns to 10000.0 s
        /// 
        /// Default Value: 4.0e-5 s
        /// 
        /// Resolution: All values are coerced in a 1-2-4 sequence.
        /// 
        /// </param>
        /// <param name="Minimum_Record_Length">
        /// Passes the minimum number of points you require in the waveform record for each channel. The driver sets the  TKDPO4K_ATTR_HORZ_MIN_NUM_PTS attribute to this value and configures the record length that the oscilloscope uses for waveform acquisition. Call the tkdpo4k_ActualRecordLength function to obtain the actual record length.
        /// 
        /// Valid Range:
        ///   For DPO/MSO4K models:
        ///     1000 to 20000000 points
        /// 
        ///   For DPO3K models:
        ///     0 to 5000000 points
        /// 
        /// Default Value: 10000
        /// 
        /// Note:
        /// (1)  Entered value is coerced to the adjacent value that defines the requested minimum record length. Example: Acquisition Type = Peak Detect, minimum record length = 300, actual number of points sampled will be 1000.
        /// </param>
        /// <param name="Acquisition_Start_Time__second_">
        /// Specifies the length of time from the trigger event to the first point in the waveform record. If the value is positive, the first point in the waveform record occurs after the trigger event. If the value is negative, the first point in the waveform record occurs before the trigger event. The driver sets the TKDPO4K_ATTR_ACQUISITION_START_TIME attribute to this value.
        /// 
        /// 
        /// Valid Range: (-TKDPO4K_ATTR_HORZ_TIME_PER_RECORD) to 50.0
        /// 
        /// The units are seconds.
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function. To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureAcquisitionRecord(double Time_Per_Record__seconds_, int Minimum_Record_Length, double Acquisition_Start_Time__second_)
        {
            int pInvokeResult = PInvoke.ConfigureAcquisitionRecord(this._handle, Time_Per_Record__seconds_, Minimum_Record_Length, Acquisition_Start_Time__second_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures how the oscilloscope acquires data and fills the waveform record.  
        /// 
        /// When you configure the acquisition type to Normal, HiRes or Average, the oscilloscope acquires only one waveform. To retrieve the waveform, you should use tkdpo4k_ReadWaveform or tkdpo4k_FetchWaveform functions.
        /// 
        /// When you configure the acquisition type to Envelope or Peak Detect, the oscilloscope acquires minimum and maximum waveforms. To retrieve the minimum and maximum waveforms, you should use the tkdpo4k_ReadMinMaxWaveform and tkdpo4k_FetchMinMaxWaveform functions.
        /// </summary>
        /// <param name="Aquisition_Type">
        /// Passes the acquisition type for each channel. It determines how the oscilloscope acquires data and fills the waveform record. The driver sets the TKDPO4K_ATTR_ACQUISITION_TYPE attribute to this value. 
        /// 
        /// If you set this control to Normal, the oscilloscope acquires one sample for each point in the waveform.
        /// 
        /// If you set this control to HiRes, the oscilloscope oversamples the input signal and calculates the average value that corresponds to each position in the waveform record.
        /// 
        /// If you set this control to Peak Detect, the oscilloscope oversamples the input signal and keeps the minimum and maximum values that correspond to each position in the waveform record.
        /// 
        /// If you set this control to Envelope, the oscilloscope acquires multiple waveforms and keeps the minimum and maximum voltages it acquires for each point in the waveform record. You can specify the number of envelopes through the tkdpo4k_ConfigureNumEnvelopes function.
        /// 
        /// If you set this control to Average, the oscilloscope acquires multiple waveforms and calculates the average value for each point in the waveform record. You can specify the number of waveforms to acquire through the tkdpo4k_ConfigureNumAverages function.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_NORMAL   -  Normal
        /// TKDPO4K_VAL_HI_RES   -  HiRes
        /// TKDPO4K_VAL_PEAK_DETECT   -  Peak Detect
        /// TKDPO4K_VAL_ENVELOPE   -  Envelope
        /// TKDPO4K_VAL_AVERAGE   -  Average
        /// 
        /// Default Value: TKDPO4K_VAL_NORMAL
        /// 
        /// SCPI Command:
        /// ACQuire:MODe
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureAcquisitionType(int Aquisition_Type)
        {
            int pInvokeResult = PInvoke.ConfigureAcquisitionType(this._handle, Aquisition_Type);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the actual number of points the oscilloscope acquires for each channel. After you configure the oscilloscope for an acquisition, call this function to determine the size of the waveforms that the oscilloscope acquires. The value is equal to or greater than the minimum number of points you specify in the tkdpo4k_ConfigureAcquisitionRecord function.  
        /// 
        /// You must allocate a ViReal64 array of this size or greater to pass as the Waveform Array parameter of the tkdpo4k_ReadWaveform and tkdpo4k_FetchWaveform functions.
        /// 
        /// Note: The oscilloscope may use different size records depending on the acquisition type. You specify the acquisition type with the tkdpo4k_ConfigureAcquisitionType function.
        /// </summary>
        /// <param name="Actual__Record_Length">
        /// Returns the actual number of points that the oscilloscope acquires for each channel. The value is equal to or greater than the minimum number of points you specify with the tkdpo4k_ConfigureAcquisitionRecord function.  
        /// 
        /// You must allocate a ViReal64 array of this size or greater to pass as the Waveform Array parameter of the tkdpo4k_ReadWaveform and tkdpo4k_FetchWaveform functions.
        /// 
        /// Note: The oscilloscope may use records with different sizes depending on the acquisition type. You specify the acquisition type that the oscilloscope uses with the Acquisition Type parameter of the tkdpo4k_ConfigureAcquisitionType function.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ActualRecordLength(out int Actual__Record_Length)
        {
            int pInvokeResult = PInvoke.ActualRecordLength(this._handle, out Actual__Record_Length);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the current sample rate of the oscilloscope.
        /// </summary>
        /// <param name="Sample_Rate">
        /// Returns the effective sample rate of the acquired waveform using the current configuration. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SampleRate(out double Sample_Rate)
        {
            int pInvokeResult = PInvoke.SampleRate(this._handle, out Sample_Rate);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Returns the current sample mode of the oscilloscope.
        /// </summary>
        /// <param name="Sample_Mode">
        /// Returns the current sample mode of the instrument.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_REAL_TIME        (0)
        /// TKDPO4K_VAL_EQUIVALENT_TIME  (1)
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int SampleMode(out int Sample_Mode)
        {
            int pInvokeResult = PInvoke.SampleMode(this._handle, out Sample_Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables the MagniVu feature, which provides up to 32 times signal detail for fast viewing of short events. This feature is not recommended for slow data formats such as RS232.
        /// 
        /// Notes:
        /// (1) This function is valid only in MSO models.
        /// </summary>
        /// <param name="Magnivu_Enabled">
        /// Specifies whether to enable the MagniVu feature, which provides up to 32 times signal detail for fast viewing of short events. This feature is not recommended for slow data formats such as RS232.
        ///  
        /// Valid Values:
        /// VI_TRUE
        /// VI_FALSE
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMagnivuEnabled(bool Magnivu_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureMagnivuEnabled(this._handle, System.Convert.ToUInt16(Magnivu_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the fast acquisition mode.
        /// </summary>
        /// <param name="Waveform_Grading">
        /// Sets the waveform grading for fast acquisition mode. The driver uses this value to set the TKDPO4K_ATTR_FASTACQ_WAVEFORM_GRADING attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_WAVEFORM_GRADING_NORMAL   -  Normal
        /// TKDPO4K_VAL_WAVEFORM_GRADING_TEMPERATURE   -  Temperature
        /// TKDPO4K_VAL_WAVEFORM_GRADING_SPECTRAL   -  Spectral
        /// TKDPO4K_VAL_WAVEFORM_GRADING_INVERTED   -  Inverted
        /// 
        /// Default Value: TKDPO4K_VAL_WAVEFORM_GRADING_TEMPERATURE
        /// 
        /// SCPI Command:
        /// :ACQuire:FASTAcq:PALEtte
        /// </param>
        /// <param name="Fast_Acquisition_Enable">
        /// Sets the state of fast acquisition mode. The driver uses this value to set the TKDPO4K_ATTR_FASTACQ_STATE attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE 
        /// 
        /// SCPI Command:
        /// :ACQuire:FASTAcq:STATE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ConfigureFastAcquisition(int Waveform_Grading, bool Fast_Acquisition_Enable)
        {
            int pInvokeResult = PInvoke.ConfigureFastAcquisition(this._handle, Waveform_Grading, System.Convert.ToUInt16(Fast_Acquisition_Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the common attributes of the channel subsystem for a particular channel. These attributes are the vertical range, vertical offset, coupling, probe attenuation, and channel enabled.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name you want to configure.
        /// 
        /// Valid Channel Names: 
        /// For four-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// 
        /// For two-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Vertical_Range">
        /// Passes the value of the input range that the oscilloscope uses for the channel. The driver sets the TKDPO4K_ATTR_VERTICAL_RANGE attribute to this value. For example, to acquire a sine wave that spans between 0.0 and 10.0 volts, pass 10.0 as the value of this parameter.
        /// 
        /// Units: Volts
        ///      
        /// Valid Range: The probe attenuation determines the valid range for this parameter. If you pass TKDPO4K_VAL_PROBE_SENSE_ON in the Probe Attenuation parameter, you obtain the actual probe attenuation with the TKDPO4K_ATTR_PROBE_SENSE_VALUE attribute. The valid range is as follows.
        /// 
        /// (80.0e-3 * ProbeAttenuation) to (80.0 * ProbeAttenuation) volts 
        /// 
        /// Resolution: The driver coerces the value you specify to a 1-2-5 step.
        /// 
        /// Default Value: 1.0
        /// </param>
        /// <param name="Vertical_Offset">
        /// Passes the location of the center of the range that you specify with the Vertical Range parameter. Express the value relative to ground. The driver sets the TKDPO4K_ATTR_VERTICAL_OFFSET attribute to this value.
        /// 
        /// For example, to acquire a sine wave that spans between 0.0 and 10.0 volts, pass 5.0 as the value of this parameter.
        /// 
        /// Default Value: 0
        /// 
        /// Units: Volts
        /// 
        /// Valid Range: The probe attenuation and Vertical Range determine the valid range for this parameter. If you pass TKDPO4K_VAL_PROBE_SENSE_ON in the Probe Attenuation parameter, you obtain the actual probe attenuation with the TKDPO4K_ATTR_PROBE_SENSE_VALUE attribute. The valid range is as follows. The relation of vertical range and probe attenuation to offset range is shown below:
        /// 
        /// Range and Resolution:
        /// 
        /// Vertical_Scale = (Vertical_Range / 10.0) / Probe_Attenuation
        /// 
        /// When (1e-3 &lt;= Vertical_Scale &lt;= 9.95e-3): 
        ///   Valid Range = -0.1 to 0.1
        ///   Resolution = 1.0e-5
        /// 
        /// When (9.95e-3 &lt;= Vertical_Scale &lt;= 99.5e-3): 
        ///   Valid Range = -1.0 to 1.0
        ///   Resolution = 1.0e-4
        /// 
        /// When (99.5e-3 &lt;= Vertical_Scale &lt;= 995.0e-3): 
        ///   Valid Range = -10.0 to 10.0
        ///   Resolution = 1.0e-3
        /// 
        /// When (995.0e-3 &lt;= Vertical_Scale &lt;= 10.0): 
        ///   Valid Range = -100.0 to 100.0
        ///   Resolution = 1.0e-2
        /// 
        /// 
        /// </param>
        /// <param name="Vertical_Coupling">
        /// Specifies how you want the oscilloscope to couple the input signal for the channel. The driver sets the TKDPO4K_ATTR_VERTICAL_COUPLING attribute to this value.
        /// 
        /// Valid Values:
        ///   TKDPO4K_VAL_AC    (0) - AC Coupling
        ///   TKDPO4K_VAL_DC    (1) - DC Coupling
        ///   TKDPO4K_VAL_GND   (2) - Ground Coupling
        ///   TKDPO4K_VAL_DCREJ (3) - DCREJect Coupling
        /// Default Value: TKDPO4K_VAL_DC
        /// </param>
        /// <param name="Probe_Attenuation">
        /// Passes the scaling factor by which the probe you attach to the channel attenuates the input. For example, when you use a 10:1 probe, set this parameter to 10.0. The driver sets the TKDPO4K_ATTR_PROBE_ATTENUATION attribute to this value.
        /// 
        /// This driver reserves negative values to control the automatic probe sense capability of the oscilloscope. Setting this parameter to TKDPO4K_VAL_PROBE_SENSE_ON configures the oscilloscope to sense the attenuation of the probe automatically.  
        /// 
        /// Valid Values:
        /// 
        ///  0.001  - Sets the manual probe attenuation
        ///  1.0    - Sets the manual probe attenuation                           
        ///  10.0   _ Sets the manual probe attenuation                          
        ///  100.0  _ Sets the manual probe attenuation 
        ///  1000.0 _ Sets the manual probe attenuation 
        /// 
        ///  TKDPO4K_VAL_PROBE_SENSE_ON (-1) - Enables the automatic probe sense capability of the oscilloscope.
        /// 
        /// Default Value: 1.0
        /// 
        /// Notes:
        /// 
        /// (1) If the oscilloscope is set to sense the probe attenuation automatically, setting this parameter to a positive value disables the automatic probe sense and configures the oscilloscope to use the manual probe attenuation you specify.
        /// 
        /// (2) If you use a manual probe attenuation, you must set the probe attenuation to reflect the new probe attenuation each time you attach a different probe.
        /// 
        /// (3) Use the tkdpo4k_AutoProbeSenseValue function to obtain the actual probe attenuation while the automatic probe sense capability is enabled.
        /// 
        /// (4) If you set the oscilloscope to sense the probe attenuation automatically, the probe attenuation value can change at any time. When the oscilloscope detects a new probe attenuation value, other settings in the oscilloscope might also change. The driver has no way of knowing when these changes occur. Therefore, when you enable the automatic probe sense capability, this driver disables caching for attributes that depend on the probe attenuation. These attributes include TKDPO4K_ATTR_VERTICAL_RANGE, TKDPO4K_ATTR_VERTICAL_OFFSET, and all the attributes that configure trigger levels. To maximize performance, set this parameter to a manual probe attenuation setting.
        /// </param>
        /// <param name="Channel_Enabled">
        /// Specifies whether you want the oscilloscope to acquire a waveform for the channel when you call the tkdpo4k_InitiateAcquisition, tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform, or tkdpo4k_ReadWaveformMeasurement function. The driver sets the TKDPO4K_ATTR_CHANNEL_ENABLED attribute to this value. 
        ///  
        /// Valid Values:
        /// VI_TRUE
        /// VI_FALSE
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureChannel(string Channel_Name, double Vertical_Range, double Vertical_Offset, int Vertical_Coupling, double Probe_Attenuation, bool Channel_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureChannel(this._handle, Channel_Name, Vertical_Range, Vertical_Offset, Vertical_Coupling, Probe_Attenuation, System.Convert.ToUInt16(Channel_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attributes that control the electrical characteristics of the channel. These attributes are the input impedance and the maximum input frequency.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name that you want to configure.
        /// 
        /// Valid Channel Names:
        /// For four-channel models: 
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// 
        /// For two-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// 
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Input_Impedance__ohms_">
        /// Passes the input impedance that you want to use for the channel.  The driver sets the TKDPO4K_ATTR_INPUT_IMPEDANCE attribute to this value.
        /// 
        /// Units: ohms.
        /// 
        /// Valid Values:
        ///   For DPO/MSO4K models:
        ///     50.0 ohms
        ///     1.0e+06 ohms
        /// 
        ///   For DPO3K models:
        ///     50.0 ohms
        ///     75.0 ohms
        ///     1.0e+06 ohms
        /// 
        /// </param>
        /// <param name="Maximum_Input_Frequency__hertz_">
        /// Passes the maximum input frequency that you want to use for the channel. Express this value as the frequency at which the input circuitry attenuates the input signal by 3 dB. The driver sets the TKDPO4K_ATTR_MAX_INPUT_FREQUENCY attribute to this value.  
        /// 
        /// Units: Hertz
        /// 
        /// Valid Values depend on instrument models:
        /// ---------------------------------------------------------------
        ///  Model                 |    Twenty      TwoFifty      Full
        /// ---------------------------------------------------------------
        ///  DPO 4104, MSO4104     |    20e6        250e6         1000e6
        ///  DPO 4054, MSO4054     |    20e6        250e6         500e6
        ///  DPO 4034, MSO4034     |    20e6        250e6         350e6
        ///  DPO 4032, MSO4032     |    20e6        250e6         350e6
        /// ----------------------------------------------------------------
        /// 
        /// ---------------------------------------------------------------
        ///  Model                 |    Twenty      OneFifty      Full
        /// ---------------------------------------------------------------
        ///  DPO 3032, DPO3034     |    20e6        150e6         300e6
        ///  DPO 3052, DPO3054     |    20e6        150e6         500e6
        /// ----------------------------------------------------------------
        /// 
        /// ---------------------------------------------------------------
        ///  Model                 |    Twenty      Full
        /// ---------------------------------------------------------------
        ///  DPO 3012, DPO3014     |    20e6        100e6
        /// ----------------------------------------------------------------
        /// 
        /// Default Value: depend on instrument model
        /// -------------------------------
        ///  Model     |   Default value
        /// -------------------------------
        ///  DPO 4104  |   1000e6
        ///  DPO 4054  |   500e6
        ///  DPO 4034  |   350e6
        ///  DPO 4032  |   350e6
        ///  DPO 3012  |   100e6
        ///  DPO 3014  |   100e6
        ///  DPO 3032  |   300e6
        ///  DPO 3034  |   300e6
        ///  DPO 3052  |   500e6
        ///  DPO 3054  |   500e6
        /// -------------------------------
        /// 
        /// Resolution: All values are coerced to Valid values.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureChanCharacteristics(string Channel_Name, double Input_Impedance__ohms_, double Maximum_Input_Frequency__hertz_)
        {
            int pInvokeResult = PInvoke.ConfigureChanCharacteristics(this._handle, Channel_Name, Input_Impedance__ohms_, Maximum_Input_Frequency__hertz_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// The function returns the probe attenuation value the oscilloscope senses. You enable the automatic probe sense capability by setting the Probe Attenuation parameter of the tkdpo4k_ConfigureChannel function to TKDPO4K_VAL_PROBE_SENSE_ON.  
        /// 
        /// Note: If you disable the automatic probe sense capability, this function returns the manual probe attenuation setting.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name for which you want to query the probe sense value.
        /// 
        /// Valid Channel Names: 
        /// For four-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// 
        /// For two-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Auto_Probe_Sense_Value">
        /// Returns the probe attenuation value that the oscilloscope senses. The driver returns the value of the TKDPO4K_ATTR_PROBE_SENSE_VALUE attribute.
        /// 
        /// Note: If you disable the automatic probe sense capability, this parameter returns the manual probe attenuation setting.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int AutoProbeSenseValue(string Channel_Name, out double Auto_Probe_Sense_Value)
        {
            int pInvokeResult = PInvoke.AutoProbeSenseValue(this._handle, Channel_Name, out Auto_Probe_Sense_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the status and threshold of digital channels.
        /// 
        /// Notes:
        /// (1) This function is valid only in MSO models.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the digital channel name.
        /// 
        /// Valid Channel Names: 
        ///     TKDPO4K_VAL_D_0 ("D0")   - Digital Channel 0 
        ///     TKDPO4K_VAL_D_1 ("D1")   - Digital Channel 1
        ///     TKDPO4K_VAL_D_2 ("D2")   - Digital Channel 2
        ///     TKDPO4K_VAL_D_3 ("D3")   - Digital Channel 3
        ///     TKDPO4K_VAL_D_4 ("D4")   - Digital Channel 4
        ///     TKDPO4K_VAL_D_5 ("D5")   - Digital Channel 5
        ///     TKDPO4K_VAL_D_6 ("D6")   - Digital Channel 6
        ///     TKDPO4K_VAL_D_7 ("D7")   - Digital Channel 7
        ///     TKDPO4K_VAL_D_8 ("D8")   - Digital Channel 8
        ///     TKDPO4K_VAL_D_9 ("D9")   - Digital Channel 9
        ///     TKDPO4K_VAL_D_10("D10")  - Digital Channel 10
        ///     TKDPO4K_VAL_D_11("D11")  - Digital Channel 11
        ///     TKDPO4K_VAL_D_12("D12")  - Digital Channel 12
        ///     TKDPO4K_VAL_D_13("D13")  - Digital Channel 13
        ///     TKDPO4K_VAL_D_14("D14")  - Digital Channel 14
        ///     TKDPO4K_VAL_D_15("D15")  - Digital Channel 15
        /// 
        /// Default Value: TKDPO4K_VAL_D_0
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Threshold">
        /// Passes the threshold for the specific digital channel.
        /// 
        /// Units: Volts
        ///      
        /// Valid Range: -2 to 5
        /// 
        /// Default Value: 1.4
        /// </param>
        /// <param name="Channel_Enabled">
        /// Specifies whether you want to turn on the display of the digital channel and resets the acquisition. The driver sets the TKDPO4K_ATTR_CHANNEL_ENABLED attribute to this value. 
        ///  
        /// Valid Values:
        /// VI_TRUE
        /// VI_FALSE
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureDigitalChannel(string Channel_Name, double Threshold, bool Channel_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalChannel(this._handle, Channel_Name, Threshold, System.Convert.ToUInt16(Channel_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures the bus thresholds settings. 
        /// 
        /// Note:
        /// This function only applies to DPO/MSO 4kB models.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name that you want to configure.
        /// 
        /// Valid Channel Names:
        /// 
        /// TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        /// TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        /// TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// TKDPO4K_VAL_MATH ("MATH")  - MATH
        /// TKDPO4K_VAL_CH_1 ("REF1")  - Reference 1 
        /// TKDPO4K_VAL_CH_2 ("REF2")  - Reference 2
        /// TKDPO4K_VAL_CH_3 ("REF3")  - Reference 3
        /// TKDPO4K_VAL_CH_4 ("REF4")  - Reference 4
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Upper_Threshold">
        /// Sets the upper threshold.
        /// 
        /// Units: V
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Lower_Threshold">
        /// Sets the lower threshold. 
        /// 
        /// Units: V
        /// 
        /// Default Value: 0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureBusThreshold(string Channel_Name, double Upper_Threshold, double Lower_Threshold)
        {
            int pInvokeResult = PInvoke.ConfigureBusThreshold(this._handle, Channel_Name, Upper_Threshold, Lower_Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the common attributes of the trigger subsystem. These attributes are the trigger type and holdoff.
        /// 
        /// When you call tkdpo4k_ReadWaveform, tkdpo4k_ReadWaveformMeasurement, tkdpo4k_ReadMinMaxWaveform, or tkdpo4k_InitiateAcquisition, the oscilloscope waits for a trigger. You specify the type of trigger for which the oscilloscope waits with the Trigger Type parameter.  
        /// 
        /// If the oscilloscope requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the Holdoff parameter to elapse since the previous trigger. The oscilloscope then waits for the next trigger. Once the oscilloscope acquires a complete waveform, it returns to the Idle state.
        /// 
        /// Note: After you call this function, you must call the trigger configuration function that corresponds to the Trigger Type you select to completely specify the trigger. For example, if you set the Trigger Type to TKDPO4K_VAL_EDGE_TRIGGER, you use the tkdpo4k_ConfigureEdgeTriggerSource function to completely specify the trigger.
        /// </summary>
        /// <param name="Trigger_Type">
        /// Passes the type of trigger that you want the oscilloscope to use. The driver sets the TKDPO4K_ATTR_TRIGGER_TYPE attribute to this value.  
        /// 
        /// Defined Values:
        /// 
        /// - TKDPO4K_VAL_EDGE_TRIGGER (1) - Configures the oscilloscope
        ///   for edge triggering. An edge trigger occurs when the trigger
        ///   signal crosses the trigger level you specify with the slope
        ///   you specify. You configure the trigger level and slope with
        ///   the tkdpo4k_ConfigureEdgeTriggerSource function.
        /// 
        /// - TKDPO4K_VAL_AC_LINE_TRIGGER (7) - Configures the oscilloscope
        ///   for AC Line triggering. You configure the AC line trigger
        ///   slope with the tkdpo4k_ConfigureAcLineTriggerSlope function.
        /// 
        /// - TKDPO4K_VAL_TV_TRIGGER (5) - Configures the oscilloscope for
        ///   TV triggering. You configure the TV signal type, the field
        ///   and line on which to trigger, and the signal polarity with the
        ///   tkdpo4k_ConfigureTVTriggerSource function.
        /// 
        /// - TKDPO4K_VAL_RUNT_TRIGGER (3) - Configures the oscilloscope 
        ///   for runt triggering. A runt trigger occurs when the trigger
        ///   signal crosses one of the runt thresholds twice without
        ///   crossing the other runt threshold. You configure the runt
        ///   thresholds and the polarity of the runt with the
        ///   tkdpo4k_ConfigureRuntTriggerSource function.
        /// 
        /// - TKDPO4K_VAL_GLITCH_TRIGGER (4) - Configures the oscilloscope
        ///   for glitch triggering. A glitch trigger occurs when the
        ///   trigger signal has a pulse with a width that is less than the
        ///   glitch width. The trigger does not actually occur until the
        ///   edge of the pulse that corresponds to the glitch width and 
        ///   polarity you specify crosses the trigger level. You configure
        ///   the glitch width, the polarity of the pulse, and the trigger
        ///   level with the tkdpo4k_ConfigureGlitchTriggerSource
        ///   function.
        /// 
        /// - TKDPO4K_VAL_TRANSITION_TRIGGER (1001) - Configures the
        ///   oscilloscope for transition triggering. The oscilloscope
        ///   triggers on a pulse edge that has a slew rate faster or slower
        ///   than the rate you specify. Transition triggering is often 
        ///   used to check the large signal response of amplifiers. Use 
        ///   the tkdpo4k_ConfigureTransitTriggerSource function to 
        ///   configure these parameters.
        /// 
        /// - TKDPO4K_VAL_PATTERN_TRIGGER (1002) - Configures the
        ///   oscilloscope for pattern triggering. When using pattern
        ///   triggering, the oscilloscope checks that the logic conditions
        ///   you specify on the input channels CH1, CH2, (CH3 and CH4) for
        ///   four-channel scope) are met. You specify the logic level
        ///   expected on each channel, the logic function, and the function
        ///   result on which the oscilloscope triggers (True or False). Use
        ///   the tkdpo4k_ConfigurePatternTrigger function to configure 
        ///   these parameters.
        ///   
        /// - TKDPO4K_VAL_STATE_TRIGGER (1003) - Configures the
        ///   oscilloscope for state triggering. When using state
        ///   triggering, the oscilloscope checks that the logic conditions
        ///   you specify on the input channels (CH1-CH3) are met at the
        ///   time the clock edge occurs on the state clock source (CH4).
        ///   You specify the clock slope, the threshold level, the logic
        ///   level for each of the input channels, the logic function to
        ///   apply to the input channels, and the function result on which
        ///   the oscilloscope triggers (True or False). Use the
        ///   tkdpo4k_ConfigureStateTrigger function to configure these
        ///   parameters.
        /// 
        /// - TKDPO4K_VAL_SETHOLD_TRIGGER (1004) - Configures the 
        ///   oscilloscope for sethold triggering. When using sethold 
        ///   triggering, the oscilloscope checks data set time and hold 
        ///   time violation. You specify the clock source, data source, 
        ///   clock slope, set time, hold time to apply to the input 
        ///   channels. Use the tkdpo4k_ConfigureSetholdTriggerSource 
        ///   function to configure these parameters.
        /// 
        /// - TKDPO4K_VAL_CAN_TRIGGER (1005) - Configures the oscilloscope 
        ///   for CAN triggering. The CAN trigger occurs when trigger signal 
        ///   meets pre-set CAN bus condition. You specify CAN parameters
        ///   through tkdpo4k_ConfigureCAN function. You specify CAN trigger
        ///   parameters through CAN trigger class functions in the serial
        ///   trigger group.
        ///   
        /// - TKDPO4K_VAL_I2C_TRIGGER (1006) - Configures the oscilloscope 
        ///   for I2C triggering. The I2C trigger occurs when trigger signal 
        ///   meets pre-set I2C bus condition. You specify I2C parameters 
        ///   through the tkdpo4k_ConfigureI2C function. You specify I2C
        ///   trigger parameters through I2C trigger class functions in the
        ///   serial trigger group.
        /// 
        /// - TKDPO4K_VAL_SPI_TRIGGER (1007) - Configures the oscilloscope 
        ///   for SPI triggering. The SPI trigger occurs when the trigger
        ///   signal meets pre-set SPI bus condition. You specify SPI
        ///   parameters through tkdpo4k_ConfigureSPI function. You specify
        ///   SPI trigger parameters through SPI trigger class functions in
        ///   the serial trigger group.
        /// 
        /// - TKDPO4K_VAL_RS232_TRIGGER (1011) - Configures the oscilloscope 
        ///   for RS232 triggering.
        /// 
        /// - TKDPO4K_VAL_PARALLEL_TRIGGER (1012) - Configures the
        ///   oscilloscope for Parallel triggering.
        /// 
        /// Note: This parameter configures the type of trigger that the oscilloscope uses. After you call this function, you must call the appropriate trigger configuration function to specify the trigger completely.
        /// 
        /// TKDPO4K_VAL_PARALLEL_TRIGGER is valid only in MSO4K models.
        /// </param>
        /// <param name="Trigger_Holdoff__sec_">
        /// Passes the length of time that you want the oscilloscope to wait after it detects a trigger until the oscilloscope enables the trigger subsystem to detect another trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_HOLDOFF attribute to this value.
        /// 
        /// This parameter affects instrument operation only when the oscilloscope requires multiple acquisitions to build a complete waveform. The oscilloscope requires multiple waveform acquisitions when it uses equivalent-time sampling or when you set the acquisition type to envelope or average.
        /// 
        /// Units: seconds
        /// 
        /// Valid Range: 20.0e-9 to 8.0 seconds. 
        /// 
        /// Resolution: Varies - Coercible Only By Instrument.
        /// 
        /// Default Value: 20.0e-9 seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTrigger(int Trigger_Type, double Trigger_Holdoff__sec_)
        {
            int pInvokeResult = PInvoke.ConfigureTrigger(this._handle, Trigger_Type, Trigger_Holdoff__sec_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger coupling on the instrument.
        /// </summary>
        /// <param name="Trigger_Coupling">
        /// Specifies how the oscilloscope couples the trigger source. This control affects instrument behavior only when you configure trigger type to edge trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_COUPLING attribute to this value.
        /// 
        /// Valid Values:
        ///   TKDPO4K_VAL_DC (1) -           The oscilloscope DC couples the  
        ///                                  trigger signal.
        ///   TKDPO4K_VAL_AC (0) -           The oscilloscope AC couples the 
        ///                                  trigger signal.
        ///   TKDPO4K_VAL_HF_REJECT (3) -    The oscilloscope removes the 
        ///                                  high frequency components of 
        ///                                  the DC signal.  
        ///   TKDPO4K_VAL_LF_REJECT (4) -    The oscilloscope removes the 
        ///                                  low frequency components of the 
        ///                                  AC signal. 
        ///   TKDPO4K_VAL_NOISE_REJECT (5) - The oscilloscope selects DC low 
        ///                                  sensitivity. It requires added 
        ///                                  signal amplitude for more 
        ///                                  stable, less false triggering.
        /// 
        /// Default Value: TKDPO4K_VAL_DC
        /// 
        /// Notes: 
        /// (1) TKDPO4K_VAL_AC is valid only in DPO3K models.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerCoupling(int Trigger_Coupling)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerCoupling(this._handle, Trigger_Coupling);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the trigger level for a specified channel. The instrument can have different trigger levels for each channel (CH1~CH4 for four-channel modules, and CH1~CH2 for two-channel modules, and D0~D15 are also valid for MSO/MDO models). The oscilloscope uses the trigger level of the channel specified as trigger source.
        /// 
        /// For example, if you specify channel 1 as the trigger source, and the trigger level for channel 1 is 2 volts, the voltage threshold for trigger is 2 volts.
        /// 
        /// 
        /// Note:
        /// 
        /// ECL sets the threshold level to a preset ECL high level of -1.3V.
        /// TTL sets the threshold level to a preset TTL high level of 1.4V.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name that you want to configure.
        /// 
        /// Valid Channel Names: 
        /// For four-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// 
        /// For two-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// 
        /// For MSO models:
        ///     TKDPO4K_VAL_D_0  ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1  ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2  ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3  ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4  ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5  ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6  ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7  ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8  ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9  ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10 ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11 ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12 ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13 ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14 ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15 ("D15")   - Digital Channel 15
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Level">
        /// Passes the voltage threshold of a specified channel for the trigger subsystem. This control affects instrument behavior only when you set the trigger type to edge trigger or glitch trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_LEVEL_BY_CH attribute to this value.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal   
        ///   reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value:
        ///   0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerLevel(string Channel_Name, double Level)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerLevel(this._handle, Channel_Name, Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the oscilloscope trigger modifier.
        /// </summary>
        /// <param name="Trigger_Modifier">
        /// Specifies the method that the oscilloscope uses in the absence of trigger conditions. The driver sets the TKDPO4K_ATTR_TRIGGER_MODIFIER attribute to this value.
        /// 
        /// Valid Values:
        ///   TKDPO4K_VAL_NO_TRIGGER_MOD (1) - No Modifier
        ///   TKDPO4K_VAL_AUTO (2)           - Auto 
        /// 
        /// Default Value:
        ///   TKDPO4K_VAL_NO_TRIGGER_MOD
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerModifier(int Trigger_Modifier)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerModifier(this._handle, Trigger_Modifier);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the threshold voltage level when triggering on the auxiliary input waveform.
        /// 
        /// Note:
        /// 
        /// This function is not available for MDO Series oscilloscope models.
        /// </summary>
        /// <param name="Trigger_Level">
        /// Configures the threshold voltage level when triggering on the auxiliary input waveform.The driver uses this value to set the TKDPO4K_ATTR_TRIGGER_LEVEL_ON_AUXIN attribute.
        /// 
        /// Default Value: 0
        /// 
        /// SCPI Command:
        /// :TRIGger:A:LEVel:AUXin
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ConfigureAuxInTriggerLevel(double Trigger_Level)
        {
            int pInvokeResult = PInvoke.ConfigureAuxInTriggerLevel(this._handle, Trigger_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the edge trigger. An edge trigger occurs when the trigger signal passes through the voltage threshold that you specify with the Trigger Level parameter and has the slope that you specify with the Trigger Slope parameter.  
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_EDGE_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Trigger_Source">
        /// Passes the source that you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// After you call one of the tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_ReadWaveformMeasurement, or tkdpo4k_InitiateAcquisition functions, the oscilloscope waits for the trigger you specify in this parameter. After it receives the trigger, the oscilloscope waits the length of time you specify in the Trigger Delay parameter. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        /// 
        /// For MSO models:
        ///   - TKDPO4K_VAL_D_0          ("D0")  - Digital Channel 0
        ///   - TKDPO4K_VAL_D_1          ("D1")  - Digital Channel 1
        ///   - TKDPO4K_VAL_D_2          ("D2")  - Digital Channel 2
        ///   - TKDPO4K_VAL_D_3          ("D3")  - Digital Channel 3
        ///   - TKDPO4K_VAL_D_4          ("D4")  - Digital Channel 4
        ///   - TKDPO4K_VAL_D_5          ("D5")  - Digital Channel 5
        ///   - TKDPO4K_VAL_D_6          ("D6")  - Digital Channel 6
        ///   - TKDPO4K_VAL_D_7          ("D7")  - Digital Channel 7
        ///   - TKDPO4K_VAL_D_8          ("D8")  - Digital Channel 8
        ///   - TKDPO4K_VAL_D_9          ("D9")  - Digital Channel 9
        ///   - TKDPO4K_VAL_D_10         ("D10") - Digital Channel 10
        ///   - TKDPO4K_VAL_D_11         ("D11") - Digital Channel 11
        ///   - TKDPO4K_VAL_D_12         ("D12") - Digital Channel 12
        ///   - TKDPO4K_VAL_D_13         ("D13") - Digital Channel 13
        ///   - TKDPO4K_VAL_D_14         ("D14") - Digital Channel 14
        ///   - TKDPO4K_VAL_D_15         ("D15") - Digital Channel 15
        /// 
        ///   - TKDPO4K_VAL_EXTERNAL     ("VAL_EXTERNAL") - External
        /// 
        /// For MSO models:
        ///   - TKDPO4K_VAL_RF_CHANNEL   ("RF") - RF Channel
        /// 
        /// Note:
        /// 
        /// TKDPO4K_VAL_EXTERNAL - The oscilloscope waits for a trigger on the external trigger input.
        /// </param>
        /// <param name="Trigger_Level__volts_">
        /// Passes the voltage threshold that you want the oscilloscope to use for edge triggering. The driver sets the TKDPO4K_ATTR_TRIGGER_LEVEL attribute to this value.
        /// 
        /// The oscilloscope triggers when the trigger signal passes through the threshold that you specify with this parameter and that it has the slope you specify with the Trigger Slope parameter.
        /// 
        /// Units: volts
        ///     
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal   
        ///   reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value:
        ///   0.0
        /// 
        /// Note: This parameter only affects instrument behavior when you select a channel or the external trigger input as the Trigger Source. You cannot configure the trigger level that the oscilloscope uses for other trigger sources.
        /// </param>
        /// <param name="Trigger_Slope">
        /// Specifies whether you want a rising edge or a falling edge passing through the Trigger Level to trigger the oscilloscope.  The driver sets the TKDPO4K_ATTR_TRIGGER_SLOPE attribute to this value.
        /// 
        /// Defined Values:
        ///   TKDPO4K_VAL_POSITIVE (1) - Rising edge
        ///   TKDPO4K_VAL_NEGATIVE (0) - Falling edge
        ///   TKDPO4K_VAL_EITHER (2)   - Either rising or falling edge
        /// 
        /// Default Value: TKDPO4K_VAL_POSITIVE
        /// 
        /// Note: 
        /// The TKDPO4K_VAL_EITHER is available for MDO3000 series models only.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureEdgeTriggerSource(string Trigger_Source, double Trigger_Level__volts_, int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureEdgeTriggerSource(this._handle, Trigger_Source, Trigger_Level__volts_, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the oscilloscope for AC Line triggering.
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_AC_LINE_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="AC_Line_Slope">
        /// Specifies whether a detection of a zero crossing appears on the positive, negative, or either slope of the network supply voltage. The driver sets the TKDPO4K_ATTR_AC_LINE_TRIGGER_SLOPE attribute to this value.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_AC_LINE_POSITIVE - The oscilloscope triggers on a positive slope.
        /// 
        /// - TKDPO4K_VAL_AC_LINE_NEGATIVE - The oscilloscope triggers on a negative slope.
        /// 
        /// - TKDPO4K_VAL_AC_LINE_EITHER - The oscilloscope triggers on either the rising or falling edge.
        /// 
        /// Default Value: TKDPO4K_VAL_AC_LINE_POSITIVE
        /// 
        /// Note:
        /// The TKDPO4K_VAL_AC_LINE_EITHER is available for MDO3000 series models only.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureAcLineTriggerSlope(int AC_Line_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureAcLineTriggerSlope(this._handle, AC_Line_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the delay edge trigger. An delay edge trigger occurs after the main trigger event, when the trigger signal passes through the voltage threshold that you specify with the Trigger Level parameter and has the slope that you specify with the Trigger Slope parameter.
        /// Requires the Trigger Type to be EDGE.
        /// </summary>
        /// <param name="Source">
        /// Passes the source that you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// After you call one of the tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_ReadWaveformMeasurement, or tkdpo4k_InitiateAcquisition functions, the oscilloscope waits for the trigger you specify in this parameter. After it receives the trigger, the oscilloscope waits for the length of time you specify in the Trigger Delay parameter. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        ///   - TKDPO4K_VAL_EXTERNAL     ("VAL_EXTERNAL") - External
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_EXTERNAL     ("VAL_EXTERNAL") - External
        /// 
        /// For MDO models:
        ///   - TKDPO4K_VAL_RF_CHANNEL   ("RF") - RF Channel
        /// 
        /// Note:
        /// 
        /// TKDPO4K_VAL_EXTERNAL - The oscilloscope waits for a trigger on the external trigger input.
        /// </param>
        /// <param name="Trigger_Coupling">
        /// Specifies how the oscilloscope couples the trigger source. This control affects instrument behavior only when you configure the trigger type to edge trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_COUPLING attribute to this value.
        /// 
        /// Valid Values:
        ///   TKDPO4K_VAL_DC (1) -           The oscilloscope DC couples the  
        ///                                  trigger signal.
        ///   TKDPO4K_VAL_AC (0) -           The oscilloscope AC couples the 
        ///                                  trigger signal.
        ///   TKDPO4K_VAL_HF_REJECT (3) -    The oscilloscope removes the 
        ///                                  high frequency components of 
        ///                                  the DC signal.  
        ///   TKDPO4K_VAL_LF_REJECT (4) -    The oscilloscope removes the 
        ///                                  low frequency components of the 
        ///                                  AC signal. 
        ///   TKDPO4K_VAL_NOISE_REJECT (5) - The oscilloscope selects DC low 
        ///                                  sensitivity. It requires added 
        ///                                  signal amplitude for more 
        ///                                  stable, less false triggering.
        /// 
        /// Default Value: TKDPO4K_VAL_DC
        /// 
        /// Notes:
        /// (1) TKDPO4K_VAL_AC is valid only in DPO3K models.
        /// </param>
        /// <param name="Level">
        /// Passes the voltage threshold that you want the oscilloscope to use for delay triggering.  The driver sets the TKDPO4K_ATTR_DELAY_TRIGGER_LEVEL attribute to this value.
        /// 
        /// The oscilloscope triggers when the trigger signal passes through the threshold that you specify with this parameter and that it has the slope you specify with the Trigger Slope parameter.
        /// 
        /// Units: volts
        ///     
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal   
        ///   reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value:
        ///   0.0
        /// 
        /// Note: This parameter only affects instrument behavior when you select a channel or the external trigger input as the Trigger Source. You cannot configure the trigger level that the oscilloscope uses for other trigger sources.  
        /// </param>
        /// <param name="Trigger_Slope">
        /// Specifies whether you want a rising edge or a falling edge passing through the Trigger Level to trigger the oscilloscope.  The driver sets the TKDPO4K_ATTR_DELAY_TRIGGER_SLOPE attribute to this value.
        /// 
        /// Defined Values:
        ///   TKDPO4K_VAL_POSITIVE (1) - Rising edge
        ///   TKDPO4K_VAL_NEGATIVE (0) - Falling edge
        /// 
        /// Default Value: TKDPO4K_VAL_POSITIVE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureDelayTriggerSource(string Source, int Trigger_Coupling, double Level, int Trigger_Slope)
        {
            int pInvokeResult = PInvoke.ConfigureDelayTriggerSource(this._handle, Source, Trigger_Coupling, Level, Trigger_Slope);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures how the delay edge trigger waits for the trigger event.
        /// 
        /// If you specify the oscilloscope to trigger after time, after receiving the main trigger, the oscilloscope waits the length of time you specify with the TKDPO4K_ATTR_ACQUISITION_START_TIME attribute before it starts looking for a trigger from the delay trigger source. You set the TKDPO4K_ATTR_ACQUISITION_START_TIME attribute by calling the tkdpo4k_ConfigureDelayTriggerTime function.
        /// 
        /// If you specify the oscilloscope to trigger after events, after receiving the main trigger, the oscilloscope waits the number of trigger events you specify with the TKDPO4K_ATTR_DALEY_TRIGGER_EVENTS attribute before it starts acquiring data. You set the TKEPO4K_ATTR_DELAY_TRIGGER_EVENTS attribute by calling the tkdpo4k_ConfigureDelayTriggerEvents function.
        /// 
        /// You should call tkdpo4k_ConfigureDelayTriggerTime or tkdpo4k_ConfigureDelayTriggerEvents function before using this function to specify the trigger mode.
        /// </summary>
        /// <param name="Mode">
        /// Passes the delay trigger mode for the instrument. The driver sets the TKDPO4K_ATTR_DELAY_TRIGGER_MODE attribute to this value.  
        /// 
        /// Valid Values:
        ///   TKDPO4K_VAL_TRIG_AFTER_TIME (1)   - Delay trigger by time.
        /// 
        ///   TKDPO4K_VAL_TRIG_AFTER_EVENTS (2) - Delay trigger by events.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureDelayTriggerMode(int Mode)
        {
            int pInvokeResult = PInvoke.ConfigureDelayTriggerMode(this._handle, Mode);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the number of main trigger events that occur after the main trigger and before the oscilloscope looks for the delay trigger event when you specify the delay trigger mode to Trigger After Events.
        /// </summary>
        /// <param name="Events">
        /// Selects the number of main trigger events that occur after the main trigger and before the oscilloscope looks for the delay trigger event. The driver sets the TKDPO4K_ATTR_DELAY_TRIGGER_EVENTS attribute to this value. 
        /// 
        /// Valid Range: 1 ~ 9999999
        /// 
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureDelayTriggerEvents(int Events)
        {
            int pInvokeResult = PInvoke.ConfigureDelayTriggerEvents(this._handle, Events);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the time period delayed after the main
        /// trigger and before the oscilloscope looks the delay trigger event when you specify the delay trigger mode to Trigger After Time.
        /// </summary>
        /// <param name="Time">
        /// Sets the time period delayed after the main trigger and before the oscilloscope looks for the delay trigger event. The driver sets the TKDPO4K_ATTR_DELAY_TRIGGER_TIME attribute to this value. 
        /// 
        /// Valid Range: 4.0e-9 ~ 8.0 seconds
        /// 
        /// Resolution: 0.8e-9 seconds
        /// 
        /// Default Value: 4.0e-9 seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureDelayTriggerTime(double Time)
        {
            int pInvokeResult = PInvoke.ConfigureDelayTriggerTime(this._handle, Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the TV trigger. You configure the TV trigger source, signal format, the event on which to trigger, and the signal polarity.
        /// 
        /// Notes: 
        /// 1.This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TV_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// 
        /// 2.HD480P60|HD576P50|HD720P30|HD720P50|HD720P60|HD875I60|HD1080P24|HD1080SF24|HD1080I50|HD1080I60|HD1080P25|HD1080P30|HD1080P50|HD1080P60 set the oscilloscope to trigger on an HDTV videosignal that meets standards defined in the following table. Requires installation of a DPO4VID application module.
        /// 
        /// </summary>
        /// <param name="Trigger_Source">
        /// Passes the source that you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        /// </param>
        /// <param name="TV_Trigger_Signal_Format">
        /// Specifies the type of TV signal on which the oscilloscope triggers. The driver sets the TKDPO4K_ATTR_TV_TRIGGER_SIGNAL_FORMAT attribute to this value. 
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_NTSC (1)       - Standard signal format
        /// 
        ///   - TKDPO4K_VAL_PAL (2)        - Standard signal format
        /// 
        ///   - TKDPO4K_VAL_SECAM (3)      - Standard signal format
        /// 
        ///   - TKDPO4K_VAL_HDTV (1002)    - Application module specific 
        ///                                  signal format
        /// 
        ///   - TKDPO4K_VAL_BILEVELCUSTOM (1003) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_TRILEVELCUSTOM (1004) - Application module
        ///                                  specific signal format
        ///   - TKDPO4K_VAL_HD480P60 (1005) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD576P50 (1006) - Application module
        ///                                  specific signal format  
        /// 
        ///   - TKDPO4K_VAL_HD720P30 (1007) - Application module
        ///                                  specific signal format 
        /// 
        ///   - TKDPO4K_VAL_HD720P50 (1008) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD720P60 (1009) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD875I60 (1010) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080P24 (1011) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080SF24 (1012) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080I50 (1013) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080I60 (1014) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080P25 (1015) - Application module
        ///                                  specific signal format
        /// 
        ///   - TKDPO4K_VAL_HD1080P30 (1016) - Application module
        ///                                  specific signal format 
        /// 
        ///   - TKDPO4K_VAL_HD1080P50 (1017) - Application module
        ///                                  specific signal format  
        /// 
        ///   - TKDPO4K_VAL_HD1080P60 (1018) - Application module
        ///                                  specific signal format            
        /// 
        /// Default Value: TKDPO4K_VAL_NTSC
        /// 
        /// Notes:
        /// (1) This command requires a DPO4VID application module to use any argument besides NTSC, PAL, or SECAM.
        /// 
        /// (2) TKDPO4K_VAL_HDTV is valid only in DPO3K models.
        /// </param>
        /// <param name="TV_Event">
        /// Specifies the event on which the oscilloscope triggers. The driver set the TKDPO4K_ATTR_TV_TRIGGER_EVENT attribute to this value. 
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_TV_EVENT_FIELD1 (1)      - The oscilloscope 
        ///     triggers on field 1 of the video signal.
        ///   
        ///   - TKDPO4K_VAL_TV_EVENT_FIELD2 (2)      - The oscilloscope 
        ///     triggers on field 2 of the video signal.
        ///   
        ///   - TKDPO4K_VAL_TV_EVENT_ANY_FIELD (3)   - The oscilloscope 
        ///     triggers on any field.
        /// 
        ///   - TKDPO4K_VAL_TV_EVENT_ANY_LINE (4)    - The oscilloscope 
        ///     triggers on any line.
        ///   
        ///   - TKDPO4K_VAL_TV_EVENT_LINE_NUMBER (5) - The oscilloscope 
        ///     triggers on a specific line number you specify with the
        ///     TV_Trigger_Line_Number attribute.
        /// 
        /// Default Value: TKDPO4K_VAL_TV_EVENT_FIELD1
        /// 
        /// </param>
        /// <param name="Trigger_Polarity">
        /// Specifies the polarity of the TV signal. The driver sets the TKDPO4K_ATTR_TV_TRIGGER_POLARITY attribute to this value.
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_TV_POSITIVE (1) - Positive video sync pulse
        ///   - TKDPO4K_VAL_TV_NEGATIVE (2) - Negative video sync pulse
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureTVTriggerSource(string Trigger_Source, int TV_Trigger_Signal_Format, int TV_Event, int Trigger_Polarity)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerSource(this._handle, Trigger_Source, TV_Trigger_Signal_Format, TV_Event, Trigger_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the line on which TV trigger is set.
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TV_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Line_Number">
        /// Passes the line on which you want the oscilloscope to trigger.  The line must be within the TV field you specify in the TV Field parameter.  The driver sets the TKDPO4K_ATTR_TV_TRIGGER_LINE_NUMBER attribute to this value.
        /// 
        /// Valid Range: The valid range depends upon the values you pass for the TV Trigger Signal Type as shown below. 
        /// 
        ///   ---------------------------------
        ///   TV Signal Type     Valid Range
        ///   ---------------------------------
        ///   PAL                1 to 625
        ///   SECAM              1 to 625
        ///   HDTV               1 to 625
        ///   EIA343             1 to 625
        ///   CUSTOM             1 to 625
        ///   NTSC               1 to 525
        ///   ---------------------------------
        ///  
        /// Default Value: 1
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTVTriggerLineNumber(int Line_Number)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerLineNumber(this._handle, Line_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the video trigger holdoff for TV triggering.
        /// </summary>
        /// <param name="Holdoff">
        /// Specifies the video trigger holdoff in terms of video fields.
        /// 
        /// Valid Range: 0.0 ~ 8.5
        /// 
        /// Default Value: 0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTVTriggerFieldHoldoff(double Holdoff)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerFieldHoldoff(this._handle, Holdoff);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the HDTV format for TV triggering.
        /// </summary>
        /// <param name="Format">
        /// Specifies the HDTV video signal format on which to trigger.
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_HDTV_1080P24 (1) - 1125 lines (1080 active),
        ///                                    1920 * 1080 pixel,
        ///                                    progressive, 24 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_720P60  (2) - 750 lines (720 active), 1280
        ///                                    * 720 pixel, progressive, 60
        ///                                    fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_480P60  (3) - 525 lines (480 active), 640
        ///                                    or 704 * 480 pixel,
        ///                                    progressive, 60 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080I50 (4) - 1125 lines (1080 active),
        ///                                    1920 * 1080 pixel,
        ///                                    interlaced, 50 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080P25 (5) - 1125 lines (1080 active),
        ///                                    1920 * 1080 pixel,
        ///                                    progressive, 25 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080I60 (6) - 1125 lines (1080 active),
        ///                                    1920 * 1080 pixel,
        ///                                    interlaced, 60 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080PSF24 (7) - 1125 lines (1080 active),
        ///                                     1920 *1080 pixel,
        ///                                     progressive (sF), 24 fps
        /// 
        ///   - TKDPO4K_VAL_HDTV_576P50 (8)  - 576p50
        /// 
        ///   - TKDPO4K_VAL_HDTV_720P30 (9)  - 720p30
        /// 
        ///   - TKDPO4K_VAL_HDTV_720P50 (10) - 720p50
        /// 
        ///   - TKDPO4K_VAL_HDTV_875I60 (11) - 875i60
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080P30 (12) - 1080p30
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080P50 (13) - 1080p50
        /// 
        ///   - TKDPO4K_VAL_HDTV_1080P60 (14) - 1080p60
        /// 
        /// Default Value: TKDPO4K_VAL_HDTV_1080P24
        /// 
        /// Notes:
        /// (1) TKDPO4K_VAL_HDTV_576P50, TKDPO4K_VAL_HDTV_720P30, TKDPO4K_VAL_HDTV_720P50, TKDPO4K_VAL_HDTV_875I60, TKDPO4K_VAL_HDTV_1080P30, TKDPO4K_VAL_HDTV_1080P50 and TKDPO4K_VAL_HDTV_1080P60 are valid only in DPO3K models.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTVTriggerHDTV(int Format)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerHDTV(this._handle, Format);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures custom format, scan rate, line period and sync interval for TV triggering.
        /// 
        /// Notes:
        /// (1) This function is valid only when the video format is custom.
        /// </summary>
        /// <param name="Format">
        /// Specifies the video triggering format.
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_TV_CUSTOM_INTERLACED  (1) - Interlaced video
        ///                                             lines
        /// 
        ///   - TKDPO4K_VAL_TV_CUSTOM_PROGRESSIVE (2) - Progressive video
        ///                                             lines
        /// 
        /// Default Value: TKDPO4K_VAL_TV_CUSTOM_INTERLACED
        /// </param>
        /// <param name="Scan_Rate__Hz_">
        /// Specifies the horizontal line scan rate of the A video trigger.
        /// 
        /// Valid Values:
        ///   - TKDPO4K_VAL_TV_RATE15K  (1) - 15 KHz
        ///   - TKDPO4K_VAL_TV_RATE20K  (2) - 20 KHz
        ///   - TKDPO4K_VAL_TV_RATE25K  (3) - 25 KHz
        ///   - TKDPO4K_VAL_TV_RATE35K  (4) - 35 KHz
        ///   - TKDPO4K_VAL_TV_RATE50K  (5) - 50 KHz
        /// 
        /// Default Value: TKDPO4K_VAL_TV_RATE15K
        /// </param>
        /// <param name="Line_Period__s_">
        /// Specifies the line period for the standard under test.
        /// 
        /// Valid Range: 0 ~ 500 us
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <param name="Sync_Interval__s_">
        /// Specifies the sync interval for the standard under test.
        /// 
        /// Valid Range: 0 ~ 200 us
        /// 
        /// Default Value: 0.0 s
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTVTriggerCustom(int Format, int Scan_Rate__Hz_, double Line_Period__s_, double Sync_Interval__s_)
        {
            int pInvokeResult = PInvoke.ConfigureTVTriggerCustom(this._handle, Format, Scan_Rate__Hz_, Line_Period__s_, Sync_Interval__s_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures trigger thresholds for a specified channel. The instrument can have different trigger thresholds for each channel (CH1~CH4 for four-channel modules, CH1~CH2 for two-channel modules). The oscilloscope uses a trigger threshold of the channel specified as the trigger source.
        /// 
        /// For example, if you specify channel 1 as the trigger source, and the upper threshold for channel 1 is 5 volts, the lower threshold for channel 1 is 0 volt, then the upper threshold and lower threshold for triggering is 5 volts and 0 volt.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name that you want to configure.
        /// 
        /// Valid Channel Names: 
        /// For four-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3 ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4 ("CH4")   - Channel 4
        /// 
        /// For two-channel models:
        ///     TKDPO4K_VAL_CH_1 ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2 ("CH2")   - Channel 2
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Upper_Threshold">
        /// Passes the upper limit for the channel selected. This control affects instrument behavior only when you set the Trigger Type  to Runt Trigger or Transition Trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_UPPERTHRES_BY_CH attribute to this value.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value:
        ///   0.8
        /// </param>
        /// <param name="Lower_Threshold">
        /// Passes the lower limit for the channel selected. This control affects instrument behavior only when you set the Trigger Type  to Runt Trigger or Transition Trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_LOWERTHRES_BY_CH attribute to this value.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value:
        ///   0.0
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTriggerThreshold(string Channel_Name, double Upper_Threshold, double Lower_Threshold)
        {
            int pInvokeResult = PInvoke.ConfigureTriggerThreshold(this._handle, Channel_Name, Upper_Threshold, Lower_Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the runt trigger. A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold. You specify the runt thresholds with the  Runt Low Threshold and Runt High Threshold parameters. You specify the polarity of the runt with the Runt Polarity parameter.
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_RUNT_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Trigger_Source">
        /// Passes the source you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        /// 
        /// For MDO models:
        ///   - TKDPO4K_VAL_RF_CHANNEL   ("RF")  - RF Channel
        /// 
        /// Default Value:
        /// TKDPO4K_VAL_CH_1
        /// </param>
        /// <param name="Runt_Low_Threshold__volts_">
        /// Passes the low threshold you want the oscilloscope to use for runt triggering. The driver sets the TKDPO4K_ATTR_RUNT_LOW_THRESHOLD attribute to this value.
        /// 
        /// Units: volts.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value: 0
        /// 
        /// Note: If you pass a value for Runt High Threshold that is lower than the value you pass for Runt Low Threshold, the instrument sets the Runt Low Threshold to the value you pass for Runt High Threshold.
        /// </param>
        /// <param name="Runt_High_Threshold__volts_">
        /// Passes the high threshold you want the oscilloscope to use for runt triggering.  The driver sets the TKDPO4K_ATTR_RUNT_HIGH_THRESHOLD attribute to this value.
        /// 
        /// Units: volts.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value: 0.8
        /// 
        /// Note: If you pass a value for Runt High Threshold that is lower than the value you pass for Runt Low Threshold, the instrument sets the Runt Low Threshold to the value you pass for Runt High Threshold.
        /// 
        /// </param>
        /// <param name="Runt_Polarity">
        /// Passes the polarity of the runt that you want to trigger the oscilloscope. The driver sets the TKDPO4K_ATTR_RUNT_POLARITY attribute to this value.
        /// 
        /// Valid Values:
        /// - TKDPO4K_VAL_RUNT_POSITIVE (1): The oscilloscope
        ///   triggers on a positive runt. A positive runt occurs when
        ///   a rising edge crosses the Runt Low Threshold and does not
        ///   cross the Runt High Threshold before re-crossing the Low Runt
        ///   Threshold.
        /// 
        /// - TKDPO4K_VAL_RUNT_NEGATIVE (2): The oscilloscope
        ///   triggers on a negative runt. A negative runt occurs when
        ///   a falling edge crosses the Runt High Threshold and does not
        ///   cross the Runt Low Threshold before re-crossing the High Runt
        ///   Threshold.
        /// 
        /// - TKDPO4K_VAL_RUNT_EITHER (3): The oscilloscope
        ///   triggers on either a positive or negative runt.
        /// 
        /// Default Value: TKDPO4K_VAL_RUNT_POSITIVE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureRuntTriggerSource(string Trigger_Source, double Runt_Low_Threshold__volts_, double Runt_High_Threshold__volts_, int Runt_Polarity)
        {
            int pInvokeResult = PInvoke.ConfigureRuntTriggerSource(this._handle, Trigger_Source, Runt_Low_Threshold__volts_, Runt_High_Threshold__volts_, Runt_Polarity);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the runt trigger condition. A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold. You specify the runt with the Runt Width parameter. You specify the runt condition with the Runt Condition parameter.
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_RUNT_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Runt_Width">
        /// Passes the runt width you want the oscilloscope to use for runt triggering. The driver sets the TKDPO4K_ATTR_RUNT_WIDTH attribute to this value.
        /// 
        /// Valid Range: 4.0e-9 ~ 8.0 seconds
        /// 
        /// Resolution: 0.8e-9 seconds
        /// 
        /// Default Value: 4.0e-9 seconds
        /// </param>
        /// <param name="Runt_Condition">
        /// Passes the triggering condition you want the oscilloscope to use for runt triggering.
        /// 
        /// Valid Values:
        /// 
        ///   - TKDPO4K_VAL_RUNT_WHEN_OCCURS (1) - The oscilloscope triggers 
        ///     when a runt occurs.
        ///   
        ///   - TKDPO4K_VAL_RUNT_WHEN_WIDER_THAN (2) - The oscilloscope 
        ///     triggers when a runt with a width wider than the width
        ///     specified by the TKDPO4K_ATTR_RUNT_WIDTH attribute.
        /// 
        ///   - TKDPO4K_VAL_RUNT_WHEN_LESS_THAN (3) - The oscilloscope 
        ///     triggers when a runt with a width narrower than the width 
        ///     specified by the TKDPO4K_ATTR_RUNT_WIDTH attribute.
        /// 
        ///   - TKDPO4K_VAL_RUNT_WHEN_EQUAL (4) - The oscilloscope triggers 
        ///     when a runt with a width equal to the width specified by the
        ///     TKDPO4K_ATTR_RUNT_WIDTH attribute.
        /// 
        ///   - TKDPO4K_VAL_RUNT_WHEN_NOTEQUAL (5) - The oscilloscope 
        ///     triggers when a runt with a width unequal to the width
        ///     specified by the TKDPO4K_ATTR_RUNT_WIDTH attribute.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureRuntTriggerCondition(double Runt_Width, int Runt_Condition)
        {
            int pInvokeResult = PInvoke.ConfigureRuntTriggerCondition(this._handle, Runt_Width, Runt_Condition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the glitch trigger. A glitch trigger occurs when the trigger signal has a pulse with a width that is less than the glitch width. You specify the glitch width in the Glitch Width parameter. You specify the polarity of the pulse with the Glitch Polarity parameter. The trigger does not actually occur until the edge of a pulse that corresponds to the Glitch Width and Glitch Polarity crosses the threshold you specify in the Trigger Level parameter. 
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_GLITCH_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Trigger_Source">
        /// Passes the source you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        /// 
        /// For MSO models:
        ///   - TKDPO4K_VAL_D_0          ("D0")  - Digital Channel 0
        ///   - TKDPO4K_VAL_D_1          ("D1")  - Digital Channel 1
        ///   - TKDPO4K_VAL_D_2          ("D2")  - Digital Channel 2
        ///   - TKDPO4K_VAL_D_3          ("D3")  - Digital Channel 3
        ///   - TKDPO4K_VAL_D_4          ("D4")  - Digital Channel 4
        ///   - TKDPO4K_VAL_D_5          ("D5")  - Digital Channel 5
        ///   - TKDPO4K_VAL_D_6          ("D6")  - Digital Channel 6
        ///   - TKDPO4K_VAL_D_7          ("D7")  - Digital Channel 7
        ///   - TKDPO4K_VAL_D_8          ("D8")  - Digital Channel 8
        ///   - TKDPO4K_VAL_D_9          ("D9")  - Digital Channel 9
        ///   - TKDPO4K_VAL_D_10         ("D10") - Digital Channel 10
        ///   - TKDPO4K_VAL_D_11         ("D11") - Digital Channel 11
        ///   - TKDPO4K_VAL_D_12         ("D12") - Digital Channel 12
        ///   - TKDPO4K_VAL_D_13         ("D13") - Digital Channel 13
        ///   - TKDPO4K_VAL_D_14         ("D14") - Digital Channel 14
        ///   - TKDPO4K_VAL_D_15         ("D15") - Digital Channel 15
        /// 
        ///   - TKDPO4K_VAL_EXTERNAL     ("VAL_EXTERNAL") - External
        ///   - TKDPO4K_VAL_AC_LINE      ("VAL_AC_LINE")  - AC Line
        /// 
        /// For MDO Models:
        ///   - TKDPO4K_VAL_RF_CHANNEL   ("RF")  - RF Channel
        /// 
        /// Note:
        /// 
        /// TKDPO4K_VAL_EXTERNAL - The oscilloscope waits for a trigger on the external trigger input.
        /// </param>
        /// <param name="Trigger_Level__volts_">
        /// Passes the voltage threshold you want the oscilloscope to use for glitch triggering. The driver sets the TKDPO4K_ATTR_TRIGGER_LEVEL attribute to this value.
        /// 
        /// The oscilloscope triggers when a glitch crosses the trigger threshold you specify with this parameter.
        /// 
        /// Units: volts
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal   
        ///   reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value: 0.0
        /// 
        /// Note: This parameter only affects instrument behavior when you select a channel or the external trigger input as the Trigger Source. You cannot configure the trigger level that the oscilloscope uses for other trigger sources.  
        /// </param>
        /// <param name="Glitch_Width__sec_">
        /// Passes the length of time you want the oscilloscope to use for the glitch width. The driver sets the TKDPO4K_ATTR_GLITCH_WIDTH attribute to this value.
        /// 
        /// The oscilloscope triggers when it detects a pulse with a width that meets the condition specified by the Glitch Condition parameter.
        /// 
        /// Units: seconds
        /// 
        /// Valid Range: 4.0e-9 ~ 8.0 seconds
        /// 
        /// Resolution: 0.8e-9 seconds
        /// 
        /// Default Value: 4.0e-9 seconds
        /// </param>
        /// <param name="Glitch_Polarity">
        /// Passes the polarity of the glitch that you want to trigger the oscilloscope. The driver sets the TKDPO4K_ATTR_GLITCH_POLARITY attribute to this value.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_GLITCH_POSITIVE (1) - The oscilloscope
        ///   triggers on a positive glitch.
        /// 
        /// - TKDPO4K_VAL_GLITCH_NEGATIVE (2) - The oscilloscope
        ///   triggers on a negative glitch.
        /// 
        /// Default Value: TKDPO4K_VAL_GLITCH_POSITIVE
        /// </param>
        /// <param name="Glitch_Condition">
        /// Passes the glitch condition under which you want the oscilloscope to trigger. The driver sets the TKDPO4K_ATTR_GLITCH_CONDITION attribute to this value. 
        /// 
        /// The glitch condition determines whether the glitch trigger happens when the oscilloscope detects a pulse with a width less than or greater than the width value.
        /// 
        /// Valid Values:  
        /// TKDPO4K_VAL_GLITCH_LESS_THAN (1) - The oscilloscope triggers when the pulse width is less than the specified width.
        /// 
        /// TKDPO4K_VAL_GLITCH_GREATER_THAN (2) - The oscilloscope triggers when the pulse width is greater than the specified width.
        /// 
        /// TKDPO4K_VAL_GLITCH_WITHIN_5_PERCENT (101) - The oscilloscope triggers when the pulse width is within 5% of the specified width.
        /// 
        /// TKDPO4K_VAL_GLITCH_OUTSIDE_5_PERCENT (102) - The oscilloscope triggers when the pulse width is outside 5% of the specified width.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureGlitchTriggerSource(string Trigger_Source, double Trigger_Level__volts_, double Glitch_Width__sec_, int Glitch_Polarity, int Glitch_Condition)
        {
            int pInvokeResult = PInvoke.ConfigureGlitchTriggerSource(this._handle, Trigger_Source, Trigger_Level__volts_, Glitch_Width__sec_, Glitch_Polarity, Glitch_Condition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the transition trigger. You specify the polarity of the transition with the Polarity parameter. You specify the condition of the transition with the Condition parameter. You specify the delta time with the Delta Time parameter. You specify the transition thresholds with the Transition Low Threshold and Transition High Threshold parameters.
        /// 
        /// Note: This function affects instrument behavior only if the Trigger Type is TKDPO4K_VAL_TRANSITION_TRIGGER. Call the tkdpo4k_ConfigureTrigger function to set the Trigger Type before you call this function.
        /// </summary>
        /// <param name="Trigger_Source">
        /// Passes the source you want the oscilloscope to monitor for a trigger. The driver sets the TKDPO4K_ATTR_TRIGGER_SOURCE attribute to this value. 
        /// 
        /// Valid Values:
        /// For four-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        ///   - TKDPO4K_VAL_CH_3         ("CH3") - Channel 3
        ///   - TKDPO4K_VAL_CH_4         ("CH4") - Channel 4
        /// 
        /// For two-channel models:
        ///   - TKDPO4K_VAL_CH_1         ("CH1") - Channel 1 
        ///   - TKDPO4K_VAL_CH_2         ("CH2") - Channel 2
        /// </param>
        /// <param name="Polarity">
        /// Passes the polarity of the transition that you want to trigger the oscilloscope. The driver sets the TKDPO4K_ATTR_TRANSITION_POLARITY attribute to this value.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_TRANSITION_POSITIVE (1) - The oscilloscope 
        ///   triggers when a pulse edge traverses from the low threshold 
        ///   (most negative) to the high threshold (most positive).
        /// 
        /// - TKDPO4K_VAL_TRANSITION_NEGATIVE (2) - The oscilloscope 
        ///   triggers when a pulse edge traverses from the high threshold 
        ///   (most positive) to the low threshold (most negative).
        /// 
        /// - TKDPO4K_VAL_TRANSITION_EITHER (3) - The oscilloscope 
        ///   triggers when a pulse edge traverses either from the low 
        ///   threshold to the high threshold or from the high threshold to 
        ///   the low threshold. 
        /// 
        /// Default Value: TKDPO4K_VAL_TRANSITION_POSITIVE
        /// </param>
        /// <param name="Condition">
        /// Passes the transition condition under which you want the oscilloscope to trigger. The driver sets the TKDPO4K_ATTR_TRANSITION_CONDITION attribute to this value.
        /// 
        /// The transition condition determines whether the transition trigger happens when the oscilloscope detects a delta time that meets the specified condition.
        /// 
        /// Valid Values:
        /// 
        ///   - TKDPO4K_VAL_TRANSITION_FASTER_THAN (1) - The oscilloscope 
        ///     triggers with a pulse that has a slew rate faster than the   
        ///     value you specify with the delta time parameter to trigger 
        ///     the oscilloscope.
        /// 
        ///   - TKDPO4K_VAL_TRANSITION_SLOWER_THAN (2) - The oscilloscope 
        ///     triggers with a pulse that has a slew rate slower than the 
        ///     value you specify with the delta time parameter to trigger 
        ///     the oscilloscope.
        /// 
        ///   - TKDPO4K_VAL_TRANSITION_EQUAL (3) - The oscilloscope 
        ///     triggers with a pulse that has a slew rate equal the value 
        ///     you specify with the delta time parameter to trigger the 
        ///     oscilloscope.
        /// 
        ///   - TKDPO4K_VAL_TRANSITION_UNEQUAL (4) - The oscilloscope   
        ///     triggers with a  pulse that has a slew rate not equal to the 
        ///     value you specify with the delta time parameter to trigger 
        ///     the oscilloscope.
        /// 
        /// Default Value: TKDPO4K_VAL_TRANSITION_SLOWER_THAN    
        /// </param>
        /// <param name="Delta_Time">
        /// Passes the length of time you want the oscilloscope to use for the transition delta time. The driver sets the TKDPO4K_ATTR_TRANSITION_DELTA_TIME attribute to this value.
        /// 
        /// The oscilloscope triggers when it detects a transition slope with the delta time meets the condition specified by the Transition Condition parameter.
        /// 
        /// Units: seconds
        /// 
        /// Valid Range: 4.0e-9 ~ 8.0 seconds
        /// 
        /// Resolution: 0.8e-9 seconds
        /// 
        /// Default Value: 4.0e-9 seconds
        /// </param>
        /// <param name="Lower_Thresthold">
        /// Passes the low threshold you want the oscilloscope to use for transition triggering. The driver sets the TKDPO4K_ATTR_TRANSITION_LOW_THRESHOLD attribute to this value.
        /// 
        /// Units: volts.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value: 0
        /// 
        /// Note: If you pass a value for Transition High Threshold that is lower than the value you pass for Transition Low Threshold, the instrument sets the Transition Low Threshold to the value you pass for Transition High Threshold.
        /// </param>
        /// <param name="Upper_Threshold">
        /// Passes the low threshold you want the oscilloscope to use for transition triggering. The driver sets the TKDPO4K_ATTR_TRANSITION_HIGH_THRESHOLD attribute to this value.
        /// 
        /// Units: volts.
        /// 
        /// Valid Range:
        ///   -8 divisions from signal reference to +8 divisions from signal reference with maximum range of -40~40.
        /// 
        /// Resolution: 
        ///   0.2 divisions.
        /// 
        /// Default Value: 0.8
        /// 
        /// Note: If you pass a value for Transition High Threshold that is lower than the value you pass for Transition Low Threshold, the instrument sets the Transition Low Threshold to the value you pass for Transition High Threshold. 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureTransitTriggerSource(string Trigger_Source, int Polarity, int Condition, double Delta_Time, double Lower_Thresthold, double Upper_Threshold)
        {
            int pInvokeResult = PInvoke.ConfigureTransitTriggerSource(this._handle, Trigger_Source, Polarity, Condition, Delta_Time, Lower_Thresthold, Upper_Threshold);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures a math channel for standard waveform math operations. These operations are inverting, adding, subtracting, multiplying, dividing, integrating, and taking a derivative.
        /// 
        /// Note: To configure a math channel to calculate an FFT, use the tkdpo4k_ConfigureMathChannelFFT function.
        /// </summary>
        /// <param name="Math_Source1">
        /// Passes the name of the channel to use for the first math source.
        /// 
        /// Valid Values: 
        /// For four-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_CH3 ("CH3") - Channel 3
        ///  - TKDPO4K_VAL_SOUR_CH4 ("CH4") - Channel 4
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// For two-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// Default Value: TKDPO4K_VAL_SOUR_CH1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Math_Function">
        /// Passes the math function you want the oscilloscope to perform.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_MATH_ADD (1)      - Specifies ADD operation for 
        ///                                   dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_SUBTRACT (2) - Specifies SUBTRACT operation 
        ///                                   for dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_MULTIPLY (3) - Specifies MULTIPLY operation 
        ///                                   for dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_DIVIDE (4)   - Specifies DIVIDE operation for 
        ///                                   dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_FFT (5)      - Specifies FFT operation for 
        ///                                   FFT waveform path.
        /// 
        /// Default Value: TKDPO4K_VAL_MATH_ADD
        /// </param>
        /// <param name="Math_Source2">
        /// Passes the name of the channel to use for the second math source. The oscilloscope uses this channel if you pass one of the dual waveform math functions for the Math Function parameter. The dual waveform math functions are TKDS30XX_VAL_MATH_ADD, TKDS30XX_VAL_MATH_SUBTRACT, TKDS30XX_VAL_MATH_MULTIPLY, and TKDS30XX_VAL_MATH_DIVIDE.
        /// 
        /// Valid Values: 
        /// For four-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_CH3 ("CH3") - Channel 3
        ///  - TKDPO4K_VAL_SOUR_CH4 ("CH4") - Channel 4
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// For two-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// Default Value: TKDPO4K_VAL_SOUR_CH2
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureMathChannel(int Math_Source1, int Math_Function, int Math_Source2)
        {
            int pInvokeResult = PInvoke.ConfigureMathChannel(this._handle, Math_Source1, Math_Function, Math_Source2);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures a math channel to calculate an FFT.
        /// </summary>
        /// <param name="Math_Source1">
        /// Passes the name of the channel for which you want the oscilloscope to calculate an FFT.
        /// 
        /// Valid Values: 
        /// For four-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_CH3 ("CH3") - Channel 3
        ///  - TKDPO4K_VAL_SOUR_CH4 ("CH4") - Channel 4
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// For two-channel models:
        ///  - TKDPO4K_VAL_SOUR_CH1 ("CH1") - Channel 1
        ///  - TKDPO4K_VAL_SOUR_CH2 ("CH2") - Channel 2
        ///  - TKDPO4K_VAL_SOUR_REF1 ("REF1") - Reference 1
        ///  - TKDPO4K_VAL_SOUR_REF2 ("REF2") - Reference 2
        ///  - TKDPO4K_VAL_SOUR_REF3 ("REF3") - Reference 3
        ///  - TKDPO4K_VAL_SOUR_REF4 ("REF4") - Reference 4
        /// 
        /// Default Value: TKDPO4K_VAL_SOUR_CH1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="FFT_Window">
        /// Passes the window type you want the oscilloscope to use for the FFT.
        /// 
        /// Valid Values: 
        /// 
        /// - TKDPO4K_VAL_MATH_HANNING (1)       -   Rectangular
        /// - TKDPO4K_VAL_MATH_RECTANGULAR (2)   -   Blackman-Harris
        /// - TKDPO4K_VAL_MATH_HAMMING (3)       -   Hanning
        /// - TKDPO4K_VAL_MATH_BLACK_HARRIS (4)  -   Hamming
        /// 
        /// Default Value: TKDPO4K_VAL_MATH_HANNING
        /// </param>
        /// <param name="Vert_Scale">
        /// Passes the vertical scale you want the oscilloscope to use for the FFT.
        /// 
        /// Valid Values:
        ///  
        /// - TKDPO4K_VAL_MATH_DBV_RMS (1)    -  The oscilloscope displays 
        ///   the magnitude using a log scale, expressed in dB relative to 1
        ///   VRMS where 0 dB = 1 VRMS.
        /// 
        /// - TKDPO4K_VAL_MATH_LINEAR_RMS (2) -  The oscilloscope displays
        ///   the magnitude using voltage as the scale.
        /// 
        /// Default Value: TKDPO4K_VAL_MATH_DBV_RMS
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureMathChannelFFT(int Math_Source1, int FFT_Window, int Vert_Scale)
        {
            int pInvokeResult = PInvoke.ConfigureMathChannelFFT(this._handle, Math_Source1, FFT_Window, Vert_Scale);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures a math channel in the advanced mode. You can define function expression and add variables to the expression in the advanced mode.
        /// </summary>
        /// <param name="VAR1">
        /// Specifies the value of a user-defined math variable that can be used as part of an advanced math waveform expression. The driver sets the TKDPO4K_ATTR_ADV_VAR1 attribute to this value.
        /// 
        /// For example, if you specify an advanced math expression as CH1*VAR1, and you specify advanced VAR1 as 2, the math channel outputs a waveform calculated by CH1*2.
        /// 
        /// Valid Ranges: -9.9E15 ~ 9.9E15
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="VAR2">
        /// Specifies the value of a user-defined math variable that can be used as part of an advanced math waveform expression. The driver sets the TKDPO4K_ATTR_ADV_VAR2 attribute to this value.
        /// 
        /// For example, if you specify an advanced math expression as CH1*VAR2, and you specify advanced VAR2 as 2, the math channel outputs a waveform calculated by CH1*2.
        /// 
        /// Valid Ranges: -9.9E15 ~ 9.9E15
        /// 
        /// Default Value: 0
        /// </param>
        /// <param name="Function_Definition">
        /// Specifies the advanced math function as a text string. You can specify a math expression from waveforms, measurements and scalar sources, functions, operands, and numerical constants. Math expressions can be very complex. As an example, you can enter the expression Log(Ch1+Ch2), which specifies that the signals from channels 1 and 2 are to be algebraically added, and the base 10 log of the sum is to be shown as the final math waveform.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureMathChannelAdvanced(double VAR1, double VAR2, string Function_Definition)
        {
            int pInvokeResult = PInvoke.ConfigureMathChannelAdvanced(this._handle, VAR1, VAR2, Function_Definition);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// Configures a math channel to perform math operations on RF Channels.
        /// 
        /// Note:
        ///  This function applies only to MDO series oscilloscopes
        /// </summary>
        /// <param name="Math_RF_Source1">
        /// Passes the name of the channel to use for the first math source.
        /// 
        /// Valid Values: 
        /// TKDPO4K_VAL_RFSOUR_NORMAL
        /// TKDPO4K_VAL_RFSOUR_AVERAGE
        /// TKDPO4K_VAL_RFSOUR_MAXHOLD
        /// TKDPO4K_VAL_RFSOUR_MINHOLD
        /// 
        /// Default Value: TKDPO4K_VAL_RFSOUR_NORMAL
        /// </param>
        /// <param name="Math_RF_Source2">
        /// Passes the name of the reference channel to use for the second math source.
        /// 
        /// Valid Values: 
        /// TKDPO4K_VAL_RFSOUR_NORMAL
        /// TKDPO4K_VAL_RFSOUR_AVERAGE
        /// TKDPO4K_VAL_RFSOUR_MAXHOLD
        /// TKDPO4K_VAL_RFSOUR_MINHOLD
        /// 
        /// Default Value: TKDPO4K_VAL_RFSOUR_AVERAGE
        /// </param>
        /// <param name="Math_Function">
        /// Passes the math function you want the oscilloscope to perform.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_MATH_ADD (1)      - Specifies ADD operation for 
        ///                                   dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_SUBTRACT (2) - Specifies SUBTRACT operation 
        ///                                   for dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_MULTIPLY (3) - Specifies MULTIPLY operation 
        ///                                   for dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_DIVIDE (4)   - Specifies DIVIDE operation for 
        ///                                   dual waveform path.
        /// 
        /// - TKDPO4K_VAL_MATH_FFT (5)      - Specifies FFT operation for 
        ///                                   FFT waveform path.
        /// 
        /// Default Value: TKDPO4K_VAL_MATH_ADD
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureMathChannelSpectrum(int Math_RF_Source1, int Math_RF_Source2, int Math_Function)
        {
            int pInvokeResult = PInvoke.ConfigureMathChannelSpectrum(this._handle, Math_RF_Source1, Math_RF_Source2, Math_Function);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures whether display the math channel on the oscilloscope.
        /// </summary>
        /// <param name="Enable">
        /// Specify whether you want the oscilloscope to display the math channel. The driver sets the TKDPO4K_ATTR_CHANNEL_ENABLED attribute to this value. 
        ///  
        /// Valid Values:
        /// VI_TRUE
        /// VI_FALSE
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int EnableMathChannel(bool Enable)
        {
            int pInvokeResult = PInvoke.EnableMathChannel(this._handle, System.Convert.ToUInt16(Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the display of the math expression.
        /// 
        /// Note: 
        /// The Math auto-scale function affects the vertical scaling of the waveform. With auto-scaling off and scale set too low on queried waveform data, it is possible the waveform may be clipped (positive and/or negative) resulting in an over/under range for the data in the CURVE query result.
        /// </summary>
        /// <param name="Auto_Scale">
        /// Enables or disables the display of the math expression. The driver uses this value to set the TKDPO4K_ATTR_MATH_EXPRESSION_DISPLAY attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_TRUE  
        /// 
        /// SCPI Command:
        /// :MATH:AUTOSCale
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ConfigureMathExpDisplay(bool Auto_Scale)
        {
            int pInvokeResult = PInvoke.ConfigureMathExpDisplay(this._handle, System.Convert.ToUInt16(Auto_Scale));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stores a waveform in a reference channel.
        /// </summary>
        /// <param name="Waveform_Source">
        /// Passes the name of the channel that you want the oscilloscope to store in the reference channel.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH") - Math
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHA")  - RF Phase
        ///     TKDPO4K_VAL_RF_NORMAL    ("RF_NORM") - RF Normal
        ///     TKDPO4K_VAL_RF_AVERAGE   ("RF_AVE")  - RF Average
        ///     TKDPO4K_VAL_RF_MAXHOLD   ("RF_MAXH") - RF Max Hold
        ///     TKDPO4K_VAL_RF_MINHOLD   ("RF_MINH") - RF Min Hold
        ///     TKDPO4K_VAL_RF_BB_IQ     ("RF_BB_IQ")- RF BB IQ
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Reference_Channel">
        /// Passes the name of the reference channel into which you want the oscilloscope to store the waveform that you specify with the Waveform Source parameter.
        /// 
        /// Valid Channel Names: 
        ///     TKDPO4K_VAL_REF_1 ("REF1") - Reference 1
        ///     TKDPO4K_VAL_REF_2 ("REF2") - Reference 2
        ///     TKDPO4K_VAL_REF_3 ("REF3") - Reference 3
        ///     TKDPO4K_VAL_REF_4 ("REF4") - Reference 4
        /// 
        /// Default Value: TKDPO4K_VAL_REF_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StoreWfmToRefChannel(string Waveform_Source, string Reference_Channel)
        {
            int pInvokeResult = PInvoke.StoreWfmToRefChannel(this._handle, Waveform_Source, Reference_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function enables or disables a reference channel.
        /// 
        /// Notes:
        /// 
        /// (1) You can enable a reference channel only after you store a waveform to the reference channel. Use the  tkdpo4k_StoreWfmToRefChannel functions to store a waveform to a reference channel.
        /// 
        /// (2) Disabling a reference channel does not clear the waveform that you stored in that reference channel.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel that you want the oscilloscope to store in the reference channel.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH") - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Enable">
        /// Specifies whether you want to enable the reference channel. The driver sets the TTKDPO4K_ATTR_CHANNEL_ENABLED attribute to this value. 
        ///  
        /// Valid Values:
        /// VI_TRUE
        /// VI_FALSE
        /// 
        /// Default Value:
        /// VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int EnableReferenceChannel(string Channel_Name, bool Enable)
        {
            int pInvokeResult = PInvoke.EnableReferenceChannel(this._handle, Channel_Name, System.Convert.ToUInt16(Enable));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the reference levels for waveform measurements.  
        /// 
        /// Note: You must call this function before you call the tkdpo4k_ReadWaveformMeasurement or tkdpo4k_FetchWaveformMeasurement functions to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.
        /// </summary>
        /// <param name="Low_Ref__percentage_">
        /// Passes the low reference you want the oscilloscope to use for waveform measurements. The driver sets the TKDPO4K_ATTR_MEAS_LOW_REF attribute to this value.
        /// 
        /// Units: A percentage of the difference between the Voltage High and Voltage Low.
        /// 
        /// Valid Range: 0.0 to 100.0
        /// 
        /// Resolution: 1.0
        /// 
        /// Default Value: 10.0
        /// 
        /// Notes:
        /// 
        /// (1) The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
        /// 
        /// (2) Use the tkdpo4k_ConfigureMeasurement function to configure whether the oscilloscope uses the min/max or histogram method to calculate the voltage that corresponds the Voltage High and Voltage Low levels.
        /// </param>
        /// <param name="Mid_Ref__percentage_">
        /// Passes the mid reference you want the oscilloscope to use for waveform measurements. The driver sets the TKDPO4K_ATTR_MEAS_MID_REF attribute to this value.
        /// 
        /// Units: A percentage of the difference between the Voltage High and Voltage Low.
        /// 
        /// Valid Range: 0.0 to 100.0
        /// 
        /// Resolution: 1.0
        /// 
        /// Default Value: 50.0
        /// 
        /// Notes:
        /// 
        /// (1) The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
        /// 
        /// (2) Use the tkdpo4k_ConfigureMeasurement function to configure whether the oscilloscope uses the min/max or histogram method to calculate the voltage that corresponds the Voltage High and Voltage Low levels.
        /// </param>
        /// <param name="High_Ref__percentage_">
        /// Passes the high reference you want the oscilloscope to use for waveform measurements. The driver sets the TKDPO4K_ATTR_MEAS_HIGH_REF attribute to this value.
        /// 
        /// Units: A percentage of the difference between the Voltage High and Voltage Low.
        /// 
        /// Valid Range: 0.0 to 100.0
        /// 
        /// Resolution: 1.0
        /// 
        /// Default Value: 90.0
        /// 
        /// Notes:
        /// 
        /// (1) The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
        /// 
        /// (2) Use the tkdpo4k_ConfigureMeasurement function to configure whether the oscilloscope uses the min/max or histogram method to calculate the voltage that corresponds the Voltage High and Voltage Low levels.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureRefLevels(double Low_Ref__percentage_, double Mid_Ref__percentage_, double High_Ref__percentage_)
        {
            int pInvokeResult = PInvoke.ConfigureRefLevels(this._handle, Low_Ref__percentage_, Mid_Ref__percentage_, High_Ref__percentage_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures an immediate delay measurement.
        /// 
        /// 
        /// 
        /// </summary>
        /// <param name="Mid_Ref__percentage_">
        /// Passes the mid reference you want the oscilloscope to use for waveform measurements. The driver sets the TKDPO4K_ATTR_MEAS_MID2_REF attribute to this value.
        /// 
        /// Units: A percentage of the difference between the Voltage High and Voltage Low.
        /// 
        /// Valid Range: 0.0 to 100.0
        /// 
        /// Resolution: 1.0
        /// 
        /// Default Value: 50.0
        /// 
        /// Notes:
        /// 
        /// (1) The oscilloscope calculates the Voltage High and the Voltage Low using either the min/max or histogram method. The min/max method uses the maximum and minimum values found. The histogram method uses the most common values found above and below the middle of the waveform.
        /// 
        /// (2) Use the tkdpo4k_ConfigureMeasurement function to configure whether the oscilloscope uses the min/max or histogram method to calculate the voltage corresponding to the Voltage High and Voltage Low levels.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMidRef(double Mid_Ref__percentage_)
        {
            int pInvokeResult = PInvoke.ConfigureMidRef(this._handle, Mid_Ref__percentage_);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the method the oscilloscope uses to calculate the measurement reference levels and controls the gating method for measurements.
        /// </summary>
        /// <param name="Reference_Level_Calc_Method">
        /// Specifies the method the oscilloscope uses to calculate the voltages corresponding to the 0.0% and 100.0% reference levels.  The driver sets the TKDPO4K_ATTR_MEAS_REF_CALC_METH attribute to this value.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_MEAS_HISTOGRAM (1):  Sets the 100.0% and 0.0% 
        ///   waveform levels statistically using a histogram algorithm.
        /// 
        /// - TKDPO4K_VAL_MEAS_MIN_MAX   (2):  Sets the 100.0% and 0.0%
        ///   waveform levels to MAX and MIN respectively.
        /// 
        /// - TKDPO4K_VAL_MEAS_AUTO      (3): Auto chooses the best method 
        ///   (HISTOGRAM or MINMAX) for each dataset.
        /// 
        /// Default Value: TKDPO4K_VAL_MEAS_HISTOGRAM
        /// 
        /// </param>
        /// <param name="Gating">
        /// Specifies whether and how the oscilloscope uses gating for the measurement. The driver sets the TKDPO4K_ATTR_MEAS_GATING attribute to this value.
        /// 
        /// Valid Values: 
        /// 
        ///   - TKDPO4K_VAL_MEAS_GATING_OFF - Turns off measurement gating.
        /// 
        ///   - TKDPO4K_VAL_MEAS_GATING_SCREEN - Limits measurements to the 
        ///     portion of the waveform displayed on the screen.
        /// 
        ///   - TKDPO4K_VAL_MEAS_GATING_CURSOR - Limits measurements to the
        ///     portion of the waveform between the vertical bar cursors.
        /// 
        /// Default Value: TKDPO4K_VAL_MEAS_GATING_OFF
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureMeasurement(int Reference_Level_Calc_Method, int Gating)
        {
            int pInvokeResult = PInvoke.ConfigureMeasurement(this._handle, Reference_Level_Calc_Method, Gating);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the oscilloscope to perform a continuous acquisition. 
        /// </summary>
        /// <param name="Continuous_Acquisition">
        /// Turns the instrument acquisition continuous setting on or off.
        /// 
        /// Valid Values:  VI_TRUE or VI_FALSE
        /// 
        /// Default Value: VI_TRUE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ConfigureInitiateContinuous(bool Continuous_Acquisition)
        {
            int pInvokeResult = PInvoke.ConfigureInitiateContinuous(this._handle, System.Convert.ToUInt16(Continuous_Acquisition));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the attributes of the function generator that affect standard waveform generation.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// 3. The tkdpo4k_ConfigureOutputImpedance function must be used before this function, so that saved setups are recalled with the proper load factor applied.
        /// </summary>
        /// <param name="Waveform">
        /// Sets which AFG function to execute. The driver uses this value to set the TKDPO4K_ATTR_FUNC_WAVEFORM attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_WFM_SINE   -  Waveform Sine
        /// TKDPO4K_VAL_WFM_SQUARE   -  Waveform Square
        /// TKDPO4K_VAL_WFM_PULSE   -  Waveform Pulse
        /// TKDPO4K_VAL_WFM_RAMP   -  Waveform Ramp
        /// TKDPO4K_VAL_WFM_NOISE   -  Waveform Noise
        /// TKDPO4K_VAL_WFM_DC   -  Waveform DC
        /// TKDPO4K_VAL_WFM_SINC   -  Waveform Sinc
        /// TKDPO4K_VAL_WFM_GAUSSIAN   -  Waveform Gaussian
        /// TKDPO4K_VAL_WFM_LORENTZ   -  Waveform Lorentz
        /// TKDPO4K_VAL_WFM_ERISE   -  Waveform Erise
        /// TKDPO4K_VAL_WFM_EDECAY   -  Waveform Edecay
        /// TKDPO4K_VAL_WFM_HAVERSINE   -  Waveform Haversine
        /// TKDPO4K_VAL_WFM_CARDIAC   -  Waveform Cardiac
        /// TKDPO4K_VAL_WFM_ARBITRARY   -  Waveform Arbitrary
        /// 
        /// Default Value: TKDPO4K_VAL_WFM_SINE
        /// 
        /// SCPI Command:
        /// AFG:FUNCtion
        /// </param>
        /// <param name="Amplitude">
        /// Sets the AFG amplitude in volts, peak to peak. The driver uses this value to set the TKDPO4K_ATTR_FUNC_AMPLITUDE attribute.
        /// 
        /// Units: V
        /// 
        /// Valid Range:
        ///    Function                      Fifty Load Impedance    Highz Load Impedance
        /// Sine, Square, Pulse, Ramp, Noise     0.01 to 2.5             0.02 to 5
        /// DC, Haversine, Cardiac, Arbitrary    0.01 to 2.5             0.02 to 5
        /// Sinc                                 0.01 to 1.5             0.02 to 3
        /// Lorentz                              0.01 to 1.2             0.02 to 2.4
        /// Gaussian, Erise, Edecay              0.01 to 1.25            0.02 to 2.5
        /// 
        /// Default Value: 0.5
        /// 
        /// SCPI Command:
        /// AFG:AMPLitude
        /// </param>
        /// <param name="DC_Offset">
        /// Sets the AFG offset value, in volts. The driver uses this value to set the TKDPO4K_ATTR_FUNC_DC_OFFSET attribute.
        /// 
        /// Units: V
        /// 
        /// Valid Range:
        /// Fifty Load Impedance: -1.25   to  1.25
        /// Highz Load Impedance: -2.5   to  2.5
        /// 
        /// Default Value: 0
        /// 
        /// SCPI Command:
        /// AFG:OFFSet
        /// </param>
        /// <param name="Frequency">
        /// Sets the AFG frequency, in Hz. The driver uses this value to set the TKDPO4K_ATTR_FUNC_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        ///    Function                          Range
        /// Sine                              0.1 to 5e7
        /// Square, Pulse, Arbitrary          0.1 to 2.5e7
        /// Lorentz, Gaussian, Erise, Edecay  0.1 to 5e6
        /// Noise, DC, Haversine              0.1 to 5e6
        /// Sinc                              0.1 to 2e6
        /// Cardiac, Ramp                     0.1 to 5e5
        /// 
        /// Default Value: 1e5
        /// 
        /// SCPI Command:
        /// AFG:FREQuency
        /// </param>
        /// <param name="Start_Phase">
        /// Sets the AFG phase. The driver uses this value to set the TKDPO4K_ATTR_FUNC_START_PHASE attribute.
        /// 
        /// Units: degree
        /// 
        /// Valid Range:
        /// -180   to  180
        /// 
        /// Default Value: 0
        /// 
        /// SCPI Command:
        /// AFG:PHASe
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureStandardWaveform(int Waveform, double Amplitude, double DC_Offset, double Frequency, double Start_Phase)
        {
            int pInvokeResult = PInvoke.ConfigureStandardWaveform(this._handle, Waveform, Amplitude, DC_Offset, Frequency, Start_Phase);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the AFG preset levels to values that correspond to the logic standard specified by the argument.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Preset_Level">
        /// Sets the AFG preset levels to values that correspond to the logic standard specified by the argument. The driver uses this value to set the TKDPO4K_ATTR_FUNC_PRESET_LEVEL attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_FUNC_LEVEL_CMOS_5_0V   -  CMOS_5_0V
        /// TKDPO4K_VAL_FUNC_LEVEL_CMOS_3_3V   -  CMOS_3_3V
        /// TKDPO4K_VAL_FUNC_LEVEL_CMOS_2_5V   -  CMOS_2_5V
        /// TKDPO4K_VAL_FUNC_LEVEL_USER   -  User
        /// TKDPO4K_VAL_FUNC_LEVEL_ECL   -  ECL
        /// TKDPO4K_VAL_FUNC_LEVEL_TTL   -  TTL
        /// 
        /// Default Value: TKDPO4K_VAL_FUNC_LEVEL_USER
        /// 
        /// Note:
        /// Specifying a level preset attempts to set the High and Low level values to valid levels for the selected logic standard. Because some waveforms (e.g., LORENtz, SINC, etc.) have limited amplitude/offset ranges, these values may not be achievable. In such cases they are limited to by the maximum levels specified by the function tkdpo4k_ConfigureStandardWaveform.
        /// 
        /// SCPI Command:
        /// AFG:LEVELPreset
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePresetLevel(int Preset_Level)
        {
            int pInvokeResult = PInvoke.ConfigurePresetLevel(this._handle, Preset_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the arbitrary function generator additive noise.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Enable_Noise">
        /// Sets the AFG additive noise state. The driver uses this value to set the TKDPO4K_ATTR_FUNC_NOISE_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// SCPI Command:
        /// AFG:NOISEAdd:STATE
        /// </param>
        /// <param name="Noise_Level">
        /// Sets the AFG additive noise level as a percentage. The driver uses this value to set the TKDPO4K_ATTR_FUNC_NOISE_LEVEL attribute.
        /// 
        /// Valid Range:
        /// 0   to  100
        /// 
        /// Default Value: 0
        /// 
        /// Note:
        /// The maximum noise percent is limited when AFG:AMPLitude is greater than 50% of its maximum setting value for the current function.
        /// 
        /// SCPI Command:
        /// AFG:NOISEAdd:PERCent
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureNoise(bool Enable_Noise, int Noise_Level)
        {
            int pInvokeResult = PInvoke.ConfigureNoise(this._handle, System.Convert.ToUInt16(Enable_Noise), Noise_Level);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the arbitrary function generator output state.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Output_Enabled">
        /// Sets the AFG output state. The driver uses this value to set the TKDPO4K_ATTR_OUTPUT_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// SCPI Command:
        /// AFG:OUTPut:STATE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureOutputEnabled(bool Output_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureOutputEnabled(this._handle, System.Convert.ToUInt16(Output_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the arbitrary function generator output load impedance.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Impedance">
        /// Sets the AFG output load impedance. The driver uses this value to set the TKDPO4K_ATTR_OUTPUT_IMPEDANCE attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_FUNC_OUTPUT_IMPEDANCE_FIFTY   -  Fifty
        /// TKDPO4K_VAL_FUNC_OUTPUT_IMPEDANCE_HIGHZ   -  Highz
        /// 
        /// Default Value: TKDPO4K_VAL_FUNC_OUTPUT_IMPEDANCE_HIGHZ
        /// 
        /// SCPI Command:
        /// AFG:OUTPut:LOAd:IMPEDance
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureOutputImpedance(int Impedance)
        {
            int pInvokeResult = PInvoke.ConfigureOutputImpedance(this._handle, Impedance);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the period of the AFG waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Period">
        /// Sets the period of the AFG waveform, in seconds. The driver uses this value to set the TKDPO4K_ATTR_FUNC_PERIOD attribute.
        /// 
        /// Units: second
        /// 
        /// Valid Range: the period value is constrained by the frequency max/min/resolution. Period = 1.0/Frequency.
        /// 
        /// Default Value: 1e-5
        /// 
        /// SCPI Command:
        /// AFG:PERIod
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePeriod(double Period)
        {
            int pInvokeResult = PInvoke.ConfigurePeriod(this._handle, Period);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the duty cycle of the AFG square waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Duty_Cycle">
        /// Sets the AFG duty cycle, as a percentage. The driver uses this value to set the TKDPO4K_ATTR_FUNC_DUTY_CYCLE_HIGH attribute.
        /// 
        /// Valid Range:
        /// 10   to  90
        /// 
        /// Default Value: 50
        /// 
        /// SCPI Command:
        /// AFG:SQUare:DUty
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureSquareDutyCycle(double Duty_Cycle)
        {
            int pInvokeResult = PInvoke.ConfigureSquareDutyCycle(this._handle, Duty_Cycle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the pulse width of the AFG pulse waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Pulse_Width">
        /// Sets the AFG pulse width, in seconds. The driver uses this value to set the TKDPO4K_ATTR_FUNC_PULSE_WIDTH attribute.
        /// 
        /// Units: second
        /// 
        /// Valid Range: Pulse width has an absolute minimum of 10ns and has a relative range of 10% - 90% of the current period setting.
        /// 
        /// Default Value: 1e-6
        /// 
        /// SCPI Command:
        /// AFG:PULse:WIDth
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigurePulseWidth(double Pulse_Width)
        {
            int pInvokeResult = PInvoke.ConfigurePulseWidth(this._handle, Pulse_Width);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the ramp symmetry of the AFG ramp waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Ramp_Symmetry">
        /// Sets the AFG ramp symmetry as a percentage. The driver uses this value to set the TKDPO4K_ATTR_FUNC_RAMP_SYMMETRY attribute.
        /// 
        /// Valid Range:
        /// 0   to  100
        /// 
        /// Default Value: 50
        /// 
        /// SCPI Command:
        /// AFG:RAMP:SYMmetry
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureRampSymmetry(double Ramp_Symmetry)
        {
            int pInvokeResult = PInvoke.ConfigureRampSymmetry(this._handle, Ramp_Symmetry);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function saves the specified waveform to the specified destination reference memory slot, or saves the specified waveform(s) to the specified destination file.
        /// 
        /// SCPI Command:
        /// SAVe:WAVEform
        /// </summary>
        /// <param name="Source">
        /// Specifies the source waveform to save.
        /// 
        /// Valid Values:
        /// CH1-4, REF1-4, MATH - These sources can be saved to REF1-4, an ISF or CSV file. For instruments with the arbitrary waveform feature, these sources can be saved to EMEM (edit memory) with the restriction that MATH and REF1-4 sources must be time domain waveforms.
        /// 
        /// D0-D15 - These digital waveform sources can only be saved to CSV files and, for instruments with the arbitrary waveform feature, to EMEM.
        /// 
        /// EMEM(instruments with the arbitrary waveform feature)  -  EMEM is the arbitrary waveform edit memory. EMEM can be saved to a CSV file or to one of the 4 internal arbitrary waveform storage locations (ARB1-4).
        /// 
        /// ARB1-4 - One of the internal arbitrary waveform storage locations. These sources can only be saved to ARB1-4 or to a CSV file.
        /// 
        /// RF_NORMal, RF_AVErage, RF_MAXHold, RF_MINHold  -  These sources can be saved to REF1-4, an ISF or CSV file.
        /// 
        /// RF_BB_IQ - specifies to save baseband I &amp; Q data.
        /// 
        /// ALL - Specifies all displayed waveforms subject to the restrictions indicated in the note below for saving ALL waveforms.
        /// 
        /// Default Value:
        /// "CH1"
        /// </param>
        /// <param name="Destination">
        /// Specifies the destination to save the waveform.
        /// 
        /// Valid Values:
        /// REF1-4 - For saving a single scope waveform to one of the 4 internal reference waveform memory storage locations.
        /// 
        /// EMEM - For instruments with the arbitrary waveform feature, scope waveforms (CH1-4, MATH, REF1-4, D0-D15) can be saved to arbitrary waveform edit memory. MATH and REF1-4 waveforms can only be time domain.
        /// 
        /// ARB1-ARB4 - For instruments with the arbitrary waveform feature, EMEM can be saved to one of the 4 internal arbitrary waveform memorylocations.
        /// 
        /// &lt;file path&gt; - Specifies the destination file path to save the specified waveform(s).
        /// 
        /// Default Value:
        /// "REF1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int SaveWaveform(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.SaveWaveform(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function recalls a stored waveform to a reference memory location.
        /// 
        /// Notes:
        /// 1. Only the first waveform in a .CSV file is recalled for multiple waveform .CSV files. 
        /// 2. Recall of digital waveforms (D0 through D15) is not supported.
        /// 3. For MDO3000 series models, a saved ARB waveform cannot be recalled to a reference location. It can only be recalled to an EMEM location. However, an AFG waveform can be recalled into either a reference or EMEM location.
        /// 
        /// SCPI Command:
        /// RECAll:WAVEform
        /// </summary>
        /// <param name="Source">
        /// Specifies the source waveform to recall.
        /// 
        /// Valid Values:
        /// &lt;file path&gt; - Specifies an ISF (internal save format) or CSV (comma separated values) file.
        /// 
        /// ARB1-ARB4 - For instruments with the arbitrary waveform feature, the internal arbitrary waveform memory locations ARB1-ARB4 can be recalled to edit memory(EMEM).
        /// 
        /// &lt;QString&gt; is a quoted string that specifies a location for an oscilloscope file.
        /// 
        /// Default Value:
        /// ""
        /// </param>
        /// <param name="Destination">
        /// Specifies the destination to recall the waveform.
        /// 
        /// Valid Values:
        /// REF1-4 -Specifies a reference memory location to receive the saved ISF or CSV data.
        /// 
        /// EMEM - For instruments with the arbitrary waveform feature, specifies arbitrary waveform edit memory (EMEM).
        /// 
        /// Default Value:
        /// "REF1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int RecallWaveform(string Source, string Destination)
        {
            int pInvokeResult = PInvoke.RecallWaveform(this._handle, Source, Destination);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the date and time of the specified arbitrary waveform slot.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Waveform_Slot">
        /// Specifies the arbitrary waveform slot. 
        /// 
        /// Valid Values: "1", "2", "3", "4"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Waveform_Date">
        /// Returns the date that the data in the specified arbitrary waveform slot was saved.
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:ARB&lt;x&gt;:DATE?
        /// </param>
        /// <param name="Waveform_Time">
        /// Returns the time that the data in the specified arbitrary waveform slot was saved.
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:ARB&lt;x&gt;:TIMe?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int QueryArbitraryWaveform(string Waveform_Slot, System.Text.StringBuilder Waveform_Date, System.Text.StringBuilder Waveform_Time)
        {
            int pInvokeResult = PInvoke.QueryArbitraryWaveform(this._handle, Waveform_Slot, Waveform_Date, Waveform_Time);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function queries the currently selected arbitrary waveform pre-defined function and the point number in the AFB arbitrary waveform edit memory.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Function">
        /// Returns the currently selected arbitrary waveform pre-defined function.
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:EMEM:FUNCtion?
        /// </param>
        /// <param name="Point_Number">
        /// Returns the number of points in the AFB arbitrary waveform edit memory.
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:EMEM:NUMPoints?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int QueryEditedArbitraryWaveform(System.Text.StringBuilder Function, out int Point_Number)
        {
            int pInvokeResult = PInvoke.QueryEditedArbitraryWaveform(this._handle, Function, out Point_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the waveform label for arbitrary waveform slots 1-4.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Waveform_Slot">
        /// Specifies the arbitrary waveform slot. 
        /// 
        /// Valid Values: "1", "2", "3", "4"
        /// 
        /// Default Value: "1"
        /// </param>
        /// <param name="Label">
        /// Sets the waveform label for arbitrary waveform slots 1- 4. The driver uses this value to set the TKDPO4K_ATTR_ARB_WAVEFORM_LABEL attribute.
        /// 
        /// Default Value: ""
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:ARB&lt;x&gt;:LABel
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureWaveformLabel(string Waveform_Slot, string Label)
        {
            int pInvokeResult = PInvoke.ConfigureWaveformLabel(this._handle, Waveform_Slot, Label);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function generates the arbitrary waveform function.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed. 
        /// 
        /// SCPI Command:
        /// AFG:ARBitrary:EMEM:GENerate
        /// </summary>
        /// <param name="Function">
        /// Sets the function to generate.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_WFM_SINE   -  Waveform Sine
        /// TKDPO4K_VAL_WFM_SQUARE   -  Waveform Square
        /// TKDPO4K_VAL_WFM_PULSE   -  Waveform Pulse
        /// TKDPO4K_VAL_WFM_RAMP   -  Waveform Ramp
        /// TKDPO4K_VAL_WFM_NOISE   -  Waveform Noise
        /// 
        /// Default Value: TKDPO4K_VAL_WFM_SINE
        /// </param>
        /// <param name="Point_Number">
        /// Sets the number of points in the AFB arbitrary waveform edit memory.
        /// 
        /// Valid Range:
        /// 2   to  131072
        /// 
        /// Default Value:
        /// 100
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int GenerateArbWaveformFunction(int Function, int Point_Number)
        {
            int pInvokeResult = PInvoke.GenerateArbWaveformFunction(this._handle, Function, Point_Number);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function creates an arbitrary waveform and returns a handle that identifies that waveform.  You pass this handle to the tkdpo4k_ConfigureArbWaveform function to configure that waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed. 
        /// </summary>
        /// <param name="Size">
        /// Passes the size of the arbitrary waveform you want create.
        /// 
        /// Valid Range:
        /// 2 to 131072
        /// 
        /// Default Value:
        /// None
        /// </param>
        /// <param name="Data">
        /// Specifies the array of data you want to use for the new arbitrary waveform. The array must have at least as many elements as the value you specify in the Size parameter.
        /// 
        /// Default Value: None
        /// 
        /// Note:
        /// You must normalize the data points in the array to be between -1.00 and +1.00.
        /// </param>
        /// <param name="Handle">
        /// Returns the handle that identifies the new arbitrary waveform.  You pass this handle to the tkdpo4k_ConfigureArbWaveform function to generate the arbitrary waveform.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int CreateArbWaveform(int Size, double[] Data, out int Handle)
        {
            int pInvokeResult = PInvoke.CreateArbWaveform(this._handle, Size, Data, out Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the arbitrary waveform.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Handle">
        /// Passes the handle of the arbitrary waveform you want the function generator to produce.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Amplitude">
        /// Sets the amplitude in volts, peak to peak. The driver uses this value to set the TKDPO4K_ATTR_FUNC_AMPLITUDE attribute.
        /// 
        /// Units: V
        /// 
        /// Valid Range:
        /// Fifty Load Impedance:  0.01 to 2.5
        /// Highz Load Impedance: 0.02 to 5
        /// 
        /// Default Value: 0.5
        /// 
        /// SCPI Command:
        /// AFG:AMPLitude
        /// </param>
        /// <param name="Offset">
        /// Sets the offset value, in volts. The driver uses this value to set the TKDPO4K_ATTR_FUNC_DC_OFFSET attribute.
        /// 
        /// Units: V
        /// 
        /// Valid Range:
        /// Fifty Load Impedance: -1.25   to  1.25
        /// Highz Load Impedance: -2.5   to  2.5
        /// 
        /// Default Value: 0
        /// 
        /// SCPI Command:
        /// AFG:OFFSet
        /// </param>
        /// <param name="Frequency">
        /// Sets the frequency, in Hz. The driver uses this value to set the TKDPO4K_ATTR_FUNC_FREQUENCY attribute.
        /// 
        /// Units: Hz
        /// 
        /// Valid Range:
        /// 0.1 to 2.5e7
        /// 
        /// Default Value: 1e5
        /// 
        /// SCPI Command:
        /// AFG:FREQuency
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureArbWaveform(int Handle, double Amplitude, double Offset, double Frequency)
        {
            int pInvokeResult = PInvoke.ConfigureArbWaveform(this._handle, Handle, Amplitude, Offset, Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function removes a previously created arbitrary waveform from the function generator's memory and invalidates the waveform's handle.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Handle">
        /// Passes the handle of the arbitrary waveform you want the function generator to remove.  You create multiple arbitrary waveforms using the tkdpo4k_CreateArbWaveform function.  The tkdpo4k_CreateArbWaveform function returns a handle that you use to identify each waveform.
        ///     
        /// Default Value: None
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ClearArbWaveform(int Handle)
        {
            int pInvokeResult = PInvoke.ClearArbWaveform(this._handle, Handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the event.
        /// 
        /// Note:
        /// This function is only available for MDO3000 Series.
        /// </summary>
        /// <param name="Event_Type">
        /// Specifies which event to act on when using an Act on Event command. The driver uses this value to set the TKDPO4K_ATTR_EVENT_TRIGGER_TYPE attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_EVENT_TRIGGER_TYPE_NONE   -  None
        /// TKDPO4K_VAL_EVENT_TRIGGER_TYPE_TRIGGER   -  Trigger
        /// TKDPO4K_VAL_EVENT_TRIGGER_TYPE_ACQCOMPLETE   -  Acquisition Complete
        /// 
        /// Default Value: TKDPO4K_VAL_EVENT_TRIGGER_TYPE_NONE
        /// 
        /// SCPI Command:
        /// ACTONEVent:EVENTTYPe
        /// </param>
        /// <param name="Acquisition_Number">
        /// Sets the number of acquisitions to complete for the event type ACQCOMPLete. The driver uses this value to set the TKDPO4K_ATTR_ACQUISITION_NUMBER attribute.
        /// 
        /// Valid Range:
        /// 1   to  1000000
        /// 
        /// Default Value: 1
        /// 
        /// SCPI Command:
        /// ACTONEVent:NUMACQs
        /// </param>
        /// <param name="Repeat_Count">
        /// Sets the number of events to run. The driver uses this value to set the TKDPO4K_ATTR_EVENT_REPEAT_COUNT attribute.
        /// 
        /// Valid Range:
        /// 1   to  1000001
        /// 
        /// Default Value: 1
        /// 
        /// Note:
        /// 1000001 set the count to infinite. 
        /// 
        /// SCPI Command:
        /// ACTONEVent:REPEATCount
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureEvent(int Event_Type, int Acquisition_Number, int Repeat_Count)
        {
            int pInvokeResult = PInvoke.ConfigureEvent(this._handle, Event_Type, Acquisition_Number, Repeat_Count);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the event action state.
        /// 
        /// Note:
        /// This function is only available for MDO3000 Series.
        /// 
        /// SCPI Command:
        /// ACTONEVent:ACTION:AUXOUT:STATE
        /// ACTONEVent:ACTION:PRINT:STATE
        /// ACTONEVent:ACTION:SAVEIMAGE:STATE
        /// ACTONEVent:ACTION:SAVEWFM:STATE
        /// ACTONEVent:ACTION:SRQ:STATE
        /// ACTONEVent:ACTION:STOPACQ:STATE
        /// </summary>
        /// <param name="Event_Action">
        /// Specifies the event action.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_EVENT_ACTION_AUXOUT   -  Auxiliary Out
        /// TKDPO4K_VAL_EVENT_ACTION_PRINT   -  Print
        /// TKDPO4K_VAL_EVENT_ACTION_SAVE_IMAGE   -  Save Image
        /// TKDPO4K_VAL_EVENT_ACTION_SAVE_WAVEFORM   -  Save Waveform
        /// TKDPO4K_VAL_EVENT_ACTION_SRQ   -  Service Request
        /// TKDPO4K_VAL_EVENT_ACTION_STOP_ACQ   -  Stop Acquisition
        /// 
        /// Default Value: TKDPO4K_VAL_EVENT_ACTION_AUXOUT
        /// </param>
        /// <param name="Event_Enabled">
        /// Enables or disables the event action.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureEventEnabled(int Event_Action, bool Event_Enabled)
        {
            int pInvokeResult = PInvoke.ConfigureEventEnabled(this._handle, Event_Action, System.Convert.ToUInt16(Event_Enabled));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the Digital Voltmeter measurements and history.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires option MDO3DVM to be installed.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ResetDigitalVoltmeter()
        {
            int pInvokeResult = PInvoke.ResetDigitalVoltmeter(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function configures the Digital Voltmeter.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires the MDO3AFG option to be installed.
        /// </summary>
        /// <param name="Type">
        /// Sets the mode to use for the Digital Voltmeter. The driver uses this value to set the TKDPO4K_ATTR_DVM_TYPE attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_DVM_TYPE_ACRMS   -  ACRMS
        /// TKDPO4K_VAL_DVM_TYPE_ACDCRMS   -  ACDCRMS
        /// TKDPO4K_VAL_DVM_TYPE_DC   -  DC
        /// TKDPO4K_VAL_DVM_TYPE_FREQUENCY   -  Frequency
        /// TKDPO4K_VAL_DVM_TYPE_OFF   -  Off
        /// 
        /// Default Value: TKDPO4K_VAL_DVM_TYPE_OFF
        /// 
        /// SCPI Command:
        /// DVM:MODe
        /// </param>
        /// <param name="Source">
        /// Sets the source for the Digital Voltmeter: Channel 1 - 4. The driver uses this value to set the TKDPO4K_ATTR_DVM_SOURCE attribute.
        /// 
        /// Valid Values:
        /// TKDPO4K_VAL_DVM_SOURCE_CH1   -  Channel1
        /// TKDPO4K_VAL_DVM_SOURCE_CH2   -  Channel2
        /// TKDPO4K_VAL_DVM_SOURCE_CH3   -  Channel3
        /// TKDPO4K_VAL_DVM_SOURCE_CH4   -  Channel4
        /// 
        /// Default Value: TKDPO4K_VAL_DVM_SOURCE_CH1
        /// 
        /// SCPI Command:
        /// DVM:SOUrce
        /// </param>
        /// <param name="Auto_Range">
        /// Sets the auto range state for the Digital Voltmeter. The driver uses this value to set the TKDPO4K_ATTR_DVM_RANGE_AUTO_ENABLED attribute.
        /// 
        /// Valid Values:
        /// VI_TRUE  - Enable
        /// VI_FALSE - Disable
        /// 
        /// Default Value: VI_FALSE
        /// 
        /// SCPI Command:
        /// DVM:AUTORange
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ConfigureDigitalVoltmeter(int Type, int Source, bool Auto_Range)
        {
            int pInvokeResult = PInvoke.ConfigureDigitalVoltmeter(this._handle, Type, Source, System.Convert.ToUInt16(Auto_Range));
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the current value and frequency for the Digital Voltmeter.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires option MDO3DVM to be installed.
        /// </summary>
        /// <param name="Value">
        /// Returns the Digital Voltmeter value.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:VALue?
        /// </param>
        /// <param name="Frequency">
        /// Returns the current frequency value for the Digital Voltmeter.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:FREQuency?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadDigitalVoltmeter(out double Value, out double Frequency)
        {
            int pInvokeResult = PInvoke.ReadDigitalVoltmeter(this._handle, out Value, out Frequency);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the readout value for the Digital Voltmeter function over the history period.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires option MDO3DVM to be installed.
        /// </summary>
        /// <param name="Average">
        /// Returns the average readout value for the Digital Voltmeter function over the history period.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:HIStory:AVErage?
        /// </param>
        /// <param name="Maximum">
        /// Returns the maximum readout value for the DVM function over the history period.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:HIStory:MAXimum?
        /// </param>
        /// <param name="Minimum">
        /// Returns the minimum readout value for the DVM function over the history period.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:HIStory:MINImum?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadHistoryDVM(out double Average, out double Maximum, out double Minimum)
        {
            int pInvokeResult = PInvoke.ReadHistoryDVM(this._handle, out Average, out Maximum, out Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the maximum and minimum DVM readout value over the entire time that the DVM has been on since the last change using ConfigureDigitalVoltmeter or ResetDigitalVoltmeter.
        /// 
        /// Notes:
        /// 1. This function is only available for MDO3000 Series.
        /// 2. Requires option MDO3DVM to be installed.
        /// </summary>
        /// <param name="Maximum">
        /// Returns the maximum readout value of the DVM function over the entire time.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:INFMAXimum?
        /// </param>
        /// <param name="Minimum">
        /// Returns the minimum readout value of the DVM function over the entire time.
        /// 
        /// SCPI Command:
        /// DVM:MEASUrement:INFMINimum?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// </returns>
        public int ReadStatisticsDVM(out double Maximum, out double Minimum)
        {
            int pInvokeResult = PInvoke.ReadStatisticsDVM(this._handle, out Maximum, out Minimum);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function automatically configures the instrument.
        /// 
        /// Note: When you call this function, the oscilloscope senses the input signal and automatically configures many of the instrument settings. The settings no longer match the cache values for the corresponding attributes. Therefore, this function invalidates all attribute cache values.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int AutoSetup()
        {
            int pInvokeResult = PInvoke.AutoSetup(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sets the buffer size used in reading waveforms. The tkdpo4k_ReadWaveform, tkdpo4k_FetchWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_FetchMinMaxWaveform functions use this attribute to set the buffer size used to fetch waveforms. 
        /// 
        /// Notes: 
        /// 
        /// (1) Enlarging the buffer size is helpful to enhance the waveform-fetching speed. Call this function and adjust the buffer size before calling the tkdpo4k_ReadWaveform, tkdpo4k_FetchWaveform, tkdpo4k_ReadMinMaxWaveform, and tkdpo4k_FetchMinMaxWaveform functions.
        /// 
        /// (2) Adjust the buffer size according to the waveform size. If you have a large waveform size and have a small buffer size, enlarging the buffer size is useful for increasing the speed. But if the buffer size is equal to or even bigger than the waveform size, you cannot increase the speed by enlarging the buffer size.
        /// 
        /// (3) If you are not critical about the waveform-fetching speed, use the default value.
        /// </summary>
        /// <param name="Buffer_Size">
        /// Passes the buffer size used in reading waveform. 
        /// 
        /// Valid Ranges:   
        /// MIN_FETCH_BUFFER_SIZE (1000) ~ MAX_FETCH_BUFFER_SIZE (1000000)
        /// 
        /// Default Value: 10000
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ConfigureWfmBufferSize(int Buffer_Size)
        {
            int pInvokeResult = PInvoke.ConfigureWfmBufferSize(this._handle, Buffer_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, and returns the waveform for the channel you specify. You call the tkdpo4k_FetchWaveform function to obtain the waveforms for each of the remaining enabled channels without initiating another acquisition.
        /// 
        /// Note: After this function executes, each element in the Waveform Array parameter is a voltage.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Waveform_Size">
        /// Passes the number of elements in the Waveform Array parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Passes the maximum length of time in which to allow the read waveform operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the TKDPO4K_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code. When this occurs, you can call tkdpo4k_Abort to cancel the read waveform operation and return the oscilloscope to the Idle state.
        /// 
        /// Units: milliseconds.  
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Note: The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Waveform_Array">
        /// Returns the waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel. Pass a ViReal64 array with at least this many elements.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// 
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Waveform Array parameter.
        /// 
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Waveform Array. The time is relative to the trigger event.  
        /// 
        /// For example, if the oscilloscope acquires the first point in the Waveform Array 1 second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// 
        /// Units: seconds
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Waveform Array.  
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ReadWaveform(string Channel_Name, int Waveform_Size, int Maximum_Time__ms_, double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.ReadWaveform(this._handle, Channel_Name, Waveform_Size, Maximum_Time__ms_, Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, and returns the min/max waveforms for the channel you specify. You call the tkdpo4k_FetchMinMaxWaveform function to obtain the min/max waveforms for each of the remaining enabled channels without initiating another acquisition.
        /// 
        /// Use this function to read waveforms when you set the acquisition type to TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Min Waveform Array and Max Waveform Array parameters is either a voltage or a value indicating that the oscilloscope cannot sample a voltage.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Min Waveform Array or the Max Waveform Array to an IEEE-defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Min Waveform Array parameter and the Max Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Waveform_Size">
        /// Passes the number of elements in the Min Waveform Array and Max Waveform Array parameters.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Passes the maximum length of time in which to allow the read waveform operation to complete.  
        /// 
        /// If the operation does not complete within this time interval, the function returns the TKDPO4K_ERROR_MAX_TIME_EXCEEDED error code. When this occurs, you can call tkdpo4k_Abort to cancel the read waveform operation and return the oscilloscope to the Idle state.
        /// 
        /// Units: milliseconds  
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Note: The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Min_Waveform_Array">
        /// Returns the minimum waveform that the oscilloscope acquires.
        /// 
        /// Units: volts
        /// 
        /// Note: The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel. Pass a ViReal64 array with at least this many elements.
        /// </param>
        /// <param name="Max_Waveform_Array">
        /// Returns the maximum waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Note: The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel. Pass a ViReal64 array with at least this many elements.
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Min Waveform Array and Max Waveform Array parameters.
        /// 
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Min Waveform Array and Max Waveform Array. The time is relative to the trigger event.  
        /// 
        /// Units: seconds  
        /// 
        /// For example, if the oscilloscope acquires the first point in the waveforms 1 second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Min Waveform Array and Max Waveform Array.
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadMinMaxWaveform(string Channel_Name, int Waveform_Size, int Maximum_Time__ms_, double[] Min_Waveform_Array, double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.ReadMinMaxWaveform(this._handle, Channel_Name, Waveform_Size, Maximum_Time__ms_, Min_Waveform_Array, Max_Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value.  You specify a particular measurement type, such as rise time, frequency, and voltage peak-to-peak. You can call the tkdpo4k_FetchWaveformMeasurement function separately for any other waveform measurement that you want to obtain on a specific channel without initiating another acquisition.
        /// 
        /// Notes:
        /// 
        /// (1) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.
        /// 
        /// (2) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.
        /// 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF
        ///   TKDPO4K_ATTR_MEAS_LOW_REF
        ///   TKDPO4K_ATTR_MEAS_MID_REF
        /// 
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Measurement_Function">
        /// Passes the waveform measurement you want the oscilloscope to perform.
        /// 
        /// Defined Values:
        /// 
        /// - TKDPO4K_VAL_RISE_TIME   (0):  The time it takes the rising
        ///   edge of the first pulse to rise from the value of
        ///   TKDPO4K_ATTR_MEAS_LOW_REF to the value of 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF.
        /// 
        /// - TKDPO4K_VAL_FALL_TIME   (1):  The time it takes the falling
        ///   edge of the first pulse to fall from the value of
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF to the value of 
        ///   TKDPO4K_ATTR_MEAS_LOW_REF.
        /// 
        /// - TKDPO4K_VAL_FREQUENCY   (2):  The number of cycles that occur
        ///   in one second.
        /// 
        /// - TKDPO4K_VAL_PERIOD      (3):  The time it takes for the first
        ///   complete signal cycle to occur.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_RMS (4):  View the true Root Mean Square
        ///   voltage.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_PEAK_TO_PEAK (5):  The absolute
        ///   difference between the maximum and minimum amplitudes.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_MAX (6):  Obtains the most positive peak
        ///   voltage in the waveform.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_MIN (7):  Obtains the most negative peak
        ///   voltage in the waveform.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_HIGH (8):  Obtains the highest voltage
        ///   value calculated. If you use the min-max setup method, the
        ///   value calculated is the same as the maximum value. If you use
        ///   the histogram method, it is the value that occurs most
        ///   frequently above the mid point.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_LOW (9):  Obtains the lowest voltage
        ///   value calculated. If you use the min-max setup method, its the
        ///   same as the minimum value. If you use the histogram method, it
        ///   is the value that occurs most frequently below the mid point."
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_AVERAGE (10):  Calculate the Arithmetic
        ///   mean over the entire waveform.
        /// 
        /// - TKDPO4K_VAL_WIDTH_NEG (11):  Obtains the time between the
        ///   crossings by the first negative pulse of the value of the
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF attribute.
        /// 
        /// - TKDPO4K_VAL_WIDTH_POS (12):  Obtains the time between the
        ///   crossings by the first positive pulse of the value of the
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF attribute.
        /// 
        /// - TKDPO4K_VAL_DUTY_CYCLE_NEG (13):  Obtains as a percentage the
        ///   ratio of the first negative pulse width to the signal period.
        /// 
        /// - TKDPO4K_VAL_DUTY_CYCLE_POS (14):  Obtains as a percentage the
        ///   ratio of the first positive pulse width to the signal period."
        /// 
        /// - TKDPO4K_VAL_AMPLITUDE (15):  Obtains the difference of the
        ///   high voltage value and the low voltage value.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_CYCLE_RMS (16):  Obtains the true Root
        ///   Mean Square voltage for one cycle of a periodic signal.  The
        ///   oscilloscope defines a cycle as the part of the waveform that
        ///   goes from the first to the third crossing of the value of
        ///   TKDPO4K_ATTR_MEAS_MID_REF.  For more complex or non-periodic
        ///   waveforms, use TKDPO4K_VAL_VOLTAGE_RMS.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_CYCLE_AVERAGE (17):  Calculates the
        ///   Arithmetic mean over one cycle of a periodic signal.  The
        ///   oscilloscope defines a cycle as the part of the waveform that
        ///   goes from the first to the third crossing of the value of
        ///   TKDPO4K_ATTR_MEAS_MID_REF.  For more complex or non-periodic
        ///   waveforms, use TKDPO4K_VAL_VOLTAGE_AVERAGE.
        /// 
        /// - TKDPO4K_VAL_POSITIVE_OVERSHOOT (18):  Obtains as a
        ///   percentage the ratio of the difference of the maximum and high
        ///   voltage values to the amplitude.
        /// 
        /// - TKDPO4K_VAL_NEGATIVE_OVERSHOOT (1001):  Obtains as a
        ///   percentage the ratio of the difference of the low and minimum
        ///   voltage values to the amplitude.
        /// 
        /// - TKDPO4K_VAL_TIMING_BURST_WIDTH (1002):  Obtains the time from
        ///   the first crossing to the last crossing of the middle
        ///   reference value by the waveform specified by
        ///   TKDPO4K_ATTR_MEAS_SOURCE.
        /// 
        /// - TKDPO4K_VAL_AREA (1005):  The voltage over time, The area over 
        ///   the entire waveform or gated region. The area measured above 
        ///   the ground is positive, while the area below ground is 
        ///   negative. The units are volt-seconds. 
        ///                                            
        /// - TKDPO4K_VAL_CYCLE_AREA (1006):  The voltage over time, The 
        ///   area over the first cycle in the waveform or the first cycle 
        ///   in the gated region. The area measured above the common 
        ///   reference point is positive, while the area below the common 
        ///   reference point is negative. The units are volt-seconds.                     
        /// 
        /// - TKDPO4K_VAL_CROSS_NEG (1007):  The time from the trigger point 
        ///   to the first falling edge of the waveform or gated region. The 
        ///   time is measured at the middle reference amplitude point of 
        ///   the signal. The units are seconds.                     
        /// 
        /// - TKDPO4K_VAL_CROSS_POS (1008):  The time from the trigger 
        ///   point to the first positive edge of the waveform or gated 
        ///   region. The time is measured at the middle reference amplitude 
        ///   point of the signal. The units are seconds.
        /// 
        /// - TKDPO4K_VAL_EDGE_POS (1009): The positive edge count.
        /// 
        /// - TKDPO4K_VAL_EDGE_NEG (1010): The negative edge count.
        /// 
        /// - TKDPO4K_VAL_PULSE_POS (1011): The positive pulse count.
        /// 
        /// - TKDPO4K_VAL_PULSE_NEG (1012): The negative pulse count.                     
        /// 
        /// Default Value: TKDPO4K_VAL_RISE_TIME  
        /// 
        /// Notes:
        /// 
        /// (1) Timing measurements on eye diagrams produce unreliable results; use edge triggering to obtain a single-valued waveform.
        /// 
        /// (2) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.
        /// 
        /// (3) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.
        /// 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF
        ///   TKDPO4K_ATTR_MEAS_LOW_REF
        ///   TKDPO4K_ATTR_MEAS_MID_REF
        /// 
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Passes the maximum length of time in which to allow the read waveform measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the TKDPO4K_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code. When this occurs, you can call tkdpo4k_Abort to cancel the read waveform operation and return the oscilloscope to the Idle state.
        /// 
        /// Units: milliseconds  
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Note: The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Measurement">
        /// Returns the measured value.  
        /// 
        /// Units: The units depend on the Measurement Function you select as shown below.
        /// 
        ///     Rise Time            - seconds
        ///     Fall Time            - seconds
        ///     Frequency            - hertz
        ///     Period               - seconds
        ///     Voltage RMS          - volts
        ///     Voltage RMS (Cycle)  - volts
        ///     Voltage Max          - volts
        ///     Voltage Min          - volts
        ///     Voltage Vpp          - volts
        ///     Voltage High         - volts
        ///     Voltage Low          - volts
        ///     Voltage Avg.         - volts
        ///     Voltage Avg. (Cycle) - volts
        ///     Width Negative       - seconds
        ///     Width Positive       - seconds
        ///     Duty Cycle Negative  - percent
        ///     Duty Cycle Positive  - percent
        ///     Amplitude            - volts
        ///     Area                 - volt-seconds
        ///     Cycle Area           - volt-seconds
        ///     Negative Cross       - seconds
        ///     Positive Cross       - seconds
        ///                   
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ReadWaveformMeasurement(string Channel_Name, int Measurement_Function, int Maximum_Time__ms_, out double Measurement)
        {
            int pInvokeResult = PInvoke.ReadWaveformMeasurement(this._handle, Channel_Name, Measurement_Function, Maximum_Time__ms_, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a new waveform acquisition and returns a phase measurement.
        /// </summary>
        /// <param name="Measure_Source_1">
        /// Passes the channel name for which to read a waveform measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_HISTOGRAM    ("HIS")     - Histogram
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: 
        /// You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measure_Source_2">
        /// Passes the channel name to measure "to" for phase immediate measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_2
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Passes the maximum length of time in which to allow the read waveform measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the TKDPO4K_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code. When this occurs, you can call tkdpo4k_Abort to cancel the read waveform operation and return the oscilloscope to the Idle state.
        /// 
        /// Units: milliseconds  
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Note: The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Measurement">
        /// Returns the phase measured value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ReadPhaseMeasurement(string Measure_Source_1, string Measure_Source_2, int Maximum_Time__ms_, out double Measurement)
        {
            int pInvokeResult = PInvoke.ReadPhaseMeasurement(this._handle, Measure_Source_1, Measure_Source_2, Maximum_Time__ms_, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the total channel power within specified bandwidth according to current RF measurement type. 
        /// 
        /// Only available when RF Measurement Type is not None.
        /// You can use ConfigureRFMeasurement function to change measurement type.
        /// </summary>
        /// <param name="RF_Channel_Power">
        /// The total channel power within specified bandwidth according to current RF measurement type. 
        /// 
        /// Returns the total channel power within the displayed channel
        /// bandwidth, when the RF measurement type has been set to CP.
        /// Returns the total channel power within the occupied bandwidth,
        /// when the RF measurement type has been set to OBW.
        /// 
        /// </param>
        /// <param name="Unit">
        /// The power unit of the total channel power.
        /// 
        /// 0: DBM
        /// 1: DBUW
        /// 2: DBMU
        /// 3: DBUV
        /// 4: DBMA
        /// 5: DBUA
        /// 6: DBUV
        /// </param>
        /// <param name="ACPR">
        /// Adjacent Channel Power Ratio. The ratio of channel power between two user-selected channels (a side channel and a main channel).
        /// 
        /// Only available when Measurement Type is set to ACPR.
        /// </param>
        /// <param name="ACPR_Adjacent_Channel">
        /// The instrument measures a ratio between an adjacent side channel and the Main channel when performing ACPR measurements.
        /// This value specifies the adjacent side channel. 
        /// Lower Area 1, 2 and 3 would be on the left side of the Main channel; Upper Area 1, 2 and 3 would be on the right side
        /// 
        /// Valid Values:
        /// Lower Area 1 : "LA1"
        /// Lower Area 2 : "LA2"
        /// Lower Area 3 : "LA3"
        /// Upper Area 1 : "UA1"
        /// Upper Area 2 : "UA2"
        /// Upper Area 3 : "UA3"
        /// 
        /// Default Value:
        /// "LA1"
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ReadFreqDomainMeasurement(out double RF_Channel_Power, out int Unit, out double ACPR, string ACPR_Adjacent_Channel)
        {
            int pInvokeResult = PInvoke.ReadFreqDomainMeasurement(this._handle, out RF_Channel_Power, out Unit, out ACPR, ACPR_Adjacent_Channel);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a new waveform acquisition and returns a delay measurement.
        /// </summary>
        /// <param name="Measure_Source_1">
        /// Passes the channel name for which to read a waveform measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_HISTOGRAM    ("HIS")     - Histogram
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: 
        /// You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measure_Source_2">
        /// Passes the channel name to measure "to" for delay immediate measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_2
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Delay_Edge_1">
        /// Specifies the slope of the edge the oscilloscope uses for the delay "from" waveform when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_EDGE_RISE (1)
        /// - TKDPO4K_VAL_DEL_EDGE_FALL (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_EDGE_RISE
        /// </param>
        /// <param name="Delay_Edge_2">
        /// Specifies the slope of the edge the oscilloscope uses for the delay "to" waveform when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_EDGE_RISE (1)
        /// - TKDPO4K_VAL_DEL_EDGE_FALL (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_EDGE_RISE
        /// </param>
        /// <param name="Delay_Direction">
        /// Specifies the starting point and direction that determines the delay "to" edge when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_DIR_BACKWARD (1)
        /// - TKDPO4K_VAL_DEL_DIR_FORWARD  (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_DIR_BACKWARD
        /// </param>
        /// <param name="Maximum_Time__ms_">
        /// Passes the maximum length of time in which to allow the read waveform measurement operation to complete.    
        /// 
        /// If the operation does not complete within this time interval, the function returns the TKDPO4K_ERROR_MAX_TIME_EXCEEDED (0xBFFA2003) error code. When this occurs, you can call tkdpo4k_Abort to cancel the read waveform operation and return the oscilloscope to the Idle state.
        /// 
        /// Units: milliseconds  
        /// 
        /// Default Value: 5000 (ms)
        /// 
        /// Note: The Maximum Time parameter applies only to this function.  It has no effect on other timeout parameters or attributes.
        /// </param>
        /// <param name="Measurement">
        /// Returns the delay measured value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int ReadDelayMeasurement(string Measure_Source_1, string Measure_Source_2, int Delay_Edge_1, int Delay_Edge_2, int Delay_Direction, int Maximum_Time__ms_, out double Measurement)
        {
            int pInvokeResult = PInvoke.ReadDelayMeasurement(this._handle, Measure_Source_1, Measure_Source_2, Delay_Edge_1, Delay_Edge_2, Delay_Direction, Maximum_Time__ms_, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the requested snapshot measurement value from the last snapshot.
        /// </summary>
        /// <param name="Snapshot_Meas_Value">
        /// Read the requested snapshot measurement value from the last snapshot. The driver uses this value to set the TKDPO4K_ATTR_SNAPSHOT_MEAS_VALUE attribute.
        /// 
        /// SCPI Command:
        /// :MEASUrement:SNAPShot:TOVershoot?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ReadSnapshotMeasurement(out double Snapshot_Meas_Value)
        {
            int pInvokeResult = PInvoke.ReadSnapshotMeasurement(this._handle, out Snapshot_Meas_Value);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the RF versus time bandwidth.
        /// </summary>
        /// <param name="Versus_Time_Bandwidth">
        /// Returns the RF versus time bandwidth.
        /// 
        /// Units: Hz
        /// 
        /// SCPI Command:
        /// :RF:RF_V_TIMe:BANDWidth?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ReadRFVersusBandwidth(out double Versus_Time_Bandwidth)
        {
            int pInvokeResult = PInvoke.ReadRFVersusBandwidth(this._handle, out Versus_Time_Bandwidth);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads the time in the spectrogram.
        /// </summary>
        /// <param name="Seconds_Num">
        /// Returns the number of seconds in the spectrogram since continuous acquisition started. The driver uses this value to set the TKDPO4K_ATTR_RF_SPECTROGRAM_SECONDS_NUM attribute.
        /// 
        /// SCPI Command:
        /// :RF:SPECTRogram:TIMe
        /// </param>
        /// <param name="Time_Stamp">
        /// Returns the time stamp of the selected spectrogram slice, as specified by :RF:SPECTRogram:SLICESELect. The driver uses this value to set the TKDPO4K_ATTR_RF_SPECTROGRAM_TIME_STAMP attribute.
        /// 
        /// SCPI Command:
        /// :RF:SPECTRogram:SLICETIMe?
        /// </param>
        /// <returns>
        /// Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function. To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status codes is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources. The following table defines the ranges of additional status codes that this driver can return. The table lists the different files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ReadSpectrogramTime(out int Seconds_Num, out int Time_Stamp)
        {
            int pInvokeResult = PInvoke.ReadSpectrogramTime(this._handle, out Seconds_Num, out Time_Stamp);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates a waveform acquisition. After you call this function, the oscilloscope leaves the Idle state and waits for a trigger. The oscilloscope acquires a waveform for each channel you have enabled with the tkdpo4k_ConfigureChannel function.
        /// 
        /// Notes:
        /// 
        /// (1) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// 
        /// (2)  When the MATH channel is enabled, any waveform acquisition contains a one-second delay counter to allow for the instrument to settle its calculations on the channel.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int InitiateAcquisition()
        {
            int pInvokeResult = PInvoke.InitiateAcquisition(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns whether an acquisition is in progress, complete, or if the status is unknown.
        /// 
        /// Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Acquisition_Status">
        /// Returns the acquisition status of the oscilloscope. Possible values that this parameter returns are:
        /// 
        /// - TKDPO4K_VAL_ACQ_IN_PROGRESS (0) - The oscilloscope 
        ///   is currently acquiring a waveform.
        /// 
        /// - TKDPO4K_VAL_ACQ_COMPLETE (1) - The acquisition
        ///   is complete.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int AcquisitionStatus(out int Acquisition_Status)
        {
            int pInvokeResult = PInvoke.AcquisitionStatus(this._handle, out Acquisition_Status);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function sends a command to trigger the oscilloscope.  
        /// 
        /// Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ForceTrigger()
        {
            int pInvokeResult = PInvoke.ForceTrigger(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the waveform the oscilloscope acquires for the channel you specify. The waveform is from a previously initiated acquisition.  
        /// 
        /// The tkdpo4k_InitiateAcquisition starts an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You must call this function separately for each enabled channel to obtain the waveforms.
        /// 
        /// You can call the tkdpo4k_ReadWaveform function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadWaveform function starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the waveform for the channel you specify. You call this function to obtain the waveforms for each of the remaining channels.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Waveform Array parameter is either a voltage or a value indicating that the oscilloscope could not sample a voltage.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Waveform Array to an IEEE-defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// 
        /// (4) This function does not check the instrument status.   Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// 
        /// (5) In the single sequence mode, you use this function according to the IVI specification statement. In the continuous mode, after the first time you call the tkdpo4k_InitiateAcquisition function, you can call this function continuously without initiating acquisition each time for enhancing the waveform-fetching speed. But there is no guarantee that each waveform you fetched is always a new acquired one. Also you cannot modify other configuration during the period of waveform fetching. Otherwise, you need to call the tkdpo4k_InitiateAcquisition function again to make the new configuration valid in this function.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Waveform_Size">
        /// Passes the number of elements in the Waveform Array parameter.
        /// 
        /// Default Value: None
        /// 
        /// 
        /// </param>
        /// <param name="Waveform_Array">
        /// Returns the waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel and passes a ViReal64 array with at least this many elements.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Waveform Array parameter.
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Waveform Array. The time is relative to the trigger event.  
        /// 
        /// For example, if the oscilloscope acquires the first point in the Waveform Array one second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// 
        /// Units: seconds
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Waveform Array.  
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FetchWaveform(string Channel_Name, int Waveform_Size, double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.FetchWaveform(this._handle, Channel_Name, Waveform_Size, Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the minimum and maximum waveforms that the oscilloscope acquires for the channel you specify. The waveforms are from a previously initiated acquisition. Use this function to fetch waveforms when you set the acquisition type to TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.
        /// 
        /// The tkdpo4k_InitiateAcquisition function starts an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires the min/max waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You must call this function separately for each enabled channel to obtain the min/max waveforms.
        /// 
        /// You can call the tkdpo4k_ReadMinMaxWaveform function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadMinMaxWaveform function starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the min/max waveforms for the channel you specify. You call this function to obtain the min/max waveforms for each of the remaining channels.
        /// 
        /// Notes:
        /// 
        /// (1) After this function executes, each element in the Min Waveform Array and Max Waveform Array parameters is a voltage.
        /// 
        /// (2) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// 
        /// (3) In the single sequence mode, you use this function according to the IVI specification statement. In the continuous mode, after the first time you call the tkdpo4k_InitiateAcquisition function, you can call this function continuously without initiating acquisition each time for enhancing the waveform-fetching speed. But there is no guarantee that each waveform you fetched is always a new acquired one. Also you cannot modify other configuration during the period of waveform fetching. Otherwise, you need to call the tkdpo4k_InitiateAcquisition function again to make the new configuration valid in this function.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name for which to read the minimum and maximum waveforms.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH") - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Waveform_Size">
        /// Passes the number of elements in the Min Waveform Array and Max Waveform Array parameters.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Min_Waveform_Array">
        /// Returns the minimum waveform that the oscilloscope acquires.
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel and passes a ViReal64 array with at least this many elements.
        /// 
        /// 2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Min Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Min Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </param>
        /// <param name="Max_Waveform_Array">
        /// Returns the maximum waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel and passes a ViReal64 array with at least this many elements.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Max Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Max Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Min Waveform Array and Max Waveform Array parameters.
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Min Waveform Array and Max Waveform Array. The time is relative to the trigger event.  
        /// 
        /// For example, if the oscilloscope acquires the first point in the waveforms one second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// 
        /// Units: seconds
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Min Waveform Array and Max Waveform Array.  
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FetchMinMaxWaveform(string Channel_Name, int Waveform_Size, double[] Min_Waveform_Array, double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.FetchMinMaxWaveform(this._handle, Channel_Name, Waveform_Size, Min_Waveform_Array, Max_Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function obtains a waveform measurement and returns the measurement value. You specify a particular measurement type, such as rise time, frequency, and voltage peak-to-peak. The waveform on which the oscilloscope calculates the waveform measurement is from an acquisition that you previously initiated.
        /// 
        /// Use the tkdpo4k_InitiateAcquisition function to start an acquisition on the channels that you enable with the tkdpo4k_ConfigureChannel function. The oscilloscope acquires waveforms for the enabled channels concurrently. You use the tkdpo4k_AcquisitionStatus function to determine when the acquisition is complete. You call this function separately for each waveform measurement you want to obtain on a specific channel.
        /// 
        /// You can call the tkdpo4k_ReadWaveformMeasurement function instead of the tkdpo4k_InitiateAcquisition function. The tkdpo4k_ReadWaveformMeasurement function starts an acquisition on all enabled channels. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. You call this function separately for any other waveform measurement that you want to obtain on a specific channel.
        /// 
        /// Notes:
        /// 
        /// (1) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.
        /// 
        /// (2) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.
        /// 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF
        ///   TKDPO4K_ATTR_MEAS_LOW_REF
        ///   TKDPO4K_ATTR_MEAS_MID_REF
        /// 
        /// (3) This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the channel name for which to read a waveform measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")  - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_HISTOGRAM    ("HIS")     - Histogram
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: 
        /// You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measurement_Function">
        /// Passes the waveform measurement you want the oscilloscope to perform.
        /// 
        /// Defined Values:
        /// 
        /// - TKDPO4K_VAL_RISE_TIME (0): The time it takes the rising
        ///   edge of the first pulse to rise from the value of
        ///   TKDPO4K_ATTR_MEAS_LOW_REF to the value of 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF.
        /// 
        /// - TKDPO4K_VAL_FALL_TIME (1): The time it takes the falling
        ///   edge of the first pulse to fall from the value of
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF to the value of 
        ///   TKDPO4K_ATTR_MEAS_LOW_REF.
        /// 
        /// - TKDPO4K_VAL_FREQUENCY (2): The number of cycles that occur
        ///   in one second.
        /// 
        /// - TKDPO4K_VAL_PERIOD (3): The time it takes for the first
        ///   complete signal cycle to occur.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_RMS (4): Views the true Root Mean Square
        ///   voltage.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_PEAK_TO_PEAK (5): The absolute
        ///   difference between the maximum and minimum amplitudes.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_MAX (6): Obtains the most positive peak
        ///   voltage in the waveform.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_MIN (7): Obtains the most negative peak
        ///   voltage in the waveform.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_HIGH (8): Obtains the highest voltage
        ///   value calculated. If you use the min-max setup method, the
        ///   value calculated is the same as the maximum value. If you use
        ///   the histogram method, it is the value that occurs most
        ///   frequently above the mid point.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_LOW (9): Obtains the lowest voltage
        ///   value calculated. If you use the min-max setup method, its the
        ///   same as the minimum value. If you use the histogram method, it
        ///   is the value that occurs most frequently below the mid point."
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_AVERAGE (10): Calculates the Arithmetic
        ///   mean over the entire waveform.
        /// 
        /// - TKDPO4K_VAL_WIDTH_NEG (11): Obtains the time between the
        ///   crossings by the first negative pulse of the value of the
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF attribute.
        /// 
        /// - TKDPO4K_VAL_WIDTH_POS (12): Obtains the time between the
        ///   crossings by the first positive pulse of the value of the
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF attribute.
        /// 
        /// - TKDPO4K_VAL_DUTY_CYCLE_NEG (13): Obtains as a percentage the
        ///   ratio of the first negative pulse width to the signal period.
        /// 
        /// - TKDPO4K_VAL_DUTY_CYCLE_POS (14): Obtains as a percentage the
        ///   ratio of the first positive pulse width to the signal period."
        /// 
        /// - TKDPO4K_VAL_AMPLITUDE (15): Obtains the difference of the
        ///   high voltage value and the low voltage value.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_CYCLE_RMS (16): Obtains the true Root
        ///   Mean Square voltage for one cycle of a periodic signal.  The
        ///   oscilloscope defines a cycle as the part of the waveform that
        ///   goes from the first to the third crossing of the value of
        ///   TKDPO4K_ATTR_MEAS_MID_REF.  For more complex or non-periodic
        ///   waveforms, use TKDPO4K_VAL_VOLTAGE_RMS.
        /// 
        /// - TKDPO4K_VAL_VOLTAGE_CYCLE_AVERAGE (17): Calculates the
        ///   Arithmetic mean over one cycle of a periodic signal.  The
        ///   oscilloscope defines a cycle as the part of the waveform that
        ///   goes from the first to the third crossing of the value of
        ///   TKDPO4K_ATTR_MEAS_MID_REF.  For more complex or non-periodic
        ///   waveforms, use TKDPO4K_VAL_VOLTAGE_AVERAGE.
        /// 
        /// - TKDPO4K_VAL_POSITIVE_OVERSHOOT (18): Obtains as a
        ///   percentage the ratio of the difference of the maximum and high
        ///   voltage values to the amplitude.
        /// 
        /// - TKDPO4K_VAL_NEGATIVE_OVERSHOOT (1001): Obtains as a
        ///   percentage the ratio of the difference of the low and minimum
        ///   voltage values to the amplitude.
        /// 
        /// - TKDPO4K_VAL_TIMING_BURST_WIDTH (1002): Obtains the time from
        ///   the first crossing to the last crossing of the middle
        ///   reference value by the waveform specified by
        ///   TKDPO4K_ATTR_MEAS_SOURCE.
        /// 
        /// - TKDPO4K_VAL_AREA (1005): Calculates the area over the entire
        ///   waveform or gated region. The area measured above the ground
        ///   is positive, while the area below ground is negative. The
        ///   units are volt-seconds. 
        ///                                            
        /// - TKDPO4K_VAL_CYCLE_AREA (1006): Calculates the area over the 
        ///   first cycle in the waveform or the first cycle in the gated 
        ///   region. The area measured above the common reference point is 
        ///   positive, while the area below the common reference point is 
        ///   negative. The units are volt-seconds.                     
        /// 
        /// - TKDPO4K_VAL_CROSS_NEG (1007): Obtains the time from the 
        ///   trigger point to the first falling edge of the waveform or
        ///   gated region. The time is measured at the middle reference
        ///   amplitude point of the signal. The units are seconds.                     
        /// 
        /// - TKDPO4K_VAL_CROSS_POS (1008): Obtains the time from the 
        ///   trigger point to the first positive edge of the waveform or 
        ///   gated region. The time is measured at the middle reference 
        ///   amplitude point of the signal. The units are seconds.       
        /// 
        /// - TKDPO4K_VAL_EDGE_POS (1009): The positive edge count.
        /// 
        /// - TKDPO4K_VAL_EDGE_NEG (1010): The negative edge count.
        /// 
        /// - TKDPO4K_VAL_PULSE_POS (1011): The positive pulse count.
        /// 
        /// - TKDPO4K_VAL_PULSE_NEG (1012): The negative pulse count.   
        /// 
        /// - TKDPO4K_VAL_HISTOGRAM_HITS (1013): Measures the number of points in or on the histogram box.
        /// 
        /// - TKDPO4K_VAL_MEDIAN (1014): Measures the middle point of the histogram box. Half of all acquired points within or on the histogram box are less than this value and half are greater than this value.   
        ///       
        /// - TKDPO4K_VAL_SIGMA1 (1015): Measures the percentage of points in the histogram that are within one standard deviation of the histogram mean.
        ///            
        /// - TKDPO4K_VAL_SIGMA2 (1016): Measures the percentage of points in the histogram that are within two standard deviations of the histogram mean.
        ///       
        /// - TKDPO4K_VAL_SIGMA3 (1017): Measures the percentage of points in the histogram that are within three standard deviations of the histogram mean.   
        ///             
        /// - TKDPO4K_VAL_STDDEV (1018): Measures the standard deviation (Root Mean Square (RMS) deviation) of all acquired points within or on the histogram box.    
        ///                    
        /// - TKDPO4K_VAL_WAVEFORMS (1019): Measures the number of waveforms used to calculate the histogram. 
        ///         
        /// - TKDPO4K_VAL_TOVERSHOOT (1020)          
        /// 
        /// Default Value: TKDPO4K_VAL_RISE_TIME  
        /// 
        /// Notes:
        /// 
        /// (1) Timing measurements on eye diagrams produce unreliable results; use edge triggering to obtain a single-valued waveform.
        /// 
        /// (2) You must configure the appropriate reference levels before you call this function to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.
        /// 
        /// (3) You configure the low, mid, and high references either by calling the tkdpo4k_ConfigureRefLevels function or by setting the following attributes.
        /// 
        ///   TKDPO4K_ATTR_MEAS_HIGH_REF
        ///   TKDPO4K_ATTR_MEAS_LOW_REF
        ///   TKDPO4K_ATTR_MEAS_MID_REF
        /// 
        /// </param>
        /// <param name="Measurement">
        /// Returns the measured value.  
        /// 
        /// Units: The units depend on the Measurement Function you select as shown below.
        /// 
        ///     Rise Time            - seconds
        ///     Fall Time            - seconds
        ///     Frequency            - hertz
        ///     Period               - seconds
        ///     Voltage RMS          - volts
        ///     Voltage RMS (Cycle)  - volts
        ///     Voltage Max          - volts
        ///     Voltage Min          - volts
        ///     Voltage Vpp          - volts
        ///     Voltage High         - volts
        ///     Voltage Low          - volts
        ///     Voltage Avg.         - volts
        ///     Voltage Avg. (Cycle) - volts
        ///     Width Negative       - seconds
        ///     Width Positive       - seconds
        ///     Duty Cycle Negative  - percent
        ///     Duty Cycle Positive  - percent
        ///     Amplitude            - volts
        ///     Voltage Cycle RMS    - volts
        ///     Voltage Max          - volts
        ///     Voltage Min          - volts
        ///     Voltage High         - volts
        ///     Voltage Low          - volts
        ///     Positive Overshoot   - volts
        ///     Negative Overshoot   - volts
        ///     Burst Width          - seconds
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int FetchWaveformMeasurement(string Channel_Name, int Measurement_Function, out double Measurement)
        {
            int pInvokeResult = PInvoke.FetchWaveformMeasurement(this._handle, Channel_Name, Measurement_Function, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fetches the phase measurement.
        /// </summary>
        /// <param name="Measure_Source_1">
        /// Passes the channel name for which to read a waveform measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")  - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_HISTOGRAM    ("HIS")     - Histogram
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: 
        /// You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measure_Source_2">
        /// Passes the channel name to measure "to" for phase immediate measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_2
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measurement">
        /// Returns the phase measured value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int FetchPhaseMeasurement(string Measure_Source_1, string Measure_Source_2, out double Measurement)
        {
            int pInvokeResult = PInvoke.FetchPhaseMeasurement(this._handle, Measure_Source_1, Measure_Source_2, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fetches the delay measurement.
        /// </summary>
        /// <param name="Measure_Source_1">
        /// Passes the channel name for which to read a waveform measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")  - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_HISTOGRAM    ("HIS")     - Histogram
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: 
        /// You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Measure_Source_2">
        /// Passes the channel name to measure "to" for delay immediate measurement.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1      ("CH1")       - Channel 1 
        ///     TKDPO4K_VAL_CH_2      ("CH2")       - Channel 2
        ///     TKDPO4K_VAL_CH_3      ("CH3")       - Channel 3
        ///     TKDPO4K_VAL_CH_4      ("CH4")       - Channel 4
        ///     TKDPO4K_VAL_REF_1     ("REF1")      - Reference 1
        ///     TKDPO4K_VAL_REF_2     ("REF2")      - Reference 2
        ///     TKDPO4K_VAL_REF_3     ("REF3")      - Reference 3
        ///     TKDPO4K_VAL_REF_4     ("REF4")      - Reference 4
        ///     TKDPO4K_VAL_MATH      ("MATH")      - Math
        ///     TKDPO4K_VAL_D_0       ("D0")    - Digital Channel 0
        ///     TKDPO4K_VAL_D_1       ("D1")    - Digital Channel 1
        ///     TKDPO4K_VAL_D_2       ("D2")    - Digital Channel 2
        ///     TKDPO4K_VAL_D_3       ("D3")    - Digital Channel 3
        ///     TKDPO4K_VAL_D_4       ("D4")    - Digital Channel 4
        ///     TKDPO4K_VAL_D_5       ("D5")    - Digital Channel 5
        ///     TKDPO4K_VAL_D_6       ("D6")    - Digital Channel 6
        ///     TKDPO4K_VAL_D_7       ("D7")    - Digital Channel 7
        ///     TKDPO4K_VAL_D_8       ("D8")    - Digital Channel 8
        ///     TKDPO4K_VAL_D_9       ("D9")    - Digital Channel 9
        ///     TKDPO4K_VAL_D_10      ("D10")   - Digital Channel 10
        ///     TKDPO4K_VAL_D_11      ("D11")   - Digital Channel 11
        ///     TKDPO4K_VAL_D_12      ("D12")   - Digital Channel 12
        ///     TKDPO4K_VAL_D_13      ("D13")   - Digital Channel 13
        ///     TKDPO4K_VAL_D_14      ("D14")   - Digital Channel 14
        ///     TKDPO4K_VAL_D_15      ("D15")   - Digital Channel 15
        ///     TKDPO4K_VAL_RF_AMPLITUDE ("RF_AMP")  - RF Amplitude
        ///     TKDPO4K_VAL_RF_FREQUENCY ("RF_FREQ") - RF Frequency
        ///     TKDPO4K_VAL_RF_PHASE     ("RF_PHAS") - RF Phase
        /// 
        /// Default Value: TKDPO4K_VAL_CH_2
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// D0 - D15 only available for MSO/MDO models.
        /// RF_AMP,RF_FREQ and RF_PHAS only available for MDO models.
        /// </param>
        /// <param name="Delay_Edge_1">
        /// Specifies the slope of the edge the oscilloscope uses for the delay "from" waveform when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_EDGE_RISE (1)
        /// - TKDPO4K_VAL_DEL_EDGE_FALL (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_EDGE_RISE
        /// </param>
        /// <param name="Delay_Edge_2">
        /// Specifies the slope of the edge the oscilloscope uses for the delay "to" waveform when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_EDGE_RISE (1)
        /// - TKDPO4K_VAL_DEL_EDGE_FALL (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_EDGE_RISE
        /// </param>
        /// <param name="Delay_Direction">
        /// Specifies the starting point and direction that determines the delay "to" edge when taking an immediate delay measurement.
        /// 
        /// Valid Values:
        /// 
        /// - TKDPO4K_VAL_DEL_DIR_BACKWARD (1)
        /// - TKDPO4K_VAL_DEL_DIR_FORWARD  (2)
        /// 
        /// Default Value: TKDPO4K_VAL_DEL_DIR_BACKWARD
        /// </param>
        /// <param name="Measurement">
        /// Returns the delay measured value.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///            
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// </returns>
        public int FetchDelayMeasurement(string Measure_Source_1, string Measure_Source_2, int Delay_Edge_1, int Delay_Edge_2, int Delay_Direction, out double Measurement)
        {
            int pInvokeResult = PInvoke.FetchDelayMeasurement(this._handle, Measure_Source_1, Measure_Source_2, Delay_Edge_1, Delay_Edge_2, Delay_Direction, out Measurement);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function initiates waveform acquisition in continuous acquisition mode. Set the waveform size element to the desired amount.
        /// </summary>
        /// <param name="Waveform_Size">
        /// Specify the waveform size.
        /// 
        /// Default Value:
        /// 10000
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int InitiateContinuousAcquisition(int Waveform_Size)
        {
            int pInvokeResult = PInvoke.InitiateContinuousAcquisition(this._handle, Waveform_Size);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fetches a waveform from a specified channel and optionally return ActualPoints(Number of points actually acquired in waveform), InitialX(The time in relation to the Trigger Event of the first point in the waveform in seconds), XIncrement(The time between points in the acquired waveform in seconds). The function is used only when the instrument runs in continuous mode and is in running state.
        /// 
        /// Note:
        /// There is no guarantee that the waveform fetched by this function is the latest one acquired by instrument. While using in loops to repeatedly acquiring waveform, it is possible that several fetched waveform is from the same acquisition.
        /// 
        /// Call this function only when TKDPO4K_ATTR_ACQUISITION_TYPE is TKDPO4K_VAL_NORMAL, TKDPO4K_VAL_HI_RES or TKDPO4K_VAL_AVERAGE.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Waveform_Array">
        /// Returns the waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel. Pass a ViReal64 array with at least this many elements.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Waveform Array parameter.
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Waveform Array.  The time is relative to the trigger event.
        /// 
        /// For example, if the oscilloscope acquires the first point in the Waveform Array one second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// 
        /// Units: seconds
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Waveform Array.  
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FetchContinuousWaveform(string Channel_Name, double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.FetchContinuousWaveform(this._handle, Channel_Name, Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function fetches a min and max waveform from a waveform acquisition that the user or driver previously initiated on a specific channel.                     
        /// 
        /// Note:
        /// Call this function only when TKDPO4K_ATTR_ACQUISITION_TYPE is TKDPO4K_VAL_PEAK_DETECT or TKDPO4K_VAL_ENVELOPE.
        /// </summary>
        /// <param name="Channel_Name">
        /// Passes the name of the channel from which you want to read a waveform.
        /// 
        /// Valid Channel Names:  
        ///     TKDPO4K_VAL_CH_1   ("CH1")   - Channel 1 
        ///     TKDPO4K_VAL_CH_2   ("CH2")   - Channel 2
        ///     TKDPO4K_VAL_CH_3   ("CH3")   - Channel 3
        ///     TKDPO4K_VAL_CH_4   ("CH4")   - Channel 4
        ///     TKDPO4K_VAL_REF_1  ("REF1")  - Reference 1
        ///     TKDPO4K_VAL_REF_2  ("REF2")  - Reference 2
        ///     TKDPO4K_VAL_REF_3  ("REF3")  - Reference 3
        ///     TKDPO4K_VAL_REF_4  ("REF4")  - Reference 4
        ///     TKDPO4K_VAL_MATH   ("MATH")  - Math
        /// 
        /// Default Value: TKDPO4K_VAL_CH_1
        /// 
        /// Note: You can specify the channel name as a string variable or as a literal enclosed in double quotes.
        /// </param>
        /// <param name="Min_Waveform_Array">
        /// Returns the minimum waveform that the oscilloscope acquires.
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel and passes a ViReal64 array with at least this many elements.
        /// 
        /// 2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Min Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Min Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// </param>
        /// <param name="Max_Waveform_Array">
        /// Returns the maximum waveform that the oscilloscope acquires.  
        /// 
        /// Units: volts
        /// 
        /// Notes:
        /// 
        /// (1) The tkdpo4k_ActualRecordLength function returns the number of points the oscilloscope acquires for each channel and passes a ViReal64 array with at least this many elements.
        /// 
        /// (2) If the oscilloscope cannot sample a value for a point in the waveform, the driver sets the corresponding element in the Max Waveform Array to an IEEE defined NaN (Not a Number) value.  
        /// 
        /// (3) You can test each element in the Max Waveform Array parameter for an invalid waveform element with the tkdpo4k_IsInvalidWfmElement function.
        /// 
        /// </param>
        /// <param name="Actual_Points">
        /// Indicates the number of points the function places in the Waveform Array parameter.
        /// 
        /// </param>
        /// <param name="Initial_X">
        /// Indicates the time of the first point in the Waveform Array. The time is relative to the trigger event.  
        /// 
        /// For example, if the oscilloscope acquires the first point in the Waveform Array one second before the trigger, this parameter returns the value -1.0. If the acquisition of the first point occurs at the same time as the trigger, this parameter returns the value 0.0.
        /// 
        /// Units: seconds
        /// </param>
        /// <param name="X_Increment">
        /// Indicates the length of time between points in the Waveform Array.  
        /// 
        /// Units: seconds
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int FetchContinuousMinMaxWaveform(string Channel_Name, double[] Min_Waveform_Array, double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment)
        {
            int pInvokeResult = PInvoke.FetchContinuousMinMaxWaveform(this._handle, Channel_Name, Min_Waveform_Array, Max_Waveform_Array, out Actual_Points, out Initial_X, out X_Increment);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function stops waveform acquisition in continuous acquisition mode.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int StopContinuousAcquisition()
        {
            int pInvokeResult = PInvoke.StopContinuousAcquisition(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function aborts an acquisition and returns the oscilloscope to the Idle state. You initiate an acquisition with the tkdpo4k_ReadWaveform, tkdpo4k_ReadMinMaxWaveform, tkdpo4k_ReadWaveformMeasurement, and tkdpo4k_InitiateAcquisition functions.
        /// 
        /// Note: This function does not check the instrument status. Typically, you call this function only in a sequence of calls to other low-level driver functions. The sequence performs one operation. You use the low-level functions to optimize one or more aspects of interaction with the instrument. If you want to check the instrument status, call the tkdpo4k_error_query function at the conclusion of the sequence.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Abort()
        {
            int pInvokeResult = PInvoke.Abort(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a command string directly to an instrument using VISA I/O. The function bypasses the attribute state caching mechanism and therefore always invalidates all attribute cache values for the session.
        /// 
        /// The function assumes that the IVI_ATTR_SYSTEM_IO_SESSION attribute for the IVI session you specify holds a valid VISA session for the instrument.
        /// 
        /// The function calls Ivi_SetNeedToCheckStatus with VI_TRUE.
        /// 
        /// Note: This function is supported with the IVI Compliance Package (ICP) 4.6.1 and later. If you are using an earlier version of ICP, you can still use the WriteInstrData and ReadInstrData functions under the Obsolete folder.
        /// 
        /// </summary>
        /// <param name="Write_Buffer">
        /// Specify the string you want to send to the instrument.
        /// 
        /// </param>
        /// <param name="Number_of_Bytes_to_Write">
        /// Specifies the number of bytes to write to the instrument. The value of this parameter must be less than or equal to the size of buffer.
        /// 
        /// </param>
        /// <param name="Number_of_Bytes_Written">
        /// Returns the number of bytes actually written.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int viWrite(byte[] Write_Buffer, long Number_of_Bytes_to_Write, out long Number_of_Bytes_Written)
        {
            int pInvokeResult = PInvoke.viWrite(this._handle, Write_Buffer, Number_of_Bytes_to_Write, out Number_of_Bytes_Written);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data directly from an instrument using VISA I/O. The function bypasses the attribute state caching mechanism.
        /// 
        /// The function assumes that the IVI_ATTR_SYSTEM_IO_SESSION attribute for the IVI session you specify holds a valid VISA session for the instrument.
        /// 
        /// If data is not available at the instrument's output buffer when you call this function, the instrument might hang up. In that case, the function does not return until the VISA I/O call times out. If you have disabled the timeout, the function hangs indefinitely.
        /// 
        /// Note: This function is supported with the IVI Compliance Package (ICP) 4.6.1 and later. If you are using an earlier version of ICP, you can still use the WriteInstrData and ReadInstrData functions under the Obsolete folder.
        /// 
        /// 
        /// </summary>
        /// <param name="Number_of_Bytes_to_Read">
        /// Specify the maximum number of bytes to read from the instrument. The Read Buffer parameter must be a ViChar buffer that contains at least the number of bytes you specify.
        /// 
        /// If the number of bytes you specify is less than the number of bytes in the instrument's output buffer, you must call this function again to empty the output buffer. If you do not empty the instrument's output buffer, the instrument might return invalid data in response to subsequent requests.
        /// 
        /// If data is not available at the instrument's output buffer when you call this function, the instrument might hang up. In that case, the function does not return until the VISA I/O call times out. If you have disabled the timeout, the function hangs indefinitely.
        /// 
        /// </param>
        /// <param name="Read_Buffer">
        /// A buffer in which the function places the data it receives from the instrument.
        /// 
        /// The buffer must be a ViChar array that has at least as many bytes as you specify in the Number of Bytes To Read parameter.
        /// 
        /// This function does not write an ASCII NUL byte to terminate the data, nor does it clear the buffer beyond the bytes it actually receives from the instrument.
        /// 
        /// </param>
        /// <param name="Number_of_Bytes_Read">
        /// This control returns the actual number of bytes the function received from the instrument. This is the value that the VISA viRead function returns.
        /// 
        /// If the actual number of bytes received is less than the number of bytes you specify in the Number of Bytes to Read parameter, the instrument's output buffer has probably emptied.
        /// 
        /// If the number of bytes received is 0, the most probable cause is that no data was available at the instrument's output buffer.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int viRead(long Number_of_Bytes_to_Read, byte[] Read_Buffer, out long Number_of_Bytes_Read)
        {
            int pInvokeResult = PInvoke.viRead(this._handle, Number_of_Bytes_to_Read, Read_Buffer, out Number_of_Bytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function runs the self-test routine of the instrument and returns the test result(s). 
        /// 
        /// 
        /// </summary>
        /// <param name="Self_Test_Result">
        /// This parameter contains the value that the instrument returns from self-tests.
        /// 
        /// Self-Test Code    Description
        /// ---------------------------------------
        ///    0              Passed self-test
        ///    1              Self-test failed
        /// </param>
        /// <param name="Self_Test_Message">
        /// Returns the self-test response string from the instrument. See the operation manual of the device for explanation of the strings.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int self_test(out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message)
        {
            int pInvokeResult = PInvoke.self_test(this._handle, out Self_Test_Result, Self_Test_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument to a known state and sends initialization commands to the instrument. The initialization commands set instrument settings such as Headers Off, Short Command form, and Data Transfer Binary to the state necessary for the operation of the instrument driver.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int reset()
        {
            int pInvokeResult = PInvoke.reset(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function resets the instrument and applies initial user specified settings from the Logical Name that was used to initialize the session. If the session was created without a Logical Name, this function is equivalent to the tkdpo4k_reset function.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ResetWithDefaults()
        {
            int pInvokeResult = PInvoke.ResetWithDefaults(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int Disable()
        {
            int pInvokeResult = PInvoke.Disable(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the revision numbers of the instrument driver and instrument firmware.
        /// </summary>
        /// <param name="Instrument_Driver_Revision">
        /// Returns the instrument driver software revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <param name="Firmware_Revision">
        /// Returns the instrument firmware revision numbers in the form of a string.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// 
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int revision_query(System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision)
        {
            int pInvokeResult = PInvoke.revision_query(this._handle, Instrument_Driver_Revision, Firmware_Revision);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads an error code and a message from the error queue of the instrument.
        /// </summary>
        /// <param name="Error_Code">
        /// Returns the error code read from the error queue of the instrument.
        /// 
        /// 
        /// </param>
        /// <param name="Error_Message">
        /// Returns the error message string read from the error message queue of the instrument.
        /// 
        /// You must pass a ViChar array with at least 256 bytes.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int error_query(out int Error_Code, System.Text.StringBuilder Error_Message)
        {
            int pInvokeResult = PInvoke.error_query(this._handle, out Error_Code, Error_Message);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// After the read and fetch waveform functions execute, each element in the waveform array contains either a voltage or a value indicating that the oscilloscope failed to sample a voltage. The driver uses an IEEE-defined NaN (Not a Number) value to mark as invalid each element in the waveform array for which the oscilloscope failed to sample a voltage. This function determines whether a value you pass from the waveform array is invalid.
        /// </summary>
        /// <param name="Element_Value">
        /// Passes one of the values from the waveform array returned by the read and fetch waveform functions. The driver uses an IEEE defined NaN (Not a Number) value to mark as invalid each element in the waveform array for which the oscilloscope cannot sample a voltage. The driver determines whether the value you pass is invalid.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Is_Invalid">
        /// Returns whether the Element Value is a valid voltage or a value indicating that the oscilloscope cannot sample a voltage.
        /// 
        /// Valid Return Values:
        /// VI_TRUE  (1) - The Element Value indicates that the oscilloscope
        ///                cannot sample the voltage.
        /// VI_FALSE (0) - The Element Value is a valid voltage.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int IsInvalidWfmElement(double Element_Value, out bool Is_Invalid)
        {
            ushort Is_InvalidAsUShort;
            int pInvokeResult = PInvoke.IsInvalidWfmElement(this._handle, Element_Value, out Is_InvalidAsUShort);
            Is_Invalid = System.Convert.ToBoolean(Is_InvalidAsUShort);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function invalidates the cached values of all attributes for the session.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int InvalidateAllAttributes()
        {
            int pInvokeResult = PInvoke.InvalidateAllAttributes(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the highest-level channel name that corresponds to the specific driver channel string that is in the channel table at an index you specify. By passing 0 for the buffer size, the caller can ascertain the buffer size required to get the entire channel name string and then call the function again with a sufficiently large buffer.
        /// </summary>
        /// <param name="Index">
        /// Specifies a 1-based index into the channel table.
        /// 
        /// Default Value: 1
        /// 
        /// </param>
        /// <param name="BufferSize">
        /// Passes the number of bytes in the ViChar array you specify for the Channel Name parameter.
        /// 
        /// If the channel name, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies BufferSize - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Description buffer parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Channel_String">
        /// Returns the highest-level channel name that corresponds to the specific driver channel string that is in the channel table at an index you specify.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the error description, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass 0 for the Buffer Size, you can pass VI_NULL for this parameter.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// If the current value of the return buffer, including the terminating NUL byte, is larger than the size you indicate in the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviDCPwr Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviDCPwr Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP Driver Errors
        /// 
        /// 
        /// </returns>
        public int GetChannelName(int Index, int BufferSize, System.Text.StringBuilder Channel_String)
        {
            int pInvokeResult = PInvoke.GetChannelName(this._handle, Index, BufferSize, Channel_String);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the coercion information associated with the IVI session. This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.
        /// 
        /// If you set the TKDPO4K_ATTR_RECORD_COERCIONS attribute to VI_TRUE, the instrument driver keeps a list of all coercions it makes on ViInt32 or ViReal64 values you pass to instrument driver functions. You use this function to retrieve information from that list.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// The function returns an empty string in the Coercion Record parameter if no coercion records remain for the session.
        /// </summary>
        /// <param name="Buffer_Size">
        /// Passes the number of bytes in the ViChar array you specify for the Coercion Record parameter.
        /// 
        /// If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Coercion Record buffer parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Coercion_Record">
        /// Returns the next coercion record for the IVI session. If there are no coercion records, the function returns an empty string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the next coercion record string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no coercion records remain for the session.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// If the current value of the return buffer, including the terminating NUL byte, is larger than the size you indicate in the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value.  For example, if the value is "123456" and the Buffer Size is 4, the function places "123" into the buffer and returns 7.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int GetNextCoercionRecord(int Buffer_Size, System.Text.StringBuilder Coercion_Record)
        {
            int pInvokeResult = PInvoke.GetNextCoercionRecord(this._handle, Buffer_Size, Coercion_Record);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function returns the interchange warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchange warning. Interchange warnings indicate that using your application with a different instrument might cause different behavior. You use this function to retrieve interchange warnings.
        /// 
        /// The driver performs interchangeability checking when the TKDPO4K_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.
        /// 
        /// The function returns an empty string in the Interchange Warning parameter if no interchange warnings remain for the session.
        /// 
        /// In general, the instrument driver generates interchange warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.
        /// </summary>
        /// <param name="Buffer_Size">
        /// Passes the number of bytes in the ViChar array you specify for the Interchange Warning parameter.
        /// 
        /// If the next interchange warning string, including the terminating NUL byte, contains more bytes than you indicate in this parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the value.
        /// 
        /// If you pass 0, you can pass VI_NULL for the Interchange Warning buffer parameter.
        /// 
        /// Default Value: None
        /// </param>
        /// <param name="Interchange_Warning">
        /// Returns the next interchange warning for the IVI session. If there are no interchange warnings, the function returns an empty  string.
        /// 
        /// The buffer must contain at least as many elements as the value you specify with the Buffer Size parameter. If the next interchange warning string, including the terminating NUL byte, contains more bytes than you indicate with the Buffer Size parameter, the function copies Buffer Size - 1 bytes into the buffer, places an ASCII NUL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is 123456 and the Buffer Size is 4, the function places 123 into the buffer and returns 7.
        /// 
        /// This parameter returns an empty string if no interchange
        /// warnings remain for the session.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int GetNextInterchangeWarning(int Buffer_Size, System.Text.StringBuilder Interchange_Warning)
        {
            int pInvokeResult = PInvoke.GetNextInterchangeWarning(this._handle, Buffer_Size, Interchange_Warning);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function clears the list of current interchange warnings.
        /// 
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ClearInterchangeWarnings()
        {
            int pInvokeResult = PInvoke.ClearInterchangeWarnings(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order. To do so requires ensuring that each test module completely configures the state of each instrument it uses. If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module. If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change. This change in behavior is generally instrument specific and represents an interchangeability problem.
        /// 
        /// You can use this function to test for such cases. After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations. By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules.
        /// 
        /// This function does not clear the interchange warnings from the list of previously recorded interchange warnings. If you want to guarantee that the tkdpo4k_GetNextInterchangeWarning function only returns those interchange warnings that are generated after calling this function, you must clear the list of interchange warnings. You can clear the interchange warnings list by repeatedly calling the tkdpo4k_GetNextInterchangeWarning function until no more interchange warnings are returned. If you are not interested in the content of those warnings, you can call the tkdpo4k_ClearInterchangeWarnings function.
        /// </summary>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviFgen  Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviFgen  Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// </returns>
        public int ResetInterchangeCheck()
        {
            int pInvokeResult = PInvoke.ResetInterchangeCheck(this._handle);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function writes a user-specified string to the instrument.
        /// 
        /// Note: This function bypasses IVI attribute state caching. Therefore, when you call this function, the cached values for all attributes is invalidated.
        /// </summary>
        /// <param name="Write_Buffer">
        /// Passes the string to write to the instrument.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int WriteInstrData(string Write_Buffer)
        {
            int pInvokeResult = PInvoke.WriteInstrData(this._handle, Write_Buffer);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        /// <summary>
        /// This function reads data from the instrument.
        /// </summary>
        /// <param name="Number_of_Bytes_To_Read">
        /// Passes the maximum number of bytes to read from the instruments.  
        /// 
        /// Valid Range: 0 to the number of elements in the Read Buffer.
        /// 
        /// Default Value: 256
        /// </param>
        /// <param name="Read_Buffer">
        /// Returns data that was read from the instrument.
        /// </param>
        /// <param name="Num_Bytes_Read">
        /// Returns the number of bytes actually read from the instrument and stored in the Read Buffer.
        /// </param>
        /// <returns>
        /// Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  You examine the status code from each call to an instrument driver function to determine if an error occurred.
        /// 
        /// To obtain a text description of the status code, call the tkdpo4k_error_message function.  To obtain additional information about the error condition, call the tkdpo4k_GetError function.  To clear the error information from the driver, call the tkdpo4k_ClearError function.
        ///           
        /// The general meaning of the status code is as follows:
        /// 
        /// Value                  Meaning
        /// -------------------------------
        /// 0                      Success
        /// Positive Values        Warnings
        /// Negative Values        Errors
        /// 
        /// This driver defines the following status codes:
        ///           
        /// Status    Description
        /// -------------------------------------------------
        /// ERRORS:
        /// BFFA4001  Operation or attribute not valid for model
        /// BFFA4002  Option not installed
        ///           
        /// This instrument driver also returns errors and warnings defined by other sources.  The following table defines the ranges of additional status codes that this driver can return.  The table lists the different include files that contain the defined constants for the particular status codes:
        ///           
        /// Numeric Range (in Hex)   Status Code Types    
        /// -------------------------------------------------
        /// 3FFA2000 to 3FFA3FFF     IviScope Warnings
        /// 3FFA0000 to 3FFA1FFF     IVI      Warnings
        /// 3FFF0000 to 3FFFFFFF     VISA     Warnings
        /// 3FFC0000 to 3FFCFFFF     VXIPnP   Driver Warnings
        ///           
        /// BFFA2000 to BFFA3FFF     IviScope Errors
        /// BFFA0000 to BFFA1FFF     IVI      Errors
        /// BFFF0000 to BFFFFFFF     VISA     Errors
        /// BFFC0000 to BFFCFFFF     VXIPnP   Driver Errors
        /// 
        /// </returns>
        public int ReadInstrData(int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read)
        {
            int pInvokeResult = PInvoke.ReadInstrData(this._handle, Number_of_Bytes_To_Read, Read_Buffer, out Num_Bytes_Read);
            PInvoke.TestForError(this._handle, pInvokeResult);
            return pInvokeResult;
        }

        public void Dispose()
        {
            this.Dispose(true);
            System.GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if ((this._disposed == false))
            {
                PInvoke.close(this._handle);
                this._handle = new System.Runtime.InteropServices.HandleRef(null, System.IntPtr.Zero);
            }
            this._disposed = true;
        }

        public int GetInt32(itScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            int val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public int GetInt32(itScopeProperties propertyId)
        {
            return this.GetInt32(propertyId, "");
        }

        public double GetDouble(itScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            double val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return val;
        }

        public double GetDouble(itScopeProperties propertyId)
        {
            return this.GetDouble(propertyId, "");
        }

        public string GetString(itScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            System.Text.StringBuilder newVal = new System.Text.StringBuilder(512);
            int size = PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), 512, newVal);
            if ((size < 0))
            {
                PInvoke.ThrowError(this._handle, size);
            }
            else
            {
                if ((size > 0))
                {
                    newVal.Capacity = size;
                    PInvoke.TestForError(this._handle, PInvoke.GetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), size, newVal));
                }
            }
            return newVal.ToString();
        }

        public string GetString(itScopeProperties propertyId)
        {
            return this.GetString(propertyId, "");
        }

        public bool GetBoolean(itScopeProperties propertyId, string repeatedCapabilityOrChannel)
        {
            ushort val;
            PInvoke.TestForError(this._handle, PInvoke.GetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), out val));
            return System.Convert.ToBoolean(val);
        }

        public bool GetBoolean(itScopeProperties propertyId)
        {
            return this.GetBoolean(propertyId, "");
        }

        public void SetInt32(itScopeProperties propertyId, string repeatedCapabilityOrChannel, int val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViInt32(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetInt32(itScopeProperties propertyId, int val)
        {
            this.SetInt32(propertyId, "", val);
        }

        public void SetDouble(itScopeProperties propertyId, string repeatedCapabilityOrChannel, double val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViReal64(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetDouble(itScopeProperties propertyId, double val)
        {
            this.SetDouble(propertyId, "", val);
        }

        public void SetString(itScopeProperties propertyId, string repeatedCapabilityOrChannel, string val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViString(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), val));
        }

        public void SetString(itScopeProperties propertyId, string val)
        {
            this.SetString(propertyId, "", val);
        }

        public void SetBoolean(itScopeProperties propertyId, string repeatedCapabilityOrChannel, bool val)
        {
            PInvoke.TestForError(this._handle, PInvoke.SetAttributeViBoolean(this._handle, repeatedCapabilityOrChannel, ((int)(propertyId)), System.Convert.ToUInt16(val)));
        }

        public void SetBoolean(itScopeProperties propertyId, bool val)
        {
            this.SetBoolean(propertyId, "", val);
        }

        private class PInvoke
        {

            [DllImport("itscope_32.dll", EntryPoint = "itscope_init", CallingConvention = CallingConvention.StdCall)]
            public static extern int init(string Resource_Name, ushort ID_Query, ushort Reset_Device, out System.IntPtr Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_InitWithOptions", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitWithOptions(string Resource_Name, ushort ID_Query, ushort Reset_Device, string Option_String, out System.IntPtr Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureNumAverages", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureNumAverages(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_of_Averages);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureNumEnvelopes", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureNumEnvelopes(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_of_Envelopes);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureAcquisitionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcquisitionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Time_Per_Record__seconds_, int Minimum_Record_Length, double Acquisition_Start_Time__second_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureAcquisitionType", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcquisitionType(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Aquisition_Type);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ActualRecordLength", CallingConvention = CallingConvention.StdCall)]
            public static extern int ActualRecordLength(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Actual__Record_Length);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SampleRate", CallingConvention = CallingConvention.StdCall)]
            public static extern int SampleRate(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Sample_Rate);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SampleMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int SampleMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Sample_Mode);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMagnivuEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMagnivuEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Magnivu_Enabled);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureFastAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureFastAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Waveform_Grading, ushort Fast_Acquisition_Enable);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Vertical_Range, double Vertical_Offset, int Vertical_Coupling, double Probe_Attenuation, ushort Channel_Enabled);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureChanCharacteristics", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureChanCharacteristics(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Input_Impedance__ohms_, double Maximum_Input_Frequency__hertz_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_AutoProbeSenseValue", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoProbeSenseValue(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, out double Auto_Probe_Sense_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDigitalChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Threshold, ushort Channel_Enabled);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureBusThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureBusThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Upper_Threshold, double Lower_Threshold);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Type, double Trigger_Holdoff__sec_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTriggerCoupling", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerCoupling(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Coupling);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Level);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTriggerModifier", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerModifier(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Trigger_Modifier);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureAuxInTriggerLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAuxInTriggerLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Trigger_Level);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureEdgeTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureEdgeTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Trigger_Level__volts_, int Trigger_Slope);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureAcLineTriggerSlope", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureAcLineTriggerSlope(System.Runtime.InteropServices.HandleRef Instrument_Handle, int AC_Line_Slope);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDelayTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDelayTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, int Trigger_Coupling, double Level, int Trigger_Slope);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDelayTriggerMode", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDelayTriggerMode(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Mode);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDelayTriggerEvents", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDelayTriggerEvents(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Events);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDelayTriggerTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDelayTriggerTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Time);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTVTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, int TV_Trigger_Signal_Format, int TV_Event, int Trigger_Polarity);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTVTriggerLineNumber", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerLineNumber(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Line_Number);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTVTriggerFieldHoldoff", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerFieldHoldoff(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Holdoff);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTVTriggerHDTV", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerHDTV(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTVTriggerCustom", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTVTriggerCustom(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Format, int Scan_Rate__Hz_, double Line_Period__s_, double Sync_Interval__s_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTriggerThreshold", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTriggerThreshold(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, double Upper_Threshold, double Lower_Threshold);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureRuntTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRuntTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Runt_Low_Threshold__volts_, double Runt_High_Threshold__volts_, int Runt_Polarity);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureRuntTriggerCondition", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRuntTriggerCondition(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Runt_Width, int Runt_Condition);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureGlitchTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureGlitchTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, double Trigger_Level__volts_, double Glitch_Width__sec_, int Glitch_Polarity, int Glitch_Condition);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureTransitTriggerSource", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureTransitTriggerSource(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Trigger_Source, int Polarity, int Condition, double Delta_Time, double Lower_Thresthold, double Upper_Threshold);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMathChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Math_Source1, int Math_Function, int Math_Source2);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMathChannelFFT", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathChannelFFT(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Math_Source1, int FFT_Window, int Vert_Scale);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMathChannelAdvanced", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathChannelAdvanced(System.Runtime.InteropServices.HandleRef Instrument_Handle, double VAR1, double VAR2, string Function_Definition);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMathChannelSpectrum", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathChannelSpectrum(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Math_RF_Source1, int Math_RF_Source2, int Math_Function);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_EnableMathChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableMathChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMathExpDisplay", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMathExpDisplay(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Auto_Scale);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_StoreWfmToRefChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int StoreWfmToRefChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Waveform_Source, string Reference_Channel);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_EnableReferenceChannel", CallingConvention = CallingConvention.StdCall)]
            public static extern int EnableReferenceChannel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, ushort Enable);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureRefLevels", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRefLevels(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Low_Ref__percentage_, double Mid_Ref__percentage_, double High_Ref__percentage_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMidRef", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMidRef(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Mid_Ref__percentage_);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Reference_Level_Calc_Method, int Gating);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureInitiateContinuous", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureInitiateContinuous(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Continuous_Acquisition);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureStandardWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureStandardWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Waveform, double Amplitude, double DC_Offset, double Frequency, double Start_Phase);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigurePresetLevel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePresetLevel(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Preset_Level);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureNoise", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureNoise(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Enable_Noise, int Noise_Level);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureOutputEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, ushort Output_Enabled);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureOutputImpedance", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureOutputImpedance(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Impedance);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigurePeriod", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePeriod(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Period);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureSquareDutyCycle", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureSquareDutyCycle(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Duty_Cycle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigurePulseWidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigurePulseWidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Pulse_Width);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureRampSymmetry", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureRampSymmetry(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Ramp_Symmetry);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SaveWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int SaveWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_RecallWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int RecallWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Source, string Destination);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_QueryArbitraryWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryArbitraryWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Waveform_Slot, System.Text.StringBuilder Waveform_Date, System.Text.StringBuilder Waveform_Time);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_QueryEditedArbitraryWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int QueryEditedArbitraryWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Function, out int Point_Number);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureWaveformLabel", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureWaveformLabel(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Waveform_Slot, string Label);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GenerateArbWaveformFunction", CallingConvention = CallingConvention.StdCall)]
            public static extern int GenerateArbWaveformFunction(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Function, int Point_Number);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_CreateArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int CreateArbWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Size, double[] Data, out int Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureArbWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Handle, double Amplitude, double Offset, double Frequency);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ClearArbWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearArbWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureEvent", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureEvent(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Event_Type, int Acquisition_Number, int Repeat_Count);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureEventEnabled", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureEventEnabled(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Event_Action, ushort Event_Enabled);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ResetDigitalVoltmeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetDigitalVoltmeter(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureDigitalVoltmeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureDigitalVoltmeter(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Type, int Source, ushort Auto_Range);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadDigitalVoltmeter", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadDigitalVoltmeter(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Value, out double Frequency);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadHistoryDVM", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadHistoryDVM(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Average, out double Maximum, out double Minimum);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadStatisticsDVM", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadStatisticsDVM(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Maximum, out double Minimum);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_AutoSetup", CallingConvention = CallingConvention.StdCall)]
            public static extern int AutoSetup(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ConfigureWfmBufferSize", CallingConvention = CallingConvention.StdCall)]
            public static extern int ConfigureWfmBufferSize(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Waveform_Size, int Maximum_Time__ms_, [In, Out] double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadMinMaxWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadMinMaxWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Waveform_Size, int Maximum_Time__ms_, [In, Out] double[] Min_Waveform_Array, [In, Out] double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadWaveformMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadWaveformMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Measurement_Function, int Maximum_Time__ms_, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadPhaseMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadPhaseMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Measure_Source_1, string Measure_Source_2, int Maximum_Time__ms_, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadFreqDomainMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadFreqDomainMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double RF_Channel_Power, out int Unit, out double ACPR, string ACPR_Adjacent_Channel);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadDelayMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadDelayMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Measure_Source_1, string Measure_Source_2, int Delay_Edge_1, int Delay_Edge_2, int Delay_Direction, int Maximum_Time__ms_, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadSnapshotMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSnapshotMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Snapshot_Meas_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadRFVersusBandwidth", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadRFVersusBandwidth(System.Runtime.InteropServices.HandleRef Instrument_Handle, out double Versus_Time_Bandwidth);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadSpectrogramTime", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadSpectrogramTime(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Seconds_Num, out int Time_Stamp);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_InitiateAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_AcquisitionStatus", CallingConvention = CallingConvention.StdCall)]
            public static extern int AcquisitionStatus(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Acquisition_Status);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ForceTrigger", CallingConvention = CallingConvention.StdCall)]
            public static extern int ForceTrigger(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Waveform_Size, [In, Out] double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchMinMaxWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchMinMaxWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Waveform_Size, [In, Out] double[] Min_Waveform_Array, [In, Out] double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchWaveformMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchWaveformMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Measurement_Function, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchPhaseMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchPhaseMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Measure_Source_1, string Measure_Source_2, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchDelayMeasurement", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchDelayMeasurement(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Measure_Source_1, string Measure_Source_2, int Delay_Edge_1, int Delay_Edge_2, int Delay_Direction, out double Measurement);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_InitiateContinuousAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int InitiateContinuousAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Waveform_Size);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchContinuousWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchContinuousWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, [In, Out] double[] Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_FetchContinuousMinMaxWaveform", CallingConvention = CallingConvention.StdCall)]
            public static extern int FetchContinuousMinMaxWaveform(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, [In, Out] double[] Min_Waveform_Array, [In, Out] double[] Max_Waveform_Array, out int Actual_Points, out double Initial_X, out double X_Increment);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_StopContinuousAcquisition", CallingConvention = CallingConvention.StdCall)]
            public static extern int StopContinuousAcquisition(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_Abort", CallingConvention = CallingConvention.StdCall)]
            public static extern int Abort(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_viWrite", CallingConvention = CallingConvention.StdCall)]
            public static extern int viWrite(System.Runtime.InteropServices.HandleRef Instrument_Handle, byte[] Write_Buffer, long Number_of_Bytes_to_Write, out long Number_of_Bytes_Written);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_viRead", CallingConvention = CallingConvention.StdCall)]
            public static extern int viRead(System.Runtime.InteropServices.HandleRef Instrument_Handle, long Number_of_Bytes_to_Read, [In, Out] byte[] Read_Buffer, out long Number_of_Bytes_Read);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_self_test", CallingConvention = CallingConvention.StdCall)]
            public static extern int self_test(System.Runtime.InteropServices.HandleRef Instrument_Handle, out short Self_Test_Result, System.Text.StringBuilder Self_Test_Message);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_reset", CallingConvention = CallingConvention.StdCall)]
            public static extern int reset(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ResetWithDefaults", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetWithDefaults(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_Disable", CallingConvention = CallingConvention.StdCall)]
            public static extern int Disable(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_revision_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int revision_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, System.Text.StringBuilder Instrument_Driver_Revision, System.Text.StringBuilder Firmware_Revision);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_error_query", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_query(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Error_Code, System.Text.StringBuilder Error_Message);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_IsInvalidWfmElement", CallingConvention = CallingConvention.StdCall)]
            public static extern int IsInvalidWfmElement(System.Runtime.InteropServices.HandleRef Instrument_Handle, double Element_Value, out ushort Is_Invalid);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_InvalidateAllAttributes", CallingConvention = CallingConvention.StdCall)]
            public static extern int InvalidateAllAttributes(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetChannelName", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetChannelName(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Index, int BufferSize, System.Text.StringBuilder Channel_String);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetNextCoercionRecord", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextCoercionRecord(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Coercion_Record);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetNextInterchangeWarning", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetNextInterchangeWarning(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Buffer_Size, System.Text.StringBuilder Interchange_Warning);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ClearInterchangeWarnings", CallingConvention = CallingConvention.StdCall)]
            public static extern int ClearInterchangeWarnings(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ResetInterchangeCheck", CallingConvention = CallingConvention.StdCall)]
            public static extern int ResetInterchangeCheck(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_WriteInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int WriteInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Write_Buffer);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_ReadInstrData", CallingConvention = CallingConvention.StdCall)]
            public static extern int ReadInstrData(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Number_of_Bytes_To_Read, System.Text.StringBuilder Read_Buffer, out int Num_Bytes_Read);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_close", CallingConvention = CallingConvention.StdCall)]
            public static extern int close(System.Runtime.InteropServices.HandleRef Instrument_Handle);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_error_message", CallingConvention = CallingConvention.StdCall)]
            public static extern int error_message(System.Runtime.InteropServices.HandleRef Instrument_Handle, int Error_Code, System.Text.StringBuilder Error_Message_2);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out int Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out double Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, int Array_Size, System.Text.StringBuilder Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out ushort Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, out System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SetAttributeViInt32", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViInt32(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, int Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SetAttributeViReal64", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViReal64(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, double Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SetAttributeViString", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViString(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, string Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SetAttributeViBoolean", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViBoolean(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, ushort Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_SetAttributeViSession", CallingConvention = CallingConvention.StdCall)]
            public static extern int SetAttributeViSession(System.Runtime.InteropServices.HandleRef Instrument_Handle, string Channel_Name, int Attribute_ID, System.Runtime.InteropServices.HandleRef Attribute_Value);

            [DllImport("itscope_32.dll", EntryPoint = "itscope_GetError", CallingConvention = CallingConvention.StdCall)]
            public static extern int GetError(System.Runtime.InteropServices.HandleRef Instrument_Handle, out int Code, int BufferSize, System.Text.StringBuilder Description);


            public static int TestForError(System.Runtime.InteropServices.HandleRef handle, int status)
            {
                if ((status < 0))
                {
                    PInvoke.ThrowError(handle, status);
                }
                return status;
            }

            public static int ThrowError(System.Runtime.InteropServices.HandleRef handle, int code)
            {
                int status;
                int size = PInvoke.GetError(handle, out status, 0, null);
                System.Text.StringBuilder msg = new System.Text.StringBuilder();
                if ((size >= 0))
                {
                    msg.Capacity = size;
                    PInvoke.GetError(handle, out status, size, msg);
                }
                throw new System.Runtime.InteropServices.ExternalException(msg.ToString(), code);
            }
        }
    }

    public class itScopeConstants
    {

        public const double _50_0 = 50D;

        public const double _1_0e_06 = 1000000D;

        public const int Normal = 0;

        public const int HiRes = 2;

        public const int PeakDetect = 1;

        public const int Envelope = 3;

        public const int Average = 4;

        public const int _2 = 2;

        public const int _4 = 4;

        public const int _8 = 8;

        public const int _16 = 16;

        public const int _32 = 32;

        public const int _64 = 64;

        public const int _128 = 128;

        public const int _256 = 256;

        public const int _512 = 512;

        public const int WaveformGradingNormal = 1;

        public const int WaveformGradingTemperature = 2;

        public const int WaveformGradingSpectral = 3;

        public const int WaveformGradingInverted = 4;

        public const double ProbeSenseOn = -1D;

        public const double _0_001 = 0.001D;

        public const double _0_002 = 0.002D;

        public const double _0_005 = 0.005D;

        public const double _0_01 = 0.01D;

        public const double _0_02 = 0.02D;

        public const double _0_05 = 0.05D;

        public const double _0_1 = 0.1D;

        public const double _0_2 = 0.2D;

        public const double _0_5 = 0.5D;

        public const double _1_0 = 1D;

        public const double _2_0 = 2D;

        public const double _5_0 = 5D;

        public const double _10_0 = 10D;

        public const double _20_0 = 20D;

        public const double _100_0 = 100D;

        public const double _200_0 = 200D;

        public const double _500_0 = 500D;

        public const double _1000_0 = 1000D;

        public const double _1_0e_n2 = 0.01D;

        public const double _2_0e_n2 = 0.02D;

        public const double _5_0e_n2 = 0.05D;

        public const double _10_0e_n2 = 0.1D;

        public const double _20_0e_n2 = 0.2D;

        public const double _50_0e_n2 = 0.5D;

        public const double _10 = 10D;

        public const double _20 = 20D;

        public const int _50 = 50;

        public const double _100 = 100D;

        public const int Ac = 0;

        public const int Dc = 1;

        public const int Gnd = 2;

        public const int Dcrej = 1001;

        public const int RfMeasureTypeNone = 0;

        public const int RfMeasureTypeCp = 1;

        public const int RfMeasureTypeAcpr = 2;

        public const int RfMeasureTypeObw = 3;

        public const int FftWindowRectangular = 0;

        public const int FftWindowHamming = 1;

        public const int FftWindowHanning = 2;

        public const int FftWindowBlackmanharris = 3;

        public const int FftWindowKaiser = 4;

        public const int FftWindowFlattop = 5;

        public const int RfUnitsDbm = 0;

        public const int RfUnitsDbuw = 1;

        public const int RfUnitsDbmv = 2;

        public const int RfUnitsDmuv = 3;

        public const int RfUnitsDbma = 4;

        public const int RfUnitsDbua = 5;

        public const int RfUnitsDbuv = 6;

        public const int RfRbwModeManual = 0;

        public const int RfRbwModeAuto = 1;

        public const int RfSpectrumTriggered = 0;

        public const int RfSpectrumFreerun = 1;

        public const int RfDetectModeAuto = 0;

        public const int RfDetectModeManual = 1;

        public const int RfDetectionPosPeak = 0;

        public const int RfDetectionNegPeak = 1;

        public const int RfDetectionSample = 2;

        public const int RfDetectionAverage = 3;

        public const int FileFormatTiq = 1;

        public const int FileFormatMatlab = 2;

        public const int EdgeTrigger = 1;

        public const int RuntTrigger = 3;

        public const int GlitchTrigger = 4;

        public const int TransitionTrigger = 1001;

        public const int StateTrigger = 1003;

        public const int PatternTrigger = 1002;

        public const int SetholdTrigger = 1004;

        public const int TvTrigger = 5;

        public const int AcLineTrigger = 7;

        public const int I2cTrigger = 1006;

        public const int SpiTrigger = 1007;

        public const int CanTrigger = 1005;

        public const int Rs232Trigger = 1011;

        public const int NoTriggerMod = 1;

        public const int Auto = 2;

        public const int Bus1 = 1;

        public const int Bus2 = 2;

        public const int TrigAfterTime = 1;

        public const int TrigAfterEvents = 2;

        public const int HfReject = 3;

        public const int LfReject = 4;

        public const int NoiseReject = 5;

        public const int Positive = 1;

        public const int Negative = 0;

        public const int Either = 2;

        public const int TvPositive = 1;

        public const int TvNegative = 2;

        public const int Ntsc = 1;

        public const int Pal = 2;

        public const int Secam = 3;

        public const int Bilevelcustom = 1003;

        public const int Trilevelcustom = 1004;

        public const int Hd480p60 = 1005;

        public const int Hd576p50 = 1006;

        public const int Hd720p30 = 1007;

        public const int Hd720p50 = 1008;

        public const int Hd720p60 = 1009;

        public const int Hd875i60 = 1010;

        public const int Hd1080p24 = 1011;

        public const int Hd1080sf24 = 1012;

        public const int Hd1080i50 = 1013;

        public const int Hd1080i60 = 1014;

        public const int Hd1080p25 = 1015;

        public const int Hd1080p30 = 1016;

        public const int Hd1080p50 = 1017;

        public const int Hd1080p60 = 1018;

        public const int TvEventField1 = 1;

        public const int TvEventField2 = 2;

        public const int TvEventAnyField = 3;

        public const int TvEventAnyLine = 4;

        public const int TvEventLineNumber = 5;

        public const int Hdtv1080p24 = 1;

        public const int Hdtv720p60 = 2;

        public const int Hdtv480p60 = 3;

        public const int Hdtv1080i50 = 4;

        public const int Hdtv1080p25 = 5;

        public const int Hdtv1080i60 = 6;

        public const int Hdtv1080psf24 = 7;

        public const int TvCustomInterlaced = 1;

        public const int TvCustomProgressive = 2;

        public const int TvRate15k = 1;

        public const int TvRate20k = 2;

        public const int TvRate25k = 3;

        public const int TvRate35k = 4;

        public const int TvRate50k = 5;

        public const int RuntWhenOccurs = 1;

        public const int RuntWhenWiderThan = 2;

        public const int RuntWhenLessThan = 3;

        public const int RuntWhenEqual = 4;

        public const int RuntWhenNotequal = 5;

        public const int RuntPositive = 1;

        public const int RuntNegative = 2;

        public const int RuntEither = 3;

        public const int GlitchPositive = 1;

        public const int GlitchNegative = 2;

        public const int GlitchGreaterThan = 2;

        public const int GlitchLessThan = 1;

        public const int GlitchWithin5Percent = 101;

        public const int GlitchOutside5Percent = 102;

        public const int AcLinePositive = 1;

        public const int AcLineNegative = 2;

        public const int AcLineEither = 3;

        public const int TransitionFasterThan = 1;

        public const int TransitionSlowerThan = 2;

        public const int TransitionEqual = 3;

        public const int TransitionUnequal = 4;

        public const int TransitionPositive = 1;

        public const int TransitionNegative = 2;

        public const int TransitionEither = 3;

        public const int LogicTrue = 1;

        public const int LogicFalse = 2;

        public const int LogicLessthan = 3;

        public const int LogicMorethan = 4;

        public const int LogicEqual = 5;

        public const int LogicUnequal = 6;

        public const int LogicAnd = 1;

        public const int LogicNand = 3;

        public const int LogicNor = 4;

        public const int LogicOr = 2;

        public const int LogicHigh = 1;

        public const int LogicLow = 2;

        public const int LogicX = 3;

        public const int ClockRise = 1;

        public const int ClockFall = 2;

        public const int SourCh1 = 1;

        public const int SourCh2 = 2;

        public const int SourCh3 = 3;

        public const int SourCh4 = 4;

        public const int SourExt = 21;

        public const int CanCondSof = 1;

        public const int CanCondFrametype = 2;

        public const int CanCondIdentifier = 3;

        public const int CanCondData = 4;

        public const int CanCondIdanddata = 5;

        public const int CanCondEof = 6;

        public const int CanCondAckmiss = 7;

        public const int CanIdStandard = 1;

        public const int CanIdExtended = 2;

        public const int CanFrameData = 1;

        public const int CanFrameRemote = 2;

        public const int CanFrameError = 3;

        public const int CanFrameOverload = 4;

        public const int I2cCondStart = 1;

        public const int I2cCondStop = 2;

        public const int I2cCondRepeatstart = 3;

        public const int I2cCondAckmiss = 4;

        public const int I2cCondAddress = 5;

        public const int I2cCondData = 6;

        public const int I2cCondAddranddata = 7;

        public const int I2cAddr7 = 1;

        public const int I2cAddr10 = 2;

        public const int I2cRead = 1;

        public const int I2cWrite = 2;

        public const int I2cNocare = 3;

        public const int SpiSs = 1;

        public const int SpiMosi = 2;

        public const int SpiMiso = 3;

        public const int SpiMisomosi = 4;

        public const int Rs232RxStart = 1;

        public const int Rs232RxData = 2;

        public const int Rs232RxEndPacket = 3;

        public const int Rs232TxStart = 4;

        public const int Rs232TxData = 5;

        public const int Rs232TxEndPacket = 6;

        public const int EnetBasicConditionSfd = 0;

        public const int EnetBasicConditionMacaddr = 1;

        public const int EnetBasicConditionMaclen = 2;

        public const int EnetBasicConditionDat = 3;

        public const int EnetBasicConditionEop = 4;

        public const int EnetBasicConditionIdl = 5;

        public const int EnetBasicConditionFcse = 6;

        public const int EnetBasicConditionIph = 7;

        public const int EnetBasicConditionTcph = 8;

        public const int EnetBasicConditionQtag = 9;

        public const int EnetBasicFrameBas = 0;

        public const int EnetBasicFrameQtag = 1;

        public const int EnetBasicQualifierLesst = 0;

        public const int EnetBasicQualifierMoret = 1;

        public const int EnetBasicQualifierEq = 2;

        public const int EnetBasicQualifierUneq = 3;

        public const int EnetBasicQualifierLesseq = 4;

        public const int EnetBasicQualifierMoreeq = 5;

        public const int EnetBasicQualifierIn = 6;

        public const int EnetBasicQualifierOut = 7;

        public const int UsbEndNocare = 0;

        public const int UsbEndContr = 1;

        public const int UsbEndIso = 2;

        public const int UsbEndBulk = 3;

        public const int UsbEndInterrupt = 4;

        public const int UsbStartEndNocare = 0;

        public const int UsbStartEndFullsp = 1;

        public const int UsbStartEndLowsp = 2;

        public const int UsbStartEndIsostart = 3;

        public const int UsbStartEndIsomid = 4;

        public const int UsbStartEndIsoend = 5;

        public const int UsbStartEndIsoall = 6;

        public const int UsbNocare = 0;

        public const int UsbSsplit = 1;

        public const int UsbCsplit = 2;

        public const int CanRate10k = 1;

        public const int CanRate20k = 2;

        public const int CanRate33k = 3;

        public const int CanRate37k = 13;

        public const int CanRate50k = 4;

        public const int CanRate62k = 5;

        public const int CanRate83k = 6;

        public const int CanRate92k = 14;

        public const int CanRate100k = 7;

        public const int CanRate125k = 8;

        public const int CanRate250k = 9;

        public const int CanRate500k = 10;

        public const int CanRate800k = 11;

        public const int CanRate1m = 12;

        public const int CanCanh = 1;

        public const int CanCanl = 2;

        public const int CanRx = 3;

        public const int CanTx = 4;

        public const int CanDiff = 5;

        public const int EnetEnet10baset = 0;

        public const int EnetEnet100basetx = 1;

        public const int EnetProbeDifferential = 0;

        public const int EnetProbeSingleended = 1;

        public const int EnetDiffInputDataSrcCh1 = 0;

        public const int EnetDiffInputDataSrcCh2 = 1;

        public const int EnetDiffInputDataSrcCh3 = 2;

        public const int EnetDiffInputDataSrcCh4 = 3;

        public const int EnetDiffInputDataSrcMath = 4;

        public const int EnetDiffInputDataSrcRef1 = 5;

        public const int EnetDiffInputDataSrcRef2 = 6;

        public const int EnetDiffInputDataSrcRef4 = 8;

        public const int EnetDiffInputDataSrcRef3 = 7;

        public const int EnetPlusDataCh1 = 0;

        public const int EnetPlusDataCh2 = 1;

        public const int EnetPlusDataCh3 = 2;

        public const int EnetPlusDataCh4 = 3;

        public const int EnetMinusDataSrcCh1 = 0;

        public const int EnetMinusDataSrcCh2 = 1;

        public const int EnetMinusDataSrcCh3 = 2;

        public const int EnetMinusDataSrcCh4 = 3;

        public const int EnetProtIpv4 = 0;

        public const int EnetProtOther = 1;

        public const int SpiPolarityLow = 1;

        public const int SpiPolarityHigh = 2;

        public const int SpiSclkRise = 1;

        public const int SpiSclkFall = 2;

        public const int ParallelClockRise = 1;

        public const int ParallelClockFall = 2;

        public const int ParallelClockEither = 3;

        public const int SourD0 = 50;

        public const int SourD1 = 51;

        public const int SourD2 = 52;

        public const int SourD3 = 53;

        public const int SourD4 = 54;

        public const int SourD5 = 55;

        public const int SourD6 = 56;

        public const int SourD7 = 57;

        public const int SourD8 = 58;

        public const int SourD9 = 59;

        public const int SourD10 = 60;

        public const int SourD11 = 61;

        public const int SourD12 = 62;

        public const int SourD13 = 63;

        public const int SourD14 = 64;

        public const int SourD15 = 65;

        public const int _75 = 75;

        public const int _110 = 110;

        public const int _134 = 134;

        public const int _150 = 150;

        public const int _300 = 300;

        public const int _600 = 600;

        public const int _1200 = 1200;

        public const int _1800 = 1800;

        public const int _2000 = 2000;

        public const int _2400 = 2400;

        public const int _3600 = 3600;

        public const int _4800 = 4800;

        public const int _7200 = 7200;

        public const int _9600 = 9600;

        public const int _14400 = 14400;

        public const int _15200 = 15200;

        public const int _19200 = 19200;

        public const int _28800 = 28800;

        public const int _38400 = 38400;

        public const int _56000 = 56000;

        public const int _57600 = 57600;

        public const int _115200 = 115200;

        public const int _128000 = 128000;

        public const int _230400 = 230400;

        public const int _460800 = 460800;

        public const int _921600 = 921600;

        public const int _1382400 = 1382400;

        public const int _1843200 = 1843200;

        public const int _2764800 = 2764800;

        public const int _7 = 7;

        public const int Rs232DelimiterNull = 1;

        public const int Rs232DelimiterLf = 2;

        public const int Rs232DelimiterCr = 3;

        public const int Rs232DelimiterSpace = 4;

        public const int Rs232DelimiterXff = 5;

        public const int Rs232ParityNone = 1;

        public const int Rs232ParityEven = 2;

        public const int Rs232ParityOdd = 3;

        public const int DelDirBackward = 1;

        public const int DelDirForward = 2;

        public const int DelEdgeRise = 1;

        public const int DelEdgeFall = 2;

        public const int MeasHistogram = 1;

        public const int MeasMinMax = 2;

        public const int MeasAuto = 3;

        public const int MeasGatingOff = 1;

        public const int MeasGatingScreen = 2;

        public const int MeasGatingCursor = 3;

        public const int MathTypeDual = 1;

        public const int MathTypeFft = 2;

        public const int MathTypeAdvanced = 3;

        public const int MathTypeSpectrum = 4;

        public const int MathAdd = 1;

        public const int MathSubtract = 2;

        public const int MathMultiply = 3;

        public const int MathDivide = 4;

        public const int MathFft = 5;

        public const int RfsourNormal = 1;

        public const int RfsourAverage = 2;

        public const int RfsourMaxhold = 3;

        public const int RfsourMinhold = 4;

        public const int SourRef1 = 10;

        public const int SourRef2 = 11;

        public const int SourRef3 = 12;

        public const int SourRef4 = 13;

        public const int MathDbvRms = 1;

        public const int MathLinearRms = 2;

        public const int MathHanning = 1;

        public const int MathRectangular = 2;

        public const int MathHamming = 3;

        public const int MathBlackHarris = 4;

        public const int Dpo4104 = 1;

        public const int Dpo4054 = 2;

        public const int Dpo4034 = 3;

        public const int Dpo4032 = 4;

        public const int Mso4104 = 10;

        public const int Mso4054 = 11;

        public const int Mso4034 = 12;

        public const int Mso4032 = 13;

        public const int Dpo3012 = 20;

        public const int Dpo3014 = 21;

        public const int Dpo3032 = 22;

        public const int Dpo3034 = 23;

        public const int Dpo3052 = 24;

        public const int Dpo3054 = 25;

        public const int Mso3012 = 30;

        public const int Mso3014 = 31;

        public const int Mso3032 = 32;

        public const int Mso3034 = 33;

        public const int Mso3052 = 34;

        public const int Mso3054 = 35;

        public const int Dpo4034b = 36;

        public const int Dpo4054b = 37;

        public const int Dpo4104b = 38;

        public const int Mso4034b = 39;

        public const int Mso4054b = 40;

        public const int Mso4104b = 41;

        public const int Mdo41046 = 42;

        public const int Mdo41043 = 43;

        public const int Mdo40546 = 44;

        public const int Mdo40543 = 45;

        public const int Dpo4102b = 46;

        public const int Dpo4102bL = 47;

        public const int Dpo4104bL = 48;

        public const int Mso4102b = 49;

        public const int Mso4102bL = 50;

        public const int Mso4104bL = 51;

        public const int Dpo4014b = 52;

        public const int Mso4014b = 53;

        public const int Mdo40143 = 54;

        public const int Mdo40343 = 55;

        public const int Mdo4014b3 = 56;

        public const int Mdo4034b3 = 57;

        public const int Mdo4054b3 = 58;

        public const int Mdo4054b6 = 59;

        public const int Mdo4104b3 = 60;

        public const int Mdo4104b6 = 61;

        public const int Mdo3012 = 62;

        public const int Mdo3014 = 63;

        public const int Mdo3022 = 64;

        public const int Mdo3024 = 65;

        public const int Mdo3032 = 66;

        public const int Mdo3034 = 67;

        public const int Mdo3052 = 68;

        public const int Mdo3054 = 69;

        public const int Mdo3102 = 70;

        public const int Mdo3104 = 71;

        public const int Mdo4024c = 72;

        public const int Mdo4034c = 73;

        public const int Mdo4054c = 74;

        public const int Mdo4104c = 75;

        public const int WfmSine = 1;

        public const int WfmSquare = 2;

        public const int WfmPulse = 3;

        public const int WfmRamp = 4;

        public const int WfmNoise = 5;

        public const int WfmDc = 6;

        public const int WfmSinc = 7;

        public const int WfmGaussian = 8;

        public const int WfmLorentz = 9;

        public const int WfmErise = 10;

        public const int WfmEdecay = 11;

        public const int WfmHaversine = 12;

        public const int WfmCardiac = 13;

        public const int WfmArbitrary = 14;

        public const int FuncLevelCmos50v = 1;

        public const int FuncLevelCmos33v = 2;

        public const int FuncLevelCmos25v = 3;

        public const int FuncLevelUser = 4;

        public const int FuncLevelEcl = 5;

        public const int FuncLevelTtl = 6;

        public const int FuncOutputImpedanceFifty = 1;

        public const int FuncOutputImpedanceHighz = 2;

        public const int DvmTypeAcrms = 1;

        public const int DvmTypeAcdcrms = 2;

        public const int DvmTypeDc = 3;

        public const int DvmTypeFrequency = 4;

        public const int DvmTypeOff = 5;

        public const int DvmSourceCh1 = 1;

        public const int DvmSourceCh2 = 2;

        public const int DvmSourceCh3 = 3;

        public const int DvmSourceCh4 = 4;

        public const int EventTriggerTypeNone = 1;

        public const int EventTriggerTypeTrigger = 2;

        public const int EventTriggerTypeAcqcomplete = 3;

        public const int LogicTrigger = 1009;

        public const int PulseTrigger = 1008;

        public const int SerialTrigger = 1010;

        public const int ParallelTrigger = 1012;

        public const int _1000 = 1000;

        public const int _10000 = 10000;

        public const int _100000 = 100000;

        public const int _1000000 = 1000000;

        public const int _5000000 = 5000000;

        public const int _10000000 = 10000000;

        public const int _20000000 = 20000000;
    }

    public enum itScopeProperties
    {

        /// <summary>
        /// System.Boolean
        /// </summary>
        RangeCheck = 1050002,

        /// <summary>
        /// System.Boolean
        /// </summary>
        QueryInstrumentStatus = 1050003,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Cache = 1050004,

        /// <summary>
        /// System.Boolean
        /// </summary>
        Simulate = 1050005,

        /// <summary>
        /// System.Boolean
        /// </summary>
        RecordCoercions = 1050006,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InterchangeCheck = 1050021,

        /// <summary>
        /// System.Int32
        /// </summary>
        ChannelCount = 1050203,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverPrefix = 1050302,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentManufacturer = 1050511,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentModel = 1050512,

        /// <summary>
        /// System.String
        /// </summary>
        InstrumentFirmwareRevision = 1050510,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverRevision = 1050551,

        /// <summary>
        /// System.String
        /// </summary>
        SupportedInstrumentModels = 1050327,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverVendor = 1050513,

        /// <summary>
        /// System.String
        /// </summary>
        SpecificDriverDescription = 1050514,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMajorVersion = 1050515,

        /// <summary>
        /// System.Int32
        /// </summary>
        SpecificDriverClassSpecMinorVersion = 1050516,

        /// <summary>
        /// System.String
        /// </summary>
        LogicalName = 1050305,

        /// <summary>
        /// System.String
        /// </summary>
        IoResourceDescriptor = 1050304,

        /// <summary>
        /// System.String
        /// </summary>
        DriverSetup = 1050007,

        /// <summary>
        /// System.String
        /// </summary>
        GroupCapabilities = 1050401,

        /// <summary>
        /// System.Int32
        /// </summary>
        AcquisitionType = 1250101,

        /// <summary>
        /// System.Boolean
        /// </summary>
        InitiateContinuous = 1250107,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumAverages = 1250104,

        /// <summary>
        /// System.Int32
        /// </summary>
        NumEnvelopes = 1250105,

        /// <summary>
        /// System.Int32
        /// </summary>
        HorzMinNumPts = 1250009,

        /// <summary>
        /// System.Int32
        /// </summary>
        HorzRecordLength = 1250008,

        /// <summary>
        /// System.Double
        /// </summary>
        HorzTimePerRecord = 1250007,

        /// <summary>
        /// System.Double
        /// </summary>
        AcquisitionStartTime = 1250109,

        /// <summary>
        /// System.Double
        /// </summary>
        HorzSampleRate = 1250010,

        /// <summary>
        /// System.Int32
        /// </summary>
        SampleMode = 1250106,

        /// <summary>
        /// System.Boolean
        /// </summary>
        ChannelEnabled = 1250005,

        /// <summary>
        /// System.Double
        /// </summary>
        ProbeAttenuation = 1250004,

        /// <summary>
        /// System.Double
        /// </summary>
        ProbeSenseValue = 1250108,

        /// <summary>
        /// System.Double
        /// </summary>
        VerticalRange = 1250001,

        /// <summary>
        /// System.Double
        /// </summary>
        VerticalOffset = 1250002,

        /// <summary>
        /// System.Int32
        /// </summary>
        VerticalCoupling = 1250003,

        /// <summary>
        /// System.Double
        /// </summary>
        MaxInputFrequency = 1250006,

        /// <summary>
        /// System.Double
        /// </summary>
        InputImpedance = 1250103,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerType = 1250012,

        /// <summary>
        /// System.String
        /// </summary>
        TriggerSource = 1250013,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerLevel = 1250017,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerLevelByCh = 1150094,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerUpperthresByCh = 1150095,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerLowerthresByCh = 1150096,

        /// <summary>
        /// System.Double
        /// </summary>
        TriggerHoldoff = 1250016,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerModifier = 1250102,

        /// <summary>
        /// System.Int32
        /// </summary>
        DelayTriggerMode = 1150011,

        /// <summary>
        /// System.Int32
        /// </summary>
        DelayTriggerEvents = 1150012,

        /// <summary>
        /// System.String
        /// </summary>
        DelayTriggerSource = 1150013,

        /// <summary>
        /// System.Int32
        /// </summary>
        DelayTriggerCoupling = 1150014,

        /// <summary>
        /// System.Int32
        /// </summary>
        DelayTriggerSlope = 1150015,

        /// <summary>
        /// System.Double
        /// </summary>
        DelayTriggerLevel = 1150016,

        /// <summary>
        /// System.Double
        /// </summary>
        DelayTriggerTime = 1150148,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerCoupling = 1250014,

        /// <summary>
        /// System.Int32
        /// </summary>
        TriggerSlope = 1250018,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerPolarity = 1250204,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerSignalFormat = 1250201,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerEvent = 1250205,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerLineNumber = 1250206,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerHdtvFormat = 1150180,

        /// <summary>
        /// System.Double
        /// </summary>
        TvTriggerFieldHoldoff = 1150181,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerCustomFormat = 1150182,

        /// <summary>
        /// System.Int32
        /// </summary>
        TvTriggerCustomScanRate = 1150183,

        /// <summary>
        /// System.Double
        /// </summary>
        TvTriggerCustomLinePeriod = 1150196,

        /// <summary>
        /// System.Double
        /// </summary>
        TvTriggerCustomSyncInterval = 1150197,

        /// <summary>
        /// System.Int32
        /// </summary>
        RuntWhen = 1150008,

        /// <summary>
        /// System.Int32
        /// </summary>
        RuntPolarity = 1250303,

        /// <summary>
        /// System.Double
        /// </summary>
        RuntWidth = 1150009,

        /// <summary>
        /// System.Double
        /// </summary>
        RuntHighThreshold = 1250301,

        /// <summary>
        /// System.Double
        /// </summary>
        RuntLowThreshold = 1250302,

        /// <summary>
        /// System.Double
        /// </summary>
        GlitchWidth = 1250401,

        /// <summary>
        /// System.Int32
        /// </summary>
        GlitchPolarity = 1250402,

        /// <summary>
        /// System.Int32
        /// </summary>
        GlitchCondition = 1250403,

        /// <summary>
        /// System.Int32
        /// </summary>
        AcLineTriggerSlope = 1250701,

        /// <summary>
        /// System.Int32
        /// </summary>
        TransitionWhen = 1150018,

        /// <summary>
        /// System.Int32
        /// </summary>
        TransitionPolarity = 1150017,

        /// <summary>
        /// System.Double
        /// </summary>
        TransitionDeltaTime = 1150019,

        /// <summary>
        /// System.Double
        /// </summary>
        TransitionHighThreshold = 1150020,

        /// <summary>
        /// System.Double
        /// </summary>
        TransitionLowThreshold = 1150021,

        /// <summary>
        /// System.Double
        /// </summary>
        LogicThresByCh = 1150097,

        /// <summary>
        /// System.Int32
        /// </summary>
        PatternWhen = 1150027,

        /// <summary>
        /// System.Int32
        /// </summary>
        PatternFunction = 1150026,

        /// <summary>
        /// System.Double
        /// </summary>
        PatternDeltatime = 1150028,

        /// <summary>
        /// System.Int32
        /// </summary>
        PatternInput = 1150098,

        /// <summary>
        /// System.Int32
        /// </summary>
        StateFunction = 1150099,

        /// <summary>
        /// System.Int32
        /// </summary>
        StateInput = 1150100,

        /// <summary>
        /// System.Int32
        /// </summary>
        StateWhen = 1150036,

        /// <summary>
        /// System.Int32
        /// </summary>
        StateClockEdge = 1150101,

        /// <summary>
        /// System.Int32
        /// </summary>
        StateClockSource = 1150092,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetholdClockSource = 1150103,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetholdClockEdge = 1150102,

        /// <summary>
        /// System.Int32
        /// </summary>
        SetholdDataSource = 1150104,

        /// <summary>
        /// System.Double
        /// </summary>
        SetholdSettime = 1150106,

        /// <summary>
        /// System.Double
        /// </summary>
        SetholdHoldtime = 1150105,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasHighRef = 1250607,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasMidRef = 1250609,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasMid2Ref = 1150056,

        /// <summary>
        /// System.Double
        /// </summary>
        MeasLowRef = 1250608,

        /// <summary>
        /// System.String
        /// </summary>
        MeasSource = 1150053,

        /// <summary>
        /// System.String
        /// </summary>
        MeasSource2 = 1150057,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasFunction = 1150054,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasDelDirection = 1150058,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasDelEdge = 1150059,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasDelEdge2 = 1150060,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasRefCalcMeth = 1150052,

        /// <summary>
        /// System.Int32
        /// </summary>
        MeasGating = 1150055,

        /// <summary>
        /// System.Int32
        /// </summary>
        MathType = 1150123,

        /// <summary>
        /// System.Int32
        /// </summary>
        MathFunction = 1150124,

        /// <summary>
        /// System.Int32
        /// </summary>
        MathSource1st = 1150125,

        /// <summary>
        /// System.Int32
        /// </summary>
        MathSource2nd = 1150126,

        /// <summary>
        /// System.Int32
        /// </summary>
        FftVertScale = 1150128,

        /// <summary>
        /// System.Int32
        /// </summary>
        FftWindow = 1150127,

        /// <summary>
        /// System.Double
        /// </summary>
        AdvVar1 = 1150129,

        /// <summary>
        /// System.Double
        /// </summary>
        AdvVar2 = 1150130,

        /// <summary>
        /// System.String
        /// </summary>
        AdvDefine = 1150131,

        /// <summary>
        /// System.String
        /// </summary>
        IdQueryResponse = 1150001,

        /// <summary>
        /// System.Int32
        /// </summary>
        Model = 1150061,

        /// <summary>
        /// System.Int32
        /// </summary>
        FetchBufferSize = 1150149,

        /// <summary>
        /// System.Int32
        /// </summary>
        WaveformSize = 1150150,
    }
}
